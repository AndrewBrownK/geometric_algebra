#define_import_path cga3d_min

//
// AUTO-GENERATED - DO NOT MODIFY
//
// To contribute to this file, see the adjacent codegen package.
// https://github.com/AndrewBrownK/projective_ga/
//

struct Scalar {
    // 1
     g0_: f32,
}

struct AntiScalar {
    // e12345
     g0_: f32,
}

struct DualNum {
    // 1, e12345
     g0_: vec2<f32>,
}

struct FlatPoint {
    // e15, e25, e35, e45
     g0_: vec4<f32>,
}

struct Line {
    // -e145, -e245, -e345
     g0_: vec3<f32>,
    // e235, -e135, e125
     g1_: vec3<f32>,
}

struct Plane {
    // e2345, -e1345, e1245, -e1235
     g0_: vec4<f32>,
}

struct RoundPoint {
    // e1, e2, e3
     g0_: vec3<f32>,
    // e4, e5
     g1_: vec2<f32>,
}

struct Dipole {
    // -e14, -e24, -e34
     g0_: vec3<f32>,
    // e23, -e13, e12
     g1_: vec3<f32>,
    // e15, e25, e35, e45
     g2_: vec4<f32>,
}

struct Circle {
    // e234, -e134, e124, -e123
     g0_: vec4<f32>,
    // -e145, -e245, -e345
     g1_: vec3<f32>,
    // e235, -e135, e125
     g2_: vec3<f32>,
}

struct Sphere {
    // e2345, -e1345, e1245
     g0_: vec3<f32>,
    // e1234, -e1235
     g1_: vec2<f32>,
}

struct Motor {
    // -e145, -e245, -e345, e12345
     g0_: vec4<f32>,
    // e235, -e135, e125
     g1_: vec3<f32>,
}

struct Flector {
    // e15, e25, e35, e45
     g0_: vec4<f32>,
    // e2345, -e1345, e1245, -e1235
     g1_: vec4<f32>,
}

struct MultiVector {
    // 1, e12345
     g0_: vec2<f32>,
    // e1, e2, e3
     g1_: vec3<f32>,
    // e4, e5
     g2_: vec2<f32>,
    // -e14, -e24, -e34
     g3_: vec3<f32>,
    // e23, -e13, e12
     g4_: vec3<f32>,
    // e15, e25, e35, e45
     g5_: vec4<f32>,
    // e234, -e134, e124, -e123
     g6_: vec4<f32>,
    // -e145, -e245, -e345
     g7_: vec3<f32>,
    // e235, -e135, e125
     g8_: vec3<f32>,
    // e2345, -e1345, e1245
     g9_: vec3<f32>,
    // e1234, -e1235
     g10_: vec2<f32>,
}

fn antiScalar_one() -> AntiScalar {
    return AntiScalar(0.0);
}

fn circle_one() -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole_one() -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn dualNum_one() -> DualNum {
    return DualNum(vec2<f32>(1.0, 0.0));
}

fn flatPoint_one() -> FlatPoint {
    return FlatPoint(vec4<f32>(0.0));
}

fn flector_one() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn line_one() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn motor_one() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn multiVector_one() -> MultiVector {
    return MultiVector(vec2<f32>(1.0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_one() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn roundPoint_one() -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_one() -> Scalar {
    return Scalar(1.0);
}

fn sphere_one() -> Sphere {
    return Sphere(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_unit() -> AntiScalar {
    return AntiScalar(1.0);
}

fn circle_unit() -> Circle {
    return Circle(vec4<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0));
}

fn dipole_unit() -> Dipole {
    return Dipole(vec3<f32>(1.0), vec3<f32>(1.0), vec4<f32>(1.0));
}

fn dualNum_unit() -> DualNum {
    return DualNum(vec2<f32>(1.0));
}

fn flatPoint_unit() -> FlatPoint {
    return FlatPoint(vec4<f32>(1.0));
}

fn flector_unit() -> Flector {
    return Flector(vec4<f32>(1.0), vec4<f32>(1.0));
}

fn line_unit() -> Line {
    return Line(vec3<f32>(1.0), vec3<f32>(1.0));
}

fn motor_unit() -> Motor {
    return Motor(vec4<f32>(1.0), vec3<f32>(1.0));
}

fn multiVector_unit() -> MultiVector {
    return MultiVector(vec2<f32>(1.0), vec3<f32>(1.0), vec2<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0), vec4<f32>(1.0), vec4<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0), vec2<f32>(1.0));
}

fn plane_unit() -> Plane {
    return Plane(vec4<f32>(1.0));
}

fn roundPoint_unit() -> RoundPoint {
    return RoundPoint(vec3<f32>(1.0), vec2<f32>(1.0));
}

fn scalar_unit() -> Scalar {
    return Scalar(1.0);
}

fn sphere_unit() -> Sphere {
    return Sphere(vec3<f32>(1.0), vec2<f32>(1.0));
}

fn antiScalar_zero() -> AntiScalar {
    return AntiScalar(0.0);
}

fn circle_zero() -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole_zero() -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn dualNum_zero() -> DualNum {
    return DualNum(vec2<f32>(0.0));
}

fn flatPoint_zero() -> FlatPoint {
    return FlatPoint(vec4<f32>(0.0));
}

fn flector_zero() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn line_zero() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn motor_zero() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn multiVector_zero() -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_zero() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn roundPoint_zero() -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_zero() -> Scalar {
    return Scalar(0.0);
}

fn sphere_zero() -> Sphere {
    return Sphere(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_neg(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0_);
}

fn circle_neg(self_: Circle) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec3<f32>(-1.0));
}

fn dipole_neg(self_: Dipole) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec4<f32>(-1.0));
}

fn dualNum_neg(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(-1.0));
}

fn flatPoint_neg(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(-1.0));
}

fn flector_neg(self_: Flector) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec4<f32>(-1.0));
}

fn line_neg(self_: Line) -> Line {
    return Line(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn motor_neg(self_: Motor) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn multiVector_neg(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec2<f32>(-1.0), self_.g3_ * vec3<f32>(-1.0), self_.g4_ * vec3<f32>(-1.0), self_.g5_ * vec4<f32>(-1.0), self_.g6_ * vec4<f32>(-1.0), self_.g7_ * vec3<f32>(-1.0), self_.g8_ * vec3<f32>(-1.0), self_.g9_ * vec3<f32>(-1.0), self_.g10_ * vec2<f32>(-1.0));
}

fn plane_neg(self_: Plane) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(-1.0));
}

fn roundPoint_neg(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec2<f32>(-1.0));
}

fn scalar_neg(self_: Scalar) -> Scalar {
    return Scalar(-self_.g0_);
}

fn sphere_neg(self_: Sphere) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec2<f32>(-1.0));
}

fn antiScalar_add_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ + other.g0_);
}

fn antiScalar_add_circle(self_: AntiScalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_add_dipole(self_: AntiScalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_add_dualNum(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0_) + other.g0_);
}

fn antiScalar_add_flatPoint(self_: AntiScalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_add_flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn antiScalar_add_line(self_: AntiScalar, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0_) + vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), other.g1_);
}

fn antiScalar_add_motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0_) + other.g0_, other.g1_);
}

fn antiScalar_add_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_) + other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, other.g7_, other.g8_, other.g9_, other.g10_);
}

fn antiScalar_add_plane(self_: AntiScalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn antiScalar_add_roundPoint(self_: AntiScalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_add_scalar(self_: AntiScalar, other: Scalar) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0_) + vec2<f32>(other.g0_, 0.0));
}

fn antiScalar_add_sphere(self_: AntiScalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, other.g1_);
}

fn circle_add_antiScalar(self_: Circle, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_add_circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0_ + other.g0_, self_.g1_ + other.g1_, self_.g2_ + other.g2_);
}

fn circle_add_dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_add_dualNum(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_add_flatPoint(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_add_flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, self_.g0_, self_.g1_, self_.g2_, vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn circle_add_line(self_: Circle, other: Line) -> Circle {
    return Circle(self_.g0_, self_.g1_ + other.g0_, self_.g2_ + other.g1_);
}

fn circle_add_motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_ + vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g2_ + other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_add_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, self_.g0_ + other.g6_, self_.g1_ + other.g7_, self_.g2_ + other.g8_, other.g9_, other.g10_);
}

fn circle_add_plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn circle_add_roundPoint(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_add_scalar(self_: Circle, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_add_sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, other.g0_, other.g1_);
}

fn dipole_add_antiScalar(self_: Dipole, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_add_circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, other.g0_, other.g1_, other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_add_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0_ + other.g0_, self_.g1_ + other.g1_, self_.g2_ + other.g2_);
}

fn dipole_add_dualNum(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_add_flatPoint(self_: Dipole, other: FlatPoint) -> Dipole {
    return Dipole(self_.g0_, self_.g1_, self_.g2_ + other.g0_);
}

fn dipole_add_flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_ + other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn dipole_add_line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_add_motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_add_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, other.g1_, other.g2_, self_.g0_ + other.g3_, self_.g1_ + other.g4_, self_.g2_ + other.g5_, other.g6_, other.g7_, other.g8_, other.g9_, other.g10_);
}

fn dipole_add_plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn dipole_add_roundPoint(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0_, other.g1_, self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_add_scalar(self_: Dipole, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_add_sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, other.g1_);
}

fn dualNum_add_antiScalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0_ + vec2<f32>(0.0, other.g0_));
}

fn dualNum_add_circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_add_dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_add_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0_ + other.g0_);
}

fn dualNum_add_flatPoint(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_add_flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn dualNum_add_line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_add_motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ + vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_add_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ + other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, other.g7_, other.g8_, other.g9_, other.g10_);
}

fn dualNum_add_plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn dualNum_add_roundPoint(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0_, other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_add_scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0_ + vec2<f32>(other.g0_, 0.0));
}

fn dualNum_add_sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, other.g1_);
}

fn flatPoint_add_antiScalar(self_: FlatPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_add_circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, other.g0_, other.g1_, other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_add_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return Dipole(other.g0_, other.g1_, self_.g0_ + other.g2_);
}

fn flatPoint_add_dualNum(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_add_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ + other.g0_);
}

fn flatPoint_add_flector(self_: FlatPoint, other: Flector) -> Flector {
    return Flector(self_.g0_ + other.g0_, other.g1_);
}

fn flatPoint_add_line(self_: FlatPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_add_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_add_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, self_.g0_ + other.g5_, other.g6_, other.g7_, other.g8_, other.g9_, other.g10_);
}

fn flatPoint_add_plane(self_: FlatPoint, other: Plane) -> Flector {
    return Flector(self_.g0_, other.g0_);
}

fn flatPoint_add_roundPoint(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_add_scalar(self_: FlatPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_add_sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, other.g1_);
}

fn flector_add_antiScalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, other.g0_, other.g1_, other.g2_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, self_.g0_ + other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_dualNum(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_flatPoint(self_: Flector, other: FlatPoint) -> Flector {
    return Flector(self_.g0_ + other.g0_, self_.g1_);
}

fn flector_add_flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0_ + other.g0_, self_.g1_ + other.g1_);
}

fn flector_add_line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), other.g0_, other.g1_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, self_.g0_ + other.g5_, other.g6_, other.g7_, other.g8_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) + other.g9_, vec2<f32>(0.0, self_.g1_.w) + other.g10_);
}

fn flector_add_plane(self_: Flector, other: Plane) -> Flector {
    return Flector(self_.g0_, self_.g1_ + other.g0_);
}

fn flector_add_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_add_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) + other.g0_, vec2<f32>(0.0, self_.g1_.w) + other.g1_);
}

fn line_add_antiScalar(self_: Line, other: AntiScalar) -> Motor {
    return Motor(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0_), self_.g1_);
}

fn line_add_circle(self_: Line, other: Circle) -> Circle {
    return Circle(other.g0_, self_.g0_ + other.g1_, self_.g1_ + other.g2_);
}

fn line_add_dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_add_dualNum(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_add_flatPoint(self_: Line, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_add_flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn line_add_line(self_: Line, other: Line) -> Line {
    return Line(self_.g0_ + other.g0_, self_.g1_ + other.g1_);
}

fn line_add_motor(self_: Line, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, 0.0) + other.g0_, self_.g1_ + other.g1_);
}

fn line_add_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, self_.g0_ + other.g7_, self_.g1_ + other.g8_, other.g9_, other.g10_);
}

fn line_add_plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn line_add_roundPoint(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_add_scalar(self_: Line, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_add_sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, other.g0_, other.g1_);
}

fn motor_add_antiScalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0_ + vec4<f32>(0.0, 0.0, 0.0, other.g0_), self_.g1_);
}

fn motor_add_circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) + other.g1_, self_.g1_ + other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_add_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_add_dualNum(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w) + other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_add_flatPoint(self_: Motor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_add_flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn motor_add_line(self_: Motor, other: Line) -> Motor {
    return Motor(self_.g0_ + vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), self_.g1_ + other.g1_);
}

fn motor_add_motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0_ + other.g0_, self_.g1_ + other.g1_);
}

fn motor_add_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w) + other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) + other.g7_, self_.g1_ + other.g8_, other.g9_, other.g10_);
}

fn motor_add_plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn motor_add_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_add_scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w) + vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_add_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, other.g0_, other.g1_);
}

fn multiVector_add_antiScalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0_ + vec2<f32>(0.0, other.g0_), self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_add_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_ + other.g0_, self_.g7_ + other.g1_, self_.g8_ + other.g2_, self_.g9_, self_.g10_);
}

fn multiVector_add_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_ + other.g0_, self_.g4_ + other.g1_, self_.g5_ + other.g2_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_add_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(self_.g0_ + other.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_add_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_ + other.g0_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_add_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_ + other.g0_, self_.g6_, self_.g7_, self_.g8_, self_.g9_ + vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), self_.g10_ + vec2<f32>(0.0, other.g1_.w));
}

fn multiVector_add_line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_ + other.g0_, self_.g8_ + other.g1_, self_.g9_, self_.g10_);
}

fn multiVector_add_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ + vec2<f32>(0.0, other.g0_.w), self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_ + vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g8_ + other.g1_, self_.g9_, self_.g10_);
}

fn multiVector_add_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ + other.g0_, self_.g1_ + other.g1_, self_.g2_ + other.g2_, self_.g3_ + other.g3_, self_.g4_ + other.g4_, self_.g5_ + other.g5_, self_.g6_ + other.g6_, self_.g7_ + other.g7_, self_.g8_ + other.g8_, self_.g9_ + other.g9_, self_.g10_ + other.g10_);
}

fn multiVector_add_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_ + vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g10_ + vec2<f32>(0.0, other.g0_.w));
}

fn multiVector_add_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_ + other.g0_, self_.g2_ + other.g1_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_add_scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0_ + vec2<f32>(other.g0_, 0.0), self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_add_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_ + other.g0_, self_.g10_ + other.g1_);
}

fn plane_add_antiScalar(self_: Plane, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, other.g2_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_dualNum(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_flatPoint(self_: Plane, other: FlatPoint) -> Flector {
    return Flector(other.g0_, self_.g0_);
}

fn plane_add_flector(self_: Plane, other: Flector) -> Flector {
    return Flector(other.g0_, self_.g0_ + other.g1_);
}

fn plane_add_line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, other.g7_, other.g8_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) + other.g9_, vec2<f32>(0.0, self_.g0_.w) + other.g10_);
}

fn plane_add_plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0_ + other.g0_);
}

fn plane_add_roundPoint(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_scalar(self_: Plane, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_add_sphere(self_: Plane, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) + other.g0_, vec2<f32>(0.0, self_.g0_.w) + other.g1_);
}

fn roundPoint_add_antiScalar(self_: RoundPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_dualNum(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_flatPoint(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn roundPoint_add_line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_.w), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, self_.g0_ + other.g1_, self_.g1_ + other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, other.g7_, other.g8_, other.g9_, other.g10_);
}

fn roundPoint_add_plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn roundPoint_add_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_ + other.g0_, self_.g1_ + other.g1_);
}

fn roundPoint_add_scalar(self_: RoundPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_add_sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, other.g1_);
}

fn scalar_add_antiScalar(self_: Scalar, other: AntiScalar) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_, 0.0) + vec2<f32>(0.0, other.g0_));
}

fn scalar_add_circle(self_: Scalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_add_dipole(self_: Scalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_add_dualNum(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_, 0.0) + other.g0_);
}

fn scalar_add_flatPoint(self_: Scalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_add_flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0, other.g1_.w));
}

fn scalar_add_line(self_: Scalar, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_add_motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0) + vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_add_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0) + other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, other.g7_, other.g8_, other.g9_, other.g10_);
}

fn scalar_add_plane(self_: Scalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0, other.g0_.w));
}

fn scalar_add_roundPoint(self_: Scalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_add_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ + other.g0_);
}

fn scalar_add_sphere(self_: Scalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, other.g1_);
}

fn sphere_add_antiScalar(self_: Sphere, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_add_circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, other.g2_, self_.g0_, self_.g1_);
}

fn sphere_add_dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0_, other.g1_, other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_add_dualNum(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_add_flatPoint(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_add_flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ + vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), self_.g1_ + vec2<f32>(0.0, other.g1_.w));
}

fn sphere_add_line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0_, other.g1_, self_.g0_, self_.g1_);
}

fn sphere_add_motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), other.g1_, self_.g0_, self_.g1_);
}

fn sphere_add_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0_, other.g1_, other.g2_, other.g3_, other.g4_, other.g5_, other.g6_, other.g7_, other.g8_, self_.g0_ + other.g9_, self_.g1_ + other.g10_);
}

fn sphere_add_plane(self_: Sphere, other: Plane) -> Sphere {
    return Sphere(self_.g0_ + vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g1_ + vec2<f32>(0.0, other.g0_.w));
}

fn sphere_add_roundPoint(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0_, other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_add_scalar(self_: Sphere, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_add_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0_ + other.g0_, self_.g1_ + other.g1_);
}

fn antiScalar_div_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ / other.g0_);
}

fn circle_div_circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0_ / other.g0_, self_.g1_ / other.g1_, self_.g2_ / other.g2_);
}

fn dipole_div_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0_ / other.g0_, self_.g1_ / other.g1_, self_.g2_ / other.g2_);
}

fn dualNum_div_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0_ / other.g0_);
}

fn flatPoint_div_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ / other.g0_);
}

fn flector_div_flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0_ / other.g0_, self_.g1_ / other.g1_);
}

fn line_div_line(self_: Line, other: Line) -> Line {
    return Line(self_.g0_ / other.g0_, self_.g1_ / other.g1_);
}

fn motor_div_motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0_ / other.g0_, self_.g1_ / other.g1_);
}

fn multiVector_div_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ / other.g0_, self_.g1_ / other.g1_, self_.g2_ / other.g2_, self_.g3_ / other.g3_, self_.g4_ / other.g4_, self_.g5_ / other.g5_, self_.g6_ / other.g6_, self_.g7_ / other.g7_, self_.g8_ / other.g8_, self_.g9_ / other.g9_, self_.g10_ / other.g10_);
}

fn plane_div_plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0_ / other.g0_);
}

fn roundPoint_div_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_ / other.g0_, self_.g1_ / other.g1_);
}

fn scalar_div_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ / other.g0_);
}

fn sphere_div_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0_ / other.g0_, self_.g1_ / other.g1_);
}

fn circle_into_line(self_: Circle) -> Line {
    return Line(self_.g1_, self_.g2_);
}

fn dipole_into_flatPoint(self_: Dipole) -> FlatPoint {
    return FlatPoint(self_.g2_);
}

fn dualNum_into_antiScalar(self_: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0_.y);
}

fn dualNum_into_scalar(self_: DualNum) -> Scalar {
    return Scalar(self_.g0_.x);
}

fn flector_into_flatPoint(self_: Flector) -> FlatPoint {
    return FlatPoint(self_.g0_);
}

fn flector_into_plane(self_: Flector) -> Plane {
    return Plane(self_.g1_);
}

fn motor_into_antiScalar(self_: Motor) -> AntiScalar {
    return AntiScalar(self_.g0_.w);
}

fn motor_into_line(self_: Motor) -> Line {
    return Line(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_);
}

fn multiVector_into_antiScalar(self_: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_.y);
}

fn multiVector_into_circle(self_: MultiVector) -> Circle {
    return Circle(self_.g6_, self_.g7_, self_.g8_);
}

fn multiVector_into_dipole(self_: MultiVector) -> Dipole {
    return Dipole(self_.g3_, self_.g4_, self_.g5_);
}

fn multiVector_into_dualNum(self_: MultiVector) -> DualNum {
    return DualNum(self_.g0_);
}

fn multiVector_into_flatPoint(self_: MultiVector) -> FlatPoint {
    return FlatPoint(self_.g5_);
}

fn multiVector_into_flector(self_: MultiVector) -> Flector {
    return Flector(self_.g5_, vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g10_.y));
}

fn multiVector_into_line(self_: MultiVector) -> Line {
    return Line(self_.g7_, self_.g8_);
}

fn multiVector_into_motor(self_: MultiVector) -> Motor {
    return Motor(vec4<f32>(self_.g7_.x, self_.g7_.y, self_.g7_.z, self_.g0_.y), self_.g8_);
}

fn multiVector_into_plane(self_: MultiVector) -> Plane {
    return Plane(vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g10_.y));
}

fn multiVector_into_roundPoint(self_: MultiVector) -> RoundPoint {
    return RoundPoint(self_.g1_, self_.g2_);
}

fn multiVector_into_scalar(self_: MultiVector) -> Scalar {
    return Scalar(self_.g0_.x);
}

fn multiVector_into_sphere(self_: MultiVector) -> Sphere {
    return Sphere(self_.g9_, self_.g10_);
}

fn sphere_into_plane(self_: Sphere) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g1_.y));
}

fn antiScalar_mul_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn circle_mul_circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0_ * other.g0_, self_.g1_ * other.g1_, self_.g2_ * other.g2_);
}

fn dipole_mul_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0_ * other.g0_, self_.g1_ * other.g1_, self_.g2_ * other.g2_);
}

fn dualNum_mul_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0_ * other.g0_);
}

fn flatPoint_mul_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * other.g0_);
}

fn flector_mul_flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0_ * other.g0_, self_.g1_ * other.g1_);
}

fn line_mul_line(self_: Line, other: Line) -> Line {
    return Line(self_.g0_ * other.g0_, self_.g1_ * other.g1_);
}

fn motor_mul_motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0_ * other.g0_, self_.g1_ * other.g1_);
}

fn multiVector_mul_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ * other.g0_, self_.g1_ * other.g1_, self_.g2_ * other.g2_, self_.g3_ * other.g3_, self_.g4_ * other.g4_, self_.g5_ * other.g5_, self_.g6_ * other.g6_, self_.g7_ * other.g7_, self_.g8_ * other.g8_, self_.g9_ * other.g9_, self_.g10_ * other.g10_);
}

fn plane_mul_plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0_ * other.g0_);
}

fn roundPoint_mul_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_ * other.g0_, self_.g1_ * other.g1_);
}

fn scalar_mul_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn sphere_mul_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0_ * other.g0_, self_.g1_ * other.g1_);
}

fn antiScalar_sub_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ - other.g0_);
}

fn antiScalar_sub_circle(self_: AntiScalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_sub_dipole(self_: AntiScalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_sub_dualNum(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0_) - other.g0_);
}

fn antiScalar_sub_flatPoint(self_: AntiScalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_sub_flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn antiScalar_sub_line(self_: AntiScalar, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0_) - vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec3<f32>(0.0) - other.g1_);
}

fn antiScalar_sub_motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0_) - other.g0_, vec3<f32>(0.0) - other.g1_);
}

fn antiScalar_sub_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn antiScalar_sub_plane(self_: AntiScalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn antiScalar_sub_roundPoint(self_: AntiScalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_sub_scalar(self_: AntiScalar, other: Scalar) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0_) - vec2<f32>(other.g0_, 0.0));
}

fn antiScalar_sub_sphere(self_: AntiScalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn circle_sub_antiScalar(self_: Circle, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_sub_circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0_ - other.g0_, self_.g1_ - other.g1_, self_.g2_ - other.g2_);
}

fn circle_sub_dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_sub_dualNum(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_sub_flatPoint(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_sub_flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn circle_sub_line(self_: Circle, other: Line) -> Circle {
    return Circle(self_.g0_, self_.g1_ - other.g0_, self_.g2_ - other.g1_);
}

fn circle_sub_motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_ - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g2_ - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_sub_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, self_.g0_ - other.g6_, self_.g1_ - other.g7_, self_.g2_ - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn circle_sub_plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn circle_sub_roundPoint(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_sub_scalar(self_: Circle, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_sub_sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn dipole_sub_antiScalar(self_: Dipole, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_sub_circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_sub_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0_ - other.g0_, self_.g1_ - other.g1_, self_.g2_ - other.g2_);
}

fn dipole_sub_dualNum(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_sub_flatPoint(self_: Dipole, other: FlatPoint) -> Dipole {
    return Dipole(self_.g0_, self_.g1_, self_.g2_ - other.g0_);
}

fn dipole_sub_flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_ - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn dipole_sub_line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_sub_motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_sub_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, self_.g0_ - other.g3_, self_.g1_ - other.g4_, self_.g2_ - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn dipole_sub_plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn dipole_sub_roundPoint(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_sub_scalar(self_: Dipole, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_sub_sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_, self_.g1_, self_.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn dualNum_sub_antiScalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0_ - vec2<f32>(0.0, other.g0_));
}

fn dualNum_sub_circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_sub_dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_sub_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0_ - other.g0_);
}

fn dualNum_sub_flatPoint(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_sub_flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn dualNum_sub_line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_sub_motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_sub_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn dualNum_sub_plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn dualNum_sub_roundPoint(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_sub_scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0_ - vec2<f32>(other.g0_, 0.0));
}

fn dualNum_sub_sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn flatPoint_sub_antiScalar(self_: FlatPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_sub_circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_sub_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, self_.g0_ - other.g2_);
}

fn flatPoint_sub_dualNum(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_sub_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ - other.g0_);
}

fn flatPoint_sub_flector(self_: FlatPoint, other: Flector) -> Flector {
    return Flector(self_.g0_ - other.g0_, vec4<f32>(0.0) - other.g1_);
}

fn flatPoint_sub_line(self_: FlatPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_sub_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_sub_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, self_.g0_ - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn flatPoint_sub_plane(self_: FlatPoint, other: Plane) -> Flector {
    return Flector(self_.g0_, vec4<f32>(0.0) - other.g0_);
}

fn flatPoint_sub_roundPoint(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_sub_scalar(self_: FlatPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_sub_sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn flector_sub_antiScalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, self_.g0_ - other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_dualNum(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_flatPoint(self_: Flector, other: FlatPoint) -> Flector {
    return Flector(self_.g0_ - other.g0_, self_.g1_);
}

fn flector_sub_flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0_ - other.g0_, self_.g1_ - other.g1_);
}

fn flector_sub_line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, self_.g0_ - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) - other.g9_, vec2<f32>(0.0, self_.g1_.w) - other.g10_);
}

fn flector_sub_plane(self_: Flector, other: Plane) -> Flector {
    return Flector(self_.g0_, self_.g1_ - other.g0_);
}

fn flector_sub_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w));
}

fn flector_sub_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) - other.g0_, vec2<f32>(0.0, self_.g1_.w) - other.g1_);
}

fn line_sub_antiScalar(self_: Line, other: AntiScalar) -> Motor {
    return Motor(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0_), self_.g1_);
}

fn line_sub_circle(self_: Line, other: Circle) -> Circle {
    return Circle(vec4<f32>(0.0) - other.g0_, self_.g0_ - other.g1_, self_.g1_ - other.g2_);
}

fn line_sub_dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_sub_dualNum(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_sub_flatPoint(self_: Line, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_sub_flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn line_sub_line(self_: Line, other: Line) -> Line {
    return Line(self_.g0_ - other.g0_, self_.g1_ - other.g1_);
}

fn line_sub_motor(self_: Line, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, 0.0) - other.g0_, self_.g1_ - other.g1_);
}

fn line_sub_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, self_.g0_ - other.g7_, self_.g1_ - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn line_sub_plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn line_sub_roundPoint(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_sub_scalar(self_: Line, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_sub_sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn motor_sub_antiScalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0_ - vec4<f32>(0.0, 0.0, 0.0, other.g0_), self_.g1_);
}

fn motor_sub_circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) - other.g1_, self_.g1_ - other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_sub_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_sub_dualNum(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_sub_flatPoint(self_: Motor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_sub_flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn motor_sub_line(self_: Motor, other: Line) -> Motor {
    return Motor(self_.g0_ - vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), self_.g1_ - other.g1_);
}

fn motor_sub_motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0_ - other.g0_, self_.g1_ - other.g1_);
}

fn motor_sub_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) - other.g7_, self_.g1_ - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn motor_sub_plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn motor_sub_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_sub_scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_sub_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn multiVector_sub_antiScalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0_ - vec2<f32>(0.0, other.g0_), self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_sub_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_ - other.g0_, self_.g7_ - other.g1_, self_.g8_ - other.g2_, self_.g9_, self_.g10_);
}

fn multiVector_sub_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_ - other.g0_, self_.g4_ - other.g1_, self_.g5_ - other.g2_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_sub_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(self_.g0_ - other.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_sub_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_ - other.g0_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_sub_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_ - other.g0_, self_.g6_, self_.g7_, self_.g8_, self_.g9_ - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), self_.g10_ - vec2<f32>(0.0, other.g1_.w));
}

fn multiVector_sub_line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_ - other.g0_, self_.g8_ - other.g1_, self_.g9_, self_.g10_);
}

fn multiVector_sub_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ - vec2<f32>(0.0, other.g0_.w), self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_ - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g8_ - other.g1_, self_.g9_, self_.g10_);
}

fn multiVector_sub_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ - other.g0_, self_.g1_ - other.g1_, self_.g2_ - other.g2_, self_.g3_ - other.g3_, self_.g4_ - other.g4_, self_.g5_ - other.g5_, self_.g6_ - other.g6_, self_.g7_ - other.g7_, self_.g8_ - other.g8_, self_.g9_ - other.g9_, self_.g10_ - other.g10_);
}

fn multiVector_sub_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_ - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g10_ - vec2<f32>(0.0, other.g0_.w));
}

fn multiVector_sub_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_ - other.g0_, self_.g2_ - other.g1_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_sub_scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0_ - vec2<f32>(other.g0_, 0.0), self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn multiVector_sub_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_, self_.g4_, self_.g5_, self_.g6_, self_.g7_, self_.g8_, self_.g9_ - other.g0_, self_.g10_ - other.g1_);
}

fn plane_sub_antiScalar(self_: Plane, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_dualNum(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_flatPoint(self_: Plane, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0_, self_.g0_);
}

fn plane_sub_flector(self_: Plane, other: Flector) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0_, self_.g0_ - other.g1_);
}

fn plane_sub_line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) - other.g9_, vec2<f32>(0.0, self_.g0_.w) - other.g10_);
}

fn plane_sub_plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0_ - other.g0_);
}

fn plane_sub_roundPoint(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_scalar(self_: Plane, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn plane_sub_sphere(self_: Plane, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) - other.g0_, vec2<f32>(0.0, self_.g0_.w) - other.g1_);
}

fn roundPoint_sub_antiScalar(self_: RoundPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_dualNum(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_flatPoint(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn roundPoint_sub_line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, self_.g0_ - other.g1_, self_.g1_ - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn roundPoint_sub_plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn roundPoint_sub_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_ - other.g0_, self_.g1_ - other.g1_);
}

fn roundPoint_sub_scalar(self_: RoundPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_sub_sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_, self_.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn scalar_sub_antiScalar(self_: Scalar, other: AntiScalar) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_, 0.0) - vec2<f32>(0.0, other.g0_));
}

fn scalar_sub_circle(self_: Scalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_sub_dipole(self_: Scalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_sub_dualNum(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_, 0.0) - other.g0_);
}

fn scalar_sub_flatPoint(self_: Scalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_sub_flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1_.w));
}

fn scalar_sub_line(self_: Scalar, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_sub_motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0) - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_sub_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, vec3<f32>(0.0) - other.g9_, vec2<f32>(0.0) - other.g10_);
}

fn scalar_sub_plane(self_: Scalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w));
}

fn scalar_sub_roundPoint(self_: Scalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_sub_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ - other.g0_);
}

fn scalar_sub_sphere(self_: Scalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_);
}

fn sphere_sub_antiScalar(self_: Sphere, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_sub_circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec3<f32>(0.0) - other.g2_, self_.g0_, self_.g1_);
}

fn sphere_sub_dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec4<f32>(0.0) - other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_sub_dualNum(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_sub_flatPoint(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_sub_flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ - vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), self_.g1_ - vec2<f32>(0.0, other.g1_.w));
}

fn sphere_sub_line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, self_.g0_, self_.g1_);
}

fn sphere_sub_motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - other.g1_, self_.g0_, self_.g1_);
}

fn sphere_sub_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0_, vec3<f32>(0.0) - other.g1_, vec2<f32>(0.0) - other.g2_, vec3<f32>(0.0) - other.g3_, vec3<f32>(0.0) - other.g4_, vec4<f32>(0.0) - other.g5_, vec4<f32>(0.0) - other.g6_, vec3<f32>(0.0) - other.g7_, vec3<f32>(0.0) - other.g8_, self_.g0_ - other.g9_, self_.g1_ - other.g10_);
}

fn sphere_sub_plane(self_: Sphere, other: Plane) -> Sphere {
    return Sphere(self_.g0_ - vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g1_ - vec2<f32>(0.0, other.g0_.w));
}

fn sphere_sub_roundPoint(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0_, vec2<f32>(0.0) - other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_sub_scalar(self_: Sphere, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_, self_.g1_);
}

fn sphere_sub_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0_ - other.g0_, self_.g1_ - other.g1_);
}

fn antiScalar_antiWedgeDot_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn antiScalar_antiWedgeDot_circle(self_: AntiScalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec3<f32>(self_.g0_) * other.g2_);
}

fn antiScalar_antiWedgeDot_dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec4<f32>(self_.g0_) * other.g2_);
}

fn antiScalar_antiWedgeDot_dualNum(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_) * other.g0_);
}

fn antiScalar_antiWedgeDot_flatPoint(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_) * other.g0_);
}

fn antiScalar_antiWedgeDot_flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_) * other.g0_, vec4<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedgeDot_line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedgeDot_motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedgeDot_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec2<f32>(self_.g0_) * other.g2_, vec3<f32>(self_.g0_) * other.g3_, vec3<f32>(self_.g0_) * other.g4_, vec4<f32>(self_.g0_) * other.g5_, vec4<f32>(self_.g0_) * other.g6_, vec3<f32>(self_.g0_) * other.g7_, vec3<f32>(self_.g0_) * other.g8_, vec3<f32>(self_.g0_) * other.g9_, vec2<f32>(self_.g0_) * other.g10_);
}

fn antiScalar_antiWedgeDot_plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0_) * other.g0_);
}

fn antiScalar_antiWedgeDot_roundPoint(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedgeDot_scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn antiScalar_antiWedgeDot_sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn circle_antiWedgeDot_antiScalar(self_: Circle, other: AntiScalar) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec3<f32>(other.g0_));
}

fn circle_antiWedgeDot_circle(self_: Circle, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, other.g2_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, other.g2_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.w) * other.g2_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedgeDot_dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g2_.w, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g2_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, -other.g2_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g2_.w) - vec3<f32>(self_.g0_.w) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.y) + self_.g0_.wwwz * other.g2_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g2_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.z, other.g2_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g2_.w, other.g0_.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g1_ + self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn circle_antiWedgeDot_dualNum(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z, self_.g2_.x) * vec4<f32>(other.g0_.x, other.g0_.x, other.g0_.x, 0.0), self_.g0_ * vec4<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), self_.g2_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedgeDot_flatPoint(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g0_.wwwz * other.g0_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z, self_.g2_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn circle_antiWedgeDot_flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g0_.wwwz * other.g0_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.w, -other.g0_.z, other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, other.g1_.w, -other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z, self_.g0_.w) * vec2<f32>(other.g1_.z, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn circle_antiWedgeDot_line(self_: Circle, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedgeDot_motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedgeDot_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g5_.x, other.g8_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g5_.y, other.g8_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g5_.z, other.g8_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g5_.w, other.g6_.w) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g4_.x, other.g7_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g4_.y, other.g7_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g4_.z, other.g7_.z) - vec2<f32>(self_.g2_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g2_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g2_.z) * vec2<f32>(other.g3_.z, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g8_.z, -other.g2_.y, other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, -other.g2_.y) + vec3<f32>(self_.g0_.w) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g6_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) - vec3<f32>(self_.g0_.w) * other.g3_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g0_.w) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g5_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g5_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g5_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g5_.x, other.g5_.y, other.g5_.z, -other.g0_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g10_.y, -other.g5_.z, other.g5_.y, -other.g9_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g5_.z, other.g10_.y, -other.g5_.x, -other.g9_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g5_.y, other.g5_.x, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g5_.w, -other.g9_.z, other.g9_.y, other.g3_.x) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.x, -other.g4_.z, other.g4_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g9_.z, other.g5_.w, -other.g9_.x, other.g3_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g4_.z, other.g0_.x, -other.g4_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, other.g5_.w, other.g3_.z) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g4_.y, other.g4_.x, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g6_.w, -other.g7_.z, other.g7_.y, other.g8_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g7_.z, other.g6_.w, -other.g7_.x, other.g8_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, other.g6_.w, other.g8_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g6_.x, -other.g6_.y, -other.g6_.z, other.g0_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g2_.x, -other.g6_.z, other.g6_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g6_.z, other.g2_.x, -other.g6_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, other.g2_.x, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec3<f32>(self_.g0_.w) * other.g8_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g0_.w) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g9_.z, other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g9_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g9_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g9_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g9_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g9_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g9_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g4_.z));
}

fn circle_antiWedgeDot_plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z, self_.g0_.w) * vec2<f32>(other.g0_.z, other.g0_.w) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn circle_antiWedgeDot_roundPoint(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g2_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g0_.w) * other.g0_ + self_.g2_ * vec3<f32>(other.g1_.x), self_.g1_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedgeDot_scalar(self_: Circle, other: Scalar) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_) + vec4<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z, self_.g2_.x) * vec4<f32>(other.g0_, other.g0_, other.g0_, 0.0));
}

fn circle_antiWedgeDot_sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g0_.w) * other.g0_ + self_.g2_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - self_.g2_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn dipole_antiWedgeDot_antiScalar(self_: Dipole, other: AntiScalar) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec4<f32>(other.g0_));
}

fn dipole_antiWedgeDot_circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g2_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z) + vec4<f32>(self_.g2_.w) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn dipole_antiWedgeDot_dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, -other.g2_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g2_.w, other.g1_.z, -other.g1_.y, -other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, other.g2_.w, other.g1_.x, -other.g2_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g2_.w, -other.g2_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g2_.wwwz * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_antiWedgeDot_dualNum(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), self_.g2_ * vec4<f32>(other.g0_.y), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g0_.x, -other.g0_.x, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.x), vec3<f32>(0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g0_.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_antiWedgeDot_flatPoint(self_: Dipole, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_antiWedgeDot_flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, other.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, -other.g1_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, -other.g1_.w) - vec3<f32>(self_.g2_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, -other.g1_.w, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, -other.g1_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_antiWedgeDot_line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn dipole_antiWedgeDot_motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, other.g0_.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn dipole_antiWedgeDot_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g8_.x, other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g8_.y, other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g8_.z, other.g5_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g7_.x, other.g4_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g7_.y, other.g4_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g7_.z, other.g4_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g6_.x, other.g3_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g6_.y, other.g3_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(-other.g6_.z, other.g3_.z) - vec2<f32>(self_.g2_.w) * vec2<f32>(other.g6_.w, other.g5_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g9_.z, other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g2_.w) * other.g4_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(other.g4_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g4_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g4_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, other.g5_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, other.g5_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g4_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g4_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g4_.z) + vec2<f32>(self_.g2_.w) * other.g10_ * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, other.g0_.y, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g6_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) - vec3<f32>(self_.g2_.w) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g2_.y, -other.g8_.z, other.g8_.y, other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g8_.z, other.g2_.y, -other.g8_.x, other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g8_.y, other.g8_.x, other.g2_.y, other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.y, other.g1_.z, -other.g1_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g1_.z, other.g0_.y, other.g1_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g2_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g0_.y), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g5_.w, -other.g9_.z, other.g9_.y, -other.g5_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g9_.z, other.g5_.w, -other.g9_.x, -other.g5_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, other.g5_.w, -other.g5_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y, -other.g9_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x, -other.g9_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x, -other.g9_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z) + vec4<f32>(self_.g2_.w) * vec4<f32>(-other.g3_.x, -other.g3_.y, -other.g3_.z, other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g5_.z, -other.g10_.y, other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, -other.g10_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) - vec3<f32>(self_.g2_.w) * other.g9_, vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g5_.z, -other.g10_.y, other.g5_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, -other.g10_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, -other.g6_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g6_.z, -other.g2_.x, other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, -other.g2_.x) + vec3<f32>(self_.g2_.w) * other.g7_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.w) * other.g2_ * vec2<f32>(1.0, -1.0));
}

fn dipole_antiWedgeDot_plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g2_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_antiWedgeDot_roundPoint(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g1_.x), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g2_.w) * other.g0_, vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * other.g1_ * vec2<f32>(1.0, -1.0));
}

fn dipole_antiWedgeDot_scalar(self_: Dipole, other: Scalar) -> Circle {
    return Circle(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g0_, -other.g0_, -other.g0_, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_), vec3<f32>(0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g0_));
}

fn dipole_antiWedgeDot_sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, -other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, -other.g1_.x, -other.g0_.z), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g2_.w) * other.g0_, vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_antiWedgeDot_antiScalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(other.g0_));
}

fn dualNum_antiWedgeDot_circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, -other.g0_.w), vec4<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(self_.g0_.y) * other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_antiWedgeDot_dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec4<f32>(self_.g0_.y) * other.g2_, vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g2_.w), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_antiWedgeDot_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_.x) * other.g0_.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0_.y) * other.g0_);
}

fn dualNum_antiWedgeDot_flatPoint(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0_.y) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_antiWedgeDot_flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0_.y) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.w));
}

fn dualNum_antiWedgeDot_line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_antiWedgeDot_motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_antiWedgeDot_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.x) * other.g9_ + vec3<f32>(self_.g0_.y) * other.g1_, vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * other.g10_ + vec2<f32>(self_.g0_.y) * other.g2_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g0_.y) * other.g3_, vec3<f32>(self_.g0_.x) * other.g7_ + vec3<f32>(self_.g0_.y) * other.g4_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g8_.x, other.g8_.y, other.g8_.z, -other.g6_.w) + vec4<f32>(self_.g0_.y) * other.g5_, vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g3_.x, -other.g3_.y, -other.g3_.z, other.g5_.w) + vec4<f32>(self_.g0_.y) * other.g6_, vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g4_ + vec3<f32>(self_.g0_.y) * other.g7_, vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g0_.y) * other.g8_, vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g0_.y) * other.g9_, vec2<f32>(self_.g0_.x) * other.g2_ + vec2<f32>(self_.g0_.y) * other.g10_);
}

fn dualNum_antiWedgeDot_plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.w));
}

fn dualNum_antiWedgeDot_roundPoint(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(self_.g0_.y) * other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(self_.g0_.x) * other.g1_);
}

fn dualNum_antiWedgeDot_scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0_.yx * vec2<f32>(other.g0_));
}

fn dualNum_antiWedgeDot_sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(self_.g0_.y) * other.g1_);
}

fn flatPoint_antiWedgeDot_antiScalar(self_: FlatPoint, other: AntiScalar) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(other.g0_));
}

fn flatPoint_antiWedgeDot_circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn flatPoint_antiWedgeDot_dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g2_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g0_.wwwz * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_antiWedgeDot_dualNum(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.y), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_antiWedgeDot_flatPoint(self_: FlatPoint, other: FlatPoint) -> Motor {
    return Motor(vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z));
}

fn flatPoint_antiWedgeDot_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_antiWedgeDot_line(self_: FlatPoint, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g0_.wwwz * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g0_.z));
}

fn flatPoint_antiWedgeDot_motor(self_: FlatPoint, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, other.g0_.w), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g0_.wwwz * other.g0_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn flatPoint_antiWedgeDot_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g6_.x, other.g3_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g6_.y, other.g3_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g6_.z, other.g3_.z) - vec2<f32>(self_.g0_.w) * vec2<f32>(other.g6_.w, other.g5_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g4_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g4_.z) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.y, other.g1_.z, -other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, other.g0_.y, other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g0_.y), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g3_.x, -other.g3_.y, -other.g3_.z, other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) - vec3<f32>(self_.g0_.w) * other.g9_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g6_.z, -other.g2_.x, other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, -other.g2_.x) + vec3<f32>(self_.g0_.w) * other.g7_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * other.g2_ * vec2<f32>(1.0, -1.0));
}

fn flatPoint_antiWedgeDot_plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_antiWedgeDot_roundPoint(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g0_.w) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(1.0, -1.0));
}

fn flatPoint_antiWedgeDot_scalar(self_: FlatPoint, other: Scalar) -> Circle {
    return Circle(vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_));
}

fn flatPoint_antiWedgeDot_sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedgeDot_antiScalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec4<f32>(other.g0_));
}

fn flector_antiWedgeDot_circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn flector_antiWedgeDot_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g2_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g1_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g2_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g0_.wwwz * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g2_.w) - vec3<f32>(self_.g1_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - vec3<f32>(self_.g1_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedgeDot_dualNum(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.x), vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.x), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.y), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.y), vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.y));
}

fn flector_antiWedgeDot_flatPoint(self_: Flector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedgeDot_flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedgeDot_line(self_: Flector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g0_.wwwz * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z));
}

fn flector_antiWedgeDot_motor(self_: Flector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, other.g0_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g0_.wwwz * other.g0_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, other.g1_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w));
}

fn flector_antiWedgeDot_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g6_.x, other.g3_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g6_.y, other.g3_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g6_.z, other.g3_.z) - vec2<f32>(self_.g0_.w) * vec2<f32>(other.g6_.w, other.g5_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.x, other.g9_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.y, other.g9_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g1_.z, other.g9_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(other.g2_.x, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) - vec3<f32>(self_.g1_.w) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g4_.z) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g5_.w) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.x), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, -other.g6_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g1_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.y, other.g1_.z, -other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, other.g0_.y, other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g0_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g2_.y, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g8_.z, -other.g2_.y, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, -other.g2_.y, -other.g7_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, -other.g2_.x) + vec4<f32>(self_.g1_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g3_.x, -other.g3_.y, -other.g3_.z, other.g0_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x, -other.g4_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) - vec3<f32>(self_.g0_.w) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) - vec3<f32>(self_.g1_.w) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g1_.w) * other.g9_ - vec3<f32>(self_.g1_.w) * other.g4_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g6_.z, -other.g2_.x, other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, -other.g2_.x) + vec3<f32>(self_.g0_.w) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * other.g2_ * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g6_.x, other.g8_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g6_.y, other.g8_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g6_.z, other.g8_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g6_.w) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.y));
}

fn flector_antiWedgeDot_plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedgeDot_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g1_.w) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g0_.w) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + self_.g1_.xyzx * vec4<f32>(-other.g1_.y, -other.g1_.y, -other.g1_.y, 0.0) - vec4<f32>(self_.g1_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(1.0, -1.0));
}

fn flector_antiWedgeDot_scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_), vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedgeDot_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g1_.x), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1_ * vec4<f32>(other.g1_.x), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g0_.w) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g1_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedgeDot_antiScalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn line_antiWedgeDot_circle(self_: Line, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedgeDot_dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g2_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, other.g2_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g2_.w, other.g0_.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn line_antiWedgeDot_dualNum(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.x, other.g0_.x, 0.0), vec4<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedgeDot_flatPoint(self_: Line, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z));
}

fn line_antiWedgeDot_flector(self_: Line, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.w, -other.g0_.z, other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, other.g1_.w, -other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z));
}

fn line_antiWedgeDot_line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedgeDot_motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedgeDot_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g4_.x, other.g7_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g4_.y, other.g7_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g4_.z, other.g7_.z) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g6_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.y, -other.g5_.z, other.g5_.y, -other.g9_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g5_.z, other.g10_.y, -other.g5_.x, -other.g9_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g5_.y, other.g5_.x, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g5_.w, -other.g9_.z, other.g9_.y, other.g3_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, -other.g4_.z, other.g4_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g9_.z, other.g5_.w, -other.g9_.x, other.g3_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g4_.z, other.g0_.x, -other.g4_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, other.g5_.w, other.g3_.z) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g4_.y, other.g4_.x, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g2_.x, -other.g6_.z, other.g6_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g6_.z, other.g2_.x, -other.g6_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, other.g2_.x, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g9_.z, other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, other.g5_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g9_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g9_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g9_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g4_.z));
}

fn line_antiWedgeDot_plane(self_: Line, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z));
}

fn line_antiWedgeDot_roundPoint(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z), self_.g1_ * vec3<f32>(other.g1_.x), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedgeDot_scalar(self_: Line, other: Scalar) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g0_, other.g0_, other.g0_, 0.0));
}

fn line_antiWedgeDot_sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g1_.x), self_.g1_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn motor_antiWedgeDot_antiScalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn motor_antiWedgeDot_circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * other.g0_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g2_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedgeDot_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * other.g2_ + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g2_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, other.g2_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g2_.w, other.g0_.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn motor_antiWedgeDot_dualNum(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.x, other.g0_.x, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedgeDot_flatPoint(self_: Motor, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * other.g0_ + vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z));
}

fn motor_antiWedgeDot_flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.w, -other.g0_.z, other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, other.g1_.w, -other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g0_.w) * other.g0_ + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g0_.w) * other.g1_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z));
}

fn motor_antiWedgeDot_line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedgeDot_motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedgeDot_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g4_.x, other.g7_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g4_.y, other.g7_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g4_.z, other.g7_.z) + vec2<f32>(self_.g0_.w) * other.g0_ - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g6_.w) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g0_.w) * other.g2_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) + vec3<f32>(self_.g0_.w) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.y, -other.g5_.z, other.g5_.y, -other.g9_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g5_.z, other.g10_.y, -other.g5_.x, -other.g9_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g5_.y, other.g5_.x, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g0_.w) * other.g5_ + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g5_.w, -other.g9_.z, other.g9_.y, other.g3_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, -other.g4_.z, other.g4_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g9_.z, other.g5_.w, -other.g9_.x, other.g3_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g4_.z, other.g0_.x, -other.g4_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, other.g5_.w, other.g3_.z) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g4_.y, other.g4_.x, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g2_.x, -other.g6_.z, other.g6_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g6_.z, other.g2_.x, -other.g6_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, other.g2_.x, -other.g1_.z) + vec4<f32>(self_.g0_.w) * other.g6_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g0_.w) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g0_.w) * other.g8_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g9_.z, other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, other.g5_.w) + vec3<f32>(self_.g0_.w) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g0_.w) * other.g10_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g9_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g9_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g9_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g4_.z));
}

fn motor_antiWedgeDot_plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * other.g0_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z));
}

fn motor_antiWedgeDot_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_ + self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.w) * other.g1_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z), self_.g1_ * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedgeDot_scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g0_, other.g0_, other.g0_, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedgeDot_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), self_.g1_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_ - self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.w) * other.g1_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn multiVector_antiWedgeDot_antiScalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec2<f32>(other.g0_), self_.g3_ * vec3<f32>(other.g0_), self_.g4_ * vec3<f32>(other.g0_), self_.g5_ * vec4<f32>(other.g0_), self_.g6_ * vec4<f32>(other.g0_), self_.g7_ * vec3<f32>(other.g0_), self_.g8_ * vec3<f32>(other.g0_), self_.g9_ * vec3<f32>(other.g0_), self_.g10_ * vec2<f32>(other.g0_));
}

fn multiVector_antiWedgeDot_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g5_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g5_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.w) * vec2<f32>(-other.g0_.w, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g2_.x) * other.g2_ + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g1_ + self_.g7_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g2_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - self_.g9_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g2_ + vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, -other.g0_.w) + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g4_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g4_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g5_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z) + vec4<f32>(self_.g5_.w) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(self_.g0_.y) * other.g0_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, other.g2_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, other.g2_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, other.g2_.z) + vec4<f32>(self_.g6_.w) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g8_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g8_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z), vec3<f32>(self_.g0_.y) * other.g1_ + self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * other.g2_ + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.y) * other.g2_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g2_.y) * other.g1_ + vec3<f32>(self_.g6_.w) * other.g2_ + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - self_.g4_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g2_ - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(-other.g0_.x, other.g2_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(-other.g0_.y, other.g2_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(-other.g0_.z, other.g2_.z) + self_.g10_ * vec2<f32>(other.g0_.w));
}

fn multiVector_antiWedgeDot_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, other.g2_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, other.g2_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, other.g2_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, -other.g2_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g2_.w, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g7_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g7_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g8_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g8_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + self_.g4_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g10_.y) * other.g0_, vec2<f32>(self_.g3_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(other.g0_.x, other.g2_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(other.g0_.y, other.g2_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g10_ * vec2<f32>(other.g2_.w), vec3<f32>(self_.g0_.y) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(-other.g2_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g1_.z, -other.g2_.w, -other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g2_.w) - vec3<f32>(self_.g6_.w) * other.g0_ + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.y) * other.g1_ - self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g2_.y) * other.g0_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.y) * other.g2_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, other.g1_.z) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.y) + self_.g6_.wwwz * other.g2_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g8_.x) * vec4<f32>(other.g2_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g1_.z, other.g2_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g2_.w, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g2_.w) + vec4<f32>(self_.g3_.x) * vec4<f32>(other.g2_.w, other.g1_.z, -other.g1_.y, -other.g2_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(-other.g1_.z, other.g2_.w, other.g1_.x, -other.g2_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g2_.w, -other.g2_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g5_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g5_.wwwz * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g0_.z) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g9_ * vec3<f32>(other.g2_.w) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g10_.y) * other.g0_, vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - vec3<f32>(self_.g10_.y) * other.g1_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g2_.y) * other.g0_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - vec3<f32>(self_.g6_.w) * other.g1_ + self_.g7_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g2_ * vec2<f32>(-other.g2_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn multiVector_antiWedgeDot_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0_.y) * other.g0_, self_.g1_ * vec3<f32>(other.g0_.y) + self_.g9_ * vec3<f32>(other.g0_.x), self_.g2_ * vec2<f32>(other.g0_.y) - self_.g10_ * vec2<f32>(other.g0_.x), self_.g3_ * vec3<f32>(other.g0_.y) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.x), self_.g4_ * vec3<f32>(other.g0_.y) + self_.g7_ * vec3<f32>(other.g0_.x), self_.g5_ * vec4<f32>(other.g0_.y) + vec4<f32>(self_.g6_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g8_.x, self_.g8_.y, self_.g8_.z, self_.g8_.x) * vec4<f32>(other.g0_.x, other.g0_.x, other.g0_.x, 0.0), vec4<f32>(self_.g3_.x, self_.g3_.y, self_.g3_.z, self_.g3_.x) * vec4<f32>(-other.g0_.x, -other.g0_.x, -other.g0_.x, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + self_.g6_ * vec4<f32>(other.g0_.y), vec3<f32>(0.0) - self_.g4_ * vec3<f32>(other.g0_.x) + self_.g7_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g0_.x) + self_.g8_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.x) + self_.g9_ * vec3<f32>(other.g0_.y), self_.g2_ * vec2<f32>(other.g0_.x) + self_.g10_ * vec2<f32>(other.g0_.y));
}

fn multiVector_antiWedgeDot_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, -other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g4_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g10_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.w), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.y) * other.g0_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g6_.wwwz * other.g0_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g8_.x, self_.g8_.y, self_.g8_.z, self_.g8_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w) + vec4<f32>(self_.g3_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g9_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g7_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g2_ * vec2<f32>(-other.g0_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn multiVector_antiWedgeDot_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g1_.w, 0.0) + vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, -other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g0_.w, 0.0) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(0.0, -other.g1_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g10_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g2_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w), vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec4<f32>(self_.g0_.y) * other.g0_ + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, other.g1_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g1_.w, 0.0) + vec4<f32>(self_.g2_.y, self_.g2_.y, self_.g2_.y, self_.g2_.x) * other.g1_ + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g6_.wwwz * other.g0_.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g1_.w, -other.g0_.z, other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g0_.z, other.g1_.w, -other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w) + vec4<f32>(self_.g3_.x) * vec4<f32>(other.g0_.w, -other.g1_.z, other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g1_.z, other.g0_.w, -other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z) + vec4<f32>(self_.g10_.x) * other.g1_, vec3<f32>(self_.g3_.x) * vec3<f32>(-other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g0_.z, -other.g1_.w, other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, -other.g1_.w) - vec3<f32>(self_.g5_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g4_.x) * vec3<f32>(-other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, -other.g1_.w, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, -other.g1_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g2_ * vec2<f32>(-other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z, self_.g6_.w) * vec2<f32>(other.g1_.z, other.g1_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn multiVector_antiWedgeDot_line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g0_, vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g0_ + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0) + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g4_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g4_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z), vec3<f32>(self_.g0_.y) * other.g0_ + vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.y) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.y) * other.g0_ + vec3<f32>(self_.g6_.w) * other.g1_ + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g5_.w) * other.g0_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g1_, vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn multiVector_antiWedgeDot_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w) - vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + self_.g2_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0) + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g4_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g4_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g5_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, other.g0_.w) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, other.g1_.z) + vec4<f32>(self_.g6_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(self_.g0_.y) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.w) * other.g1_ + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g1_, vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g1_.z) + self_.g10_ * vec2<f32>(other.g0_.w));
}

fn multiVector_antiWedgeDot_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0_.y) * other.g0_ + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g9_.x, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g9_.y, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g9_.z, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g10_.y, other.g2_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(other.g10_.x, other.g2_.x) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g8_.x, other.g5_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g8_.y, other.g5_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g8_.z, other.g5_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g7_.x, other.g4_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g7_.y, other.g4_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g7_.z, other.g4_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(-other.g6_.x, other.g3_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(-other.g6_.y, other.g3_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(-other.g6_.z, other.g3_.z) - vec2<f32>(self_.g5_.w) * vec2<f32>(other.g6_.w, other.g5_.w) - vec2<f32>(self_.g6_.x) * vec2<f32>(other.g5_.x, other.g8_.x) - vec2<f32>(self_.g6_.y) * vec2<f32>(other.g5_.y, other.g8_.y) - vec2<f32>(self_.g6_.z) * vec2<f32>(other.g5_.z, other.g8_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g5_.w, other.g6_.w) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g4_.x, other.g7_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g4_.y, other.g7_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g4_.z, other.g7_.z) - vec2<f32>(self_.g8_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g8_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g8_.z) * vec2<f32>(other.g3_.z, other.g6_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g1_.x, other.g9_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g1_.y, other.g9_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g1_.z, other.g9_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g2_.y, -other.g10_.y) + vec2<f32>(self_.g10_.y) * vec2<f32>(other.g2_.x, -other.g10_.x), vec3<f32>(self_.g0_.x) * other.g9_ + vec3<f32>(self_.g0_.y) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) - vec3<f32>(self_.g2_.x) * other.g8_ + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g9_.z, other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, other.g5_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g5_.w) * other.g4_ + vec3<f32>(self_.g6_.x) * vec3<f32>(-other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g8_.z, -other.g2_.y, other.g8_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, -other.g2_.y) + vec3<f32>(self_.g6_.w) * other.g7_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g6_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g10_.y) * other.g3_, vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * other.g10_ + vec2<f32>(self_.g0_.y) * other.g2_ + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g2_ * vec2<f32>(other.g6_.w) + self_.g2_ * vec2<f32>(other.g0_.y) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g3_.x) * vec2<f32>(other.g4_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(other.g4_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(other.g4_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(other.g3_.x, other.g5_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(other.g3_.y, other.g5_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g4_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g4_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g4_.z) + vec2<f32>(self_.g5_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g10_ * vec2<f32>(other.g5_.w) - self_.g10_ * vec2<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g0_.y) * other.g3_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) - vec3<f32>(self_.g2_.x) * other.g9_ + vec3<f32>(self_.g2_.x) * other.g4_ + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g0_.y, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g7_.z, other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g1_.z, other.g0_.y, -other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g6_.w) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) - vec3<f32>(self_.g6_.w) * other.g3_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) + vec3<f32>(self_.g10_.x) * other.g7_ + vec3<f32>(self_.g10_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g7_ + vec3<f32>(self_.g0_.y) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g2_.y) * other.g3_ + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) - vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g6_.w) * other.g9_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) + vec3<f32>(self_.g8_.x) * vec3<f32>(other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g3_.z, other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, other.g10_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(-other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g1_.z, -other.g6_.w, other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g10_.x) * other.g8_ + vec3<f32>(self_.g10_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g8_.x, other.g8_.y, other.g8_.z, -other.g6_.w) + vec4<f32>(self_.g0_.y) * other.g5_ + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g10_.y, -other.g5_.z, other.g5_.y, other.g4_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g5_.z, other.g10_.y, -other.g5_.x, other.g4_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g5_.y, other.g5_.x, other.g10_.y, other.g4_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g10_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, -other.g10_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0) + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(other.g2_.y, -other.g8_.z, other.g8_.y, other.g1_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(other.g8_.z, other.g2_.y, -other.g8_.x, other.g1_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(-other.g8_.y, other.g8_.x, other.g2_.y, other.g1_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g5_.x) * vec4<f32>(other.g0_.y, other.g1_.z, -other.g1_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g5_.y) * vec4<f32>(-other.g1_.z, other.g0_.y, other.g1_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g5_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g0_.y) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g5_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g5_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g5_.z) + vec4<f32>(self_.g6_.w) * vec4<f32>(other.g5_.x, other.g5_.y, other.g5_.z, -other.g0_.x) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g10_.y, -other.g5_.z, other.g5_.y, -other.g9_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g5_.z, other.g10_.y, -other.g5_.x, -other.g9_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g5_.y, other.g5_.x, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(other.g5_.w, -other.g9_.z, other.g9_.y, other.g3_.x) + vec4<f32>(self_.g8_.x) * vec4<f32>(other.g0_.x, -other.g4_.z, other.g4_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g9_.z, other.g5_.w, -other.g9_.x, other.g3_.y) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g4_.z, other.g0_.x, -other.g4_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, other.g5_.w, other.g3_.z) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g4_.y, other.g4_.x, other.g0_.x, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(-other.g2_.y, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g8_.z, -other.g2_.y, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, -other.g2_.y, -other.g7_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, -other.g2_.x) + vec4<f32>(self_.g10_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g3_.x, -other.g3_.y, -other.g3_.z, other.g5_.w) + vec4<f32>(self_.g0_.y) * other.g6_ + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g2_.x, other.g6_.z, -other.g6_.y, -other.g7_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g6_.z, -other.g2_.x, other.g6_.x, -other.g7_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g6_.y, -other.g6_.x, -other.g2_.x, -other.g7_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, -other.g2_.y) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.x) + vec4<f32>(self_.g3_.x) * vec4<f32>(other.g5_.w, -other.g9_.z, other.g9_.y, -other.g5_.x) + vec4<f32>(self_.g3_.x) * vec4<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g9_.z, other.g5_.w, -other.g9_.x, -other.g5_.y) + vec4<f32>(self_.g3_.y) * vec4<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, other.g5_.w, -other.g5_.z) + vec4<f32>(self_.g3_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x, 0.0) + vec4<f32>(self_.g4_.x) * vec4<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y, -other.g9_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x, -other.g9_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x, -other.g9_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g5_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g5_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z) + vec4<f32>(self_.g5_.w) * vec4<f32>(-other.g3_.x, -other.g3_.y, -other.g3_.z, other.g0_.x) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g6_.w, -other.g7_.z, other.g7_.y, other.g8_.x) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g6_.y) * vec4<f32>(other.g7_.z, other.g6_.w, -other.g7_.x, other.g8_.y) + vec4<f32>(self_.g6_.y) * vec4<f32>(other.g1_.z, other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g6_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, other.g6_.w, other.g8_.z) + vec4<f32>(self_.g6_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g6_.w) * vec4<f32>(-other.g6_.x, -other.g6_.y, -other.g6_.z, other.g0_.y) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g2_.x, -other.g6_.z, other.g6_.y, -other.g1_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g6_.z, other.g2_.x, -other.g6_.x, -other.g1_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, other.g2_.x, -other.g1_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.x) + vec4<f32>(self_.g8_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.y) + vec4<f32>(self_.g8_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6_.z) + vec4<f32>(self_.g9_.x) * vec4<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x, -other.g4_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, other.g10_.y) + vec4<f32>(self_.g10_.x) * vec4<f32>(-other.g4_.x, -other.g4_.y, -other.g4_.z, 0.0) + vec4<f32>(self_.g10_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g4_ + vec3<f32>(self_.g0_.y) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g6_.w) + vec3<f32>(self_.g2_.x) * other.g8_ + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(-other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g5_.z, -other.g10_.y, other.g5_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, -other.g10_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) - vec3<f32>(self_.g5_.w) * other.g9_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g6_.w) * other.g1_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g10_.y) * other.g3_, vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g0_.y) * other.g8_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g2_.y) * other.g7_ - vec3<f32>(self_.g2_.y) * other.g1_ + vec3<f32>(self_.g4_.x) * vec3<f32>(-other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g5_.z, -other.g10_.y, other.g5_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, -other.g10_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g6_.w) * other.g8_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g10_.y) * other.g9_ - vec3<f32>(self_.g10_.y) * other.g4_, vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g0_.y) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g2_.y) * other.g3_ + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(-other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, -other.g6_.w, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g6_.z, -other.g2_.x, other.g6_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, -other.g2_.x) + vec3<f32>(self_.g5_.w) * other.g7_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g6_.w) * other.g4_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g9_.z, other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, other.g5_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g10_.x) * other.g8_ - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * other.g2_ + vec2<f32>(self_.g0_.y) * other.g10_ + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g2_ * vec2<f32>(-other.g5_.w) + self_.g2_ * vec2<f32>(other.g0_.x) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g5_.w) * other.g2_ * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g9_.x, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g9_.y, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g9_.z, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g9_.x) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g9_.y) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g9_.z) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(-other.g6_.x, other.g8_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(-other.g6_.y, other.g8_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(-other.g6_.z, other.g8_.z) + self_.g10_ * vec2<f32>(other.g6_.w) + self_.g10_ * vec2<f32>(other.g0_.y));
}

fn multiVector_antiWedgeDot_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g0_.w, 0.0) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + self_.g3_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0) + vec4<f32>(self_.g2_.y, self_.g2_.y, self_.g2_.y, self_.g2_.x) * other.g0_ + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z) + vec4<f32>(self_.g10_.x) * other.g0_, vec3<f32>(0.0) - self_.g3_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g5_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0) - self_.g4_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g9_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z, self_.g6_.w) * vec2<f32>(other.g0_.z, other.g0_.w) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn multiVector_antiWedgeDot_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g10_.y) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(self_.g0_.y) * other.g0_ - vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g8_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.y) * other.g1_ + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g4_ * vec3<f32>(other.g1_.x) + self_.g9_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g10_.x) * other.g0_, self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g5_.w) * other.g0_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g4_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, other.g0_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, other.g0_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g9_.x) * vec4<f32>(-other.g1_.y, -other.g1_.y, -other.g1_.y, 0.0) + vec4<f32>(self_.g10_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) - vec4<f32>(self_.g10_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g1_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.x) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g6_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g6_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g6_.w) * other.g0_ + self_.g8_ * vec3<f32>(other.g1_.x), self_.g1_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g2_.y) * other.g0_ + self_.g7_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x) * other.g0_ + self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * other.g1_ + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * other.g1_ * vec2<f32>(1.0, -1.0));
}

fn multiVector_antiWedgeDot_scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0_.yx * vec2<f32>(other.g0_), self_.g9_ * vec3<f32>(other.g0_), vec2<f32>(0.0) - self_.g10_ * vec2<f32>(other.g0_), vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_), self_.g7_ * vec3<f32>(other.g0_), vec4<f32>(self_.g6_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_) + vec4<f32>(self_.g8_.x, self_.g8_.y, self_.g8_.z, self_.g8_.x) * vec4<f32>(other.g0_, other.g0_, other.g0_, 0.0), vec4<f32>(self_.g3_.x, self_.g3_.y, self_.g3_.z, self_.g3_.x) * vec4<f32>(-other.g0_, -other.g0_, -other.g0_, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_), vec3<f32>(0.0) - self_.g4_ * vec3<f32>(other.g0_), vec3<f32>(0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g0_), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec2<f32>(other.g0_));
}

fn multiVector_antiWedgeDot_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g10_.y) * vec2<f32>(0.0, -other.g1_.x), vec3<f32>(self_.g0_.x) * other.g0_ + self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * other.g1_ + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g2_.x) * other.g0_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g7_ * vec3<f32>(other.g1_.x), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g6_.w) * other.g0_ + self_.g8_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g1_.x) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g4_.x) * vec4<f32>(-other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, -other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, -other.g1_.x, -other.g0_.z) + vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g9_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.y) + vec4<f32>(self_.g10_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x), vec3<f32>(0.0) - self_.g3_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g5_.w) * other.g0_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0) - self_.g4_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g9_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g10_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g0_ + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - self_.g8_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.y) * other.g1_ + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn plane_antiWedgeDot_antiScalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(other.g0_));
}

fn plane_antiWedgeDot_circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, other.g2_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn plane_antiWedgeDot_dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g2_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g2_.w) - vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_antiWedgeDot_dualNum(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.x), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.y));
}

fn plane_antiWedgeDot_flatPoint(self_: Plane, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_antiWedgeDot_flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_antiWedgeDot_line(self_: Plane, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z));
}

fn plane_antiWedgeDot_motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, other.g0_.w, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g0_.w, other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w));
}

fn plane_antiWedgeDot_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, other.g9_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, other.g9_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, other.g9_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g2_.x, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) - vec3<f32>(self_.g0_.w) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g5_.w) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g6_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.y, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g8_.z, -other.g2_.y, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, -other.g2_.y, -other.g7_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, -other.g2_.x) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x, -other.g4_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) - vec3<f32>(self_.g0_.w) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g0_.w) * other.g9_ - vec3<f32>(self_.g0_.w) * other.g4_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g6_.x, other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g6_.y, other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g6_.z, other.g8_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g6_.w) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.y));
}

fn plane_antiWedgeDot_plane(self_: Plane, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, other.g0_.z), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z));
}

fn plane_antiWedgeDot_roundPoint(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_.xyzx * vec4<f32>(-other.g1_.y, -other.g1_.y, -other.g1_.y, 0.0) - vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_antiWedgeDot_scalar(self_: Plane, other: Scalar) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_));
}

fn plane_antiWedgeDot_sphere(self_: Plane, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g1_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g0_ * vec4<f32>(other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_antiWedgeDot_antiScalar(self_: RoundPoint, other: AntiScalar) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn roundPoint_antiWedgeDot_circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g1_.x) * other.g2_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * other.g2_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_antiWedgeDot_dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.y) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, other.g1_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g1_.y) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(-other.g2_.w));
}

fn roundPoint_antiWedgeDot_dualNum(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec2<f32>(other.g0_.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec2<f32>(other.g0_.x));
}

fn roundPoint_antiWedgeDot_flatPoint(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(-other.g0_.w));
}

fn roundPoint_antiWedgeDot_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, other.g1_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, other.g1_.w, 0.0) + vec4<f32>(self_.g1_.y, self_.g1_.y, self_.g1_.y, self_.g1_.x) * other.g1_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(-other.g0_.w));
}

fn roundPoint_antiWedgeDot_line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_antiWedgeDot_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w) - vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_antiWedgeDot_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g9_.x, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g9_.y, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g9_.z, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g10_.y, other.g2_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g10_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) - vec3<f32>(self_.g1_.x) * other.g8_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g1_ * vec2<f32>(other.g6_.w) + self_.g1_ * vec2<f32>(other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x) - vec3<f32>(self_.g1_.x) * other.g9_ + vec3<f32>(self_.g1_.x) * other.g4_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.y) * other.g3_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.y, -other.g5_.z, other.g5_.y, other.g4_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g5_.z, other.g10_.y, -other.g5_.x, other.g4_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g5_.y, other.g5_.x, other.g10_.y, other.g4_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g10_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, -other.g10_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.x, other.g6_.z, -other.g6_.y, -other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g6_.z, -other.g2_.x, other.g6_.x, -other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g6_.y, -other.g6_.x, -other.g2_.x, -other.g7_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, -other.g2_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g6_.w) + vec3<f32>(self_.g1_.x) * other.g8_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g8_.z, other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.y) * other.g7_ - vec3<f32>(self_.g1_.y) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, -other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, -other.g0_.x) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g1_.y) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g1_ * vec2<f32>(-other.g5_.w) + self_.g1_ * vec2<f32>(other.g0_.x));
}

fn roundPoint_antiWedgeDot_plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0) + vec4<f32>(self_.g1_.y, self_.g1_.y, self_.g1_.y, self_.g1_.x) * other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_antiWedgeDot_roundPoint(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g1_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), self_.g0_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_antiWedgeDot_scalar(self_: RoundPoint, other: Scalar) -> Sphere {
    return Sphere(vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn roundPoint_antiWedgeDot_sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_antiWedgeDot_antiScalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn scalar_antiWedgeDot_circle(self_: Scalar, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_) * other.g1_, vec4<f32>(self_.g0_) * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, -other.g0_.w));
}

fn scalar_antiWedgeDot_dipole(self_: Scalar, other: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g2_.w), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g1_, vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z));
}

fn scalar_antiWedgeDot_dualNum(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_) * other.g0_.yx * vec2<f32>(1.0, -1.0));
}

fn scalar_antiWedgeDot_flatPoint(self_: Scalar, other: FlatPoint) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z));
}

fn scalar_antiWedgeDot_flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_) * vec2<f32>(0.0, -other.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_antiWedgeDot_line(self_: Scalar, other: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(self_.g0_) * other.g0_, vec4<f32>(self_.g0_) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0));
}

fn scalar_antiWedgeDot_motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_antiWedgeDot_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * other.g0_.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0_) * other.g9_, vec2<f32>(0.0) - vec2<f32>(self_.g0_) * other.g10_, vec3<f32>(self_.g0_) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_) * other.g7_, vec4<f32>(self_.g0_) * vec4<f32>(other.g8_.x, other.g8_.y, other.g8_.z, -other.g6_.w), vec4<f32>(self_.g0_) * vec4<f32>(-other.g3_.x, -other.g3_.y, -other.g3_.z, other.g5_.w), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g4_, vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g1_, vec2<f32>(self_.g0_) * other.g2_);
}

fn scalar_antiWedgeDot_plane(self_: Scalar, other: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_) * vec2<f32>(0.0, -other.g0_.w));
}

fn scalar_antiWedgeDot_roundPoint(self_: Scalar, other: RoundPoint) -> Sphere {
    return Sphere(vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn scalar_antiWedgeDot_scalar(self_: Scalar, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_ * other.g0_);
}

fn scalar_antiWedgeDot_sphere(self_: Scalar, other: Sphere) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(0.0) - vec2<f32>(self_.g0_) * other.g1_);
}

fn sphere_antiWedgeDot_antiScalar(self_: Sphere, other: AntiScalar) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn sphere_antiWedgeDot_circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * other.g2_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g2_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, other.g2_.z) + self_.g1_ * vec2<f32>(other.g0_.w));
}

fn sphere_antiWedgeDot_dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g1_.y) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(other.g2_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g2_.w) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) - vec3<f32>(self_.g1_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_antiWedgeDot_dualNum(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), vec2<f32>(0.0) - self_.g1_ * vec2<f32>(other.g0_.x), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec2<f32>(other.g0_.y));
}

fn sphere_antiWedgeDot_flatPoint(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_antiWedgeDot_flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.w), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g1_.w) - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_antiWedgeDot_line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g1_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn sphere_antiWedgeDot_motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g1_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, other.g0_.w) + vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + self_.g1_ * vec2<f32>(other.g0_.w));
}

fn sphere_antiWedgeDot_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, other.g9_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, other.g9_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, other.g9_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g2_.y, -other.g10_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g2_.x, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g4_.z, other.g0_.x, -other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, other.g0_.x) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g1_.y) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g1_ * vec2<f32>(other.g5_.w) - self_.g1_ * vec2<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, other.g2_.x) + vec3<f32>(self_.g1_.x) * other.g7_ + vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g6_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g1_.x) * other.g8_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.y, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g8_.z, -other.g2_.y, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, -other.g2_.y, -other.g7_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, -other.g2_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g10_.x, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g3_.z, -other.g10_.x, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, -other.g10_.x, -other.g4_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, other.g10_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g4_.x, -other.g4_.y, -other.g4_.z, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, -other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, -other.g5_.w) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g1_.y) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, other.g10_.y) - vec3<f32>(self_.g1_.y) * other.g9_ - vec3<f32>(self_.g1_.y) * other.g4_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g0_.y) + vec3<f32>(self_.g1_.x) * other.g8_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g6_.x, other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g6_.y, other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g6_.z, other.g8_.z) + self_.g1_ * vec2<f32>(other.g6_.w) + self_.g1_ * vec2<f32>(other.g0_.y));
}

fn sphere_antiWedgeDot_plane(self_: Sphere, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_antiWedgeDot_roundPoint(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g1_.y, -other.g1_.y, -other.g1_.y, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) - vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_antiWedgeDot_scalar(self_: Sphere, other: Scalar) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_), vec2<f32>(0.0) - self_.g1_ * vec2<f32>(other.g0_));
}

fn sphere_antiWedgeDot_sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_wedgeDot_antiScalar(self_: AntiScalar, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0_ * other.g0_);
}

fn antiScalar_wedgeDot_circle(self_: AntiScalar, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g1_, vec4<f32>(self_.g0_) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, other.g0_.w));
}

fn antiScalar_wedgeDot_dipole(self_: AntiScalar, other: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g2_.w), vec3<f32>(self_.g0_) * other.g1_, vec3<f32>(self_.g0_) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z));
}

fn antiScalar_wedgeDot_dualNum(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_) * other.g0_.yx * vec2<f32>(-1.0, 1.0));
}

fn antiScalar_wedgeDot_flatPoint(self_: AntiScalar, other: FlatPoint) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z));
}

fn antiScalar_wedgeDot_flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_) * vec2<f32>(0.0, other.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_wedgeDot_line(self_: AntiScalar, other: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g0_, vec4<f32>(self_.g0_) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0));
}

fn antiScalar_wedgeDot_motor(self_: AntiScalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_wedgeDot_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * other.g0_.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g9_, vec2<f32>(self_.g0_) * other.g10_, vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g7_, vec4<f32>(self_.g0_) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g6_.w), vec4<f32>(self_.g0_) * vec4<f32>(other.g3_.x, other.g3_.y, other.g3_.z, -other.g5_.w), vec3<f32>(self_.g0_) * other.g4_, vec3<f32>(self_.g0_) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z), vec3<f32>(self_.g0_) * other.g1_, vec2<f32>(0.0) - vec2<f32>(self_.g0_) * other.g2_);
}

fn antiScalar_wedgeDot_plane(self_: AntiScalar, other: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0_) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_) * vec2<f32>(0.0, other.g0_.w));
}

fn antiScalar_wedgeDot_roundPoint(self_: AntiScalar, other: RoundPoint) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(0.0) - vec2<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_wedgeDot_scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn antiScalar_wedgeDot_sphere(self_: AntiScalar, other: Sphere) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn circle_wedgeDot_antiScalar(self_: Circle, other: AntiScalar) -> Dipole {
    return Dipole(vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_) + vec4<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z, self_.g2_.x) * vec4<f32>(-other.g0_, -other.g0_, -other.g0_, 0.0));
}

fn circle_wedgeDot_circle(self_: Circle, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g2_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g2_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g2_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g2_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.y) + self_.g0_.wwwz * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, -other.g2_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn circle_wedgeDot_dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g2_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ - self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g2_.w, other.g1_.z, -other.g1_.y, -other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, other.g2_.w, other.g1_.x, -other.g2_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g2_.w, -other.g2_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_wedgeDot_dualNum(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.y), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z, self_.g2_.x) * vec4<f32>(-other.g0_.y, -other.g0_.y, -other.g0_.y, 0.0), self_.g0_ * vec4<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), self_.g2_ * vec3<f32>(other.g0_.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_wedgeDot_flatPoint(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g1_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g2_ * vec3<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_wedgeDot_flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) - vec2<f32>(self_.g0_.z, self_.g0_.w) * vec2<f32>(other.g1_.z, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, other.g0_.w, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_wedgeDot_line(self_: Circle, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + self_.g0_.wwwz * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn circle_wedgeDot_motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, other.g0_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn circle_wedgeDot_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g8_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g8_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g8_.z, -other.g5_.z) - vec2<f32>(self_.g0_.w) * vec2<f32>(other.g6_.w, other.g5_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g7_.x, -other.g4_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g7_.y, -other.g4_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g7_.z, -other.g4_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g6_.x, -other.g3_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(other.g6_.y, -other.g3_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(other.g6_.z, -other.g3_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g0_.w) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(1.0, -1.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g4_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, -other.g0_.y, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g6_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.y) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g8_.z, -other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, -other.g2_.y) - vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g8_.x, other.g8_.y, other.g8_.z, other.g0_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g2_.y, -other.g8_.z, other.g8_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g8_.z, -other.g2_.y, -other.g8_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g8_.y, other.g8_.x, -other.g2_.y, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.z, -other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.y, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g5_.w, other.g9_.z, -other.g9_.y, -other.g5_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g9_.z, other.g5_.w, other.g9_.x, -other.g5_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g4_.z, other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g9_.y, -other.g9_.x, other.g5_.w, -other.g5_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g3_.x, other.g3_.y, other.g3_.z, other.g0_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g10_.x, other.g3_.z, -other.g3_.y, other.g9_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g3_.z, other.g10_.x, other.g3_.x, other.g9_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, other.g10_.x, other.g9_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) - vec3<f32>(self_.g0_.w) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g0_.w) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, other.g6_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g6_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g7_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g7_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g7_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, other.g8_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, other.g8_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g7_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g7_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g7_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn circle_wedgeDot_plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) - vec2<f32>(self_.g0_.z, self_.g0_.w) * vec2<f32>(other.g0_.z, other.g0_.w) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_wedgeDot_roundPoint(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g1_ * vec3<f32>(other.g1_.x), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g0_.w) * other.g0_ - self_.g2_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, -other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, -other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g2_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn circle_wedgeDot_scalar(self_: Circle, other: Scalar) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec3<f32>(other.g0_));
}

fn circle_wedgeDot_sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - self_.g2_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, other.g0_.z), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g0_.w) * other.g0_ + self_.g2_ * vec3<f32>(other.g1_.x), self_.g1_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_wedgeDot_antiScalar(self_: Dipole, other: AntiScalar) -> Circle {
    return Circle(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g0_, other.g0_, other.g0_, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_), self_.g1_ * vec3<f32>(other.g0_), vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g0_));
}

fn dipole_wedgeDot_circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g2_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y, -other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x, -other.g2_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w, -other.g2_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g2_.wwwz * other.g0_.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) + vec3<f32>(self_.g2_.w) * other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_wedgeDot_dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g2_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.w) * vec2<f32>(other.g2_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g2_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g2_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w, -other.g0_.z) + vec4<f32>(self_.g2_.w) * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn dipole_wedgeDot_dualNum(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), self_.g2_ * vec4<f32>(other.g0_.x), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g0_.y, other.g0_.y, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_wedgeDot_flatPoint(self_: Dipole, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.w) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + self_.g2_.xyzx * vec4<f32>(-other.g0_.w, -other.g0_.w, -other.g0_.w, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn dipole_wedgeDot_flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.w) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.w, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, other.g1_.w, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, -other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g1_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, other.g1_.w));
}

fn dipole_wedgeDot_line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - vec3<f32>(self_.g2_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_wedgeDot_motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - vec3<f32>(self_.g2_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, other.g0_.w, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g0_.w, -other.g1_.z) + vec4<f32>(self_.g2_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w) + vec3<f32>(self_.g2_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_wedgeDot_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g5_.x, other.g8_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g5_.y, other.g8_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g5_.z, other.g8_.z) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g4_.x, other.g7_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g4_.y, other.g7_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g4_.z, other.g7_.z) - vec2<f32>(self_.g2_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g2_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g2_.z) * vec2<f32>(other.g3_.z, other.g6_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(other.g5_.w, -other.g6_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, other.g6_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g6_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) - vec3<f32>(self_.g2_.w) * other.g7_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.w) * other.g2_ * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) - vec3<f32>(self_.g2_.w) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g2_.w) * other.g9_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g5_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g5_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g5_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g10_.y, other.g5_.z, -other.g5_.y, -other.g9_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g5_.z, other.g10_.y, other.g5_.x, -other.g9_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g5_.y, -other.g5_.x, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y, -other.g3_.x) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x, -other.g3_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g4_.z, other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w, -other.g3_.z) + vec4<f32>(self_.g2_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, other.g0_.x, 0.0) + vec4<f32>(self_.g2_.w) * vec4<f32>(other.g5_.x, other.g5_.y, other.g5_.z, other.g0_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g6_.w, other.g7_.z, -other.g7_.y, -other.g8_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g7_.z, -other.g6_.w, other.g7_.x, -other.g8_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g7_.y, -other.g7_.x, -other.g6_.w, -other.g8_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g2_.x, other.g6_.z, -other.g6_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g6_.z, other.g2_.x, other.g6_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g6_.y, -other.g6_.x, other.g2_.x, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.y) + vec4<f32>(self_.g2_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.z) - vec4<f32>(self_.g2_.w) * vec4<f32>(other.g6_.x, other.g6_.y, other.g6_.z, other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g7_.z, other.g0_.y, other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g0_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g6_.z, other.g2_.x, other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, other.g2_.x) - vec3<f32>(self_.g2_.w) * other.g1_, vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g6_.w, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g7_.z, other.g6_.w, other.g7_.x) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g6_.w) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y) + vec3<f32>(self_.g2_.w) * other.g8_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, -other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, -other.g10_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g2_.w) * other.g4_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g4_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g2_.w) * other.g10_ * vec2<f32>(-1.0, 1.0));
}

fn dipole_wedgeDot_plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, other.g0_.w));
}

fn dipole_wedgeDot_roundPoint(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g2_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g2_.w) * other.g0_, self_.g1_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_wedgeDot_scalar(self_: Dipole, other: Scalar) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec4<f32>(other.g0_));
}

fn dipole_wedgeDot_sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g1_.x), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g2_.w) * other.g0_, vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * other.g1_ * vec2<f32>(-1.0, 1.0));
}

fn dualNum_wedgeDot_antiScalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0_.yx * vec2<f32>(-other.g0_));
}

fn dualNum_wedgeDot_circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * other.g1_, vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, other.g0_.w), vec4<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_wedgeDot_dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec4<f32>(self_.g0_.x) * other.g2_, vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g2_.w), vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_wedgeDot_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * other.g0_.yx * vec2<f32>(-1.0, 1.0));
}

fn dualNum_wedgeDot_flatPoint(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0_.x) * other.g0_, vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_wedgeDot_flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0_.x) * other.g0_, vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.w));
}

fn dualNum_wedgeDot_line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * other.g0_, vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_wedgeDot_motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_.yx * vec2<f32>(-other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_wedgeDot_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * other.g0_.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0_.x) * other.g1_ - vec3<f32>(self_.g0_.y) * other.g9_, vec2<f32>(self_.g0_.x) * other.g2_ + vec2<f32>(self_.g0_.y) * other.g10_, vec3<f32>(self_.g0_.x) * other.g3_ - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * other.g4_ - vec3<f32>(self_.g0_.y) * other.g7_, vec4<f32>(self_.g0_.x) * other.g5_ + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g6_.w), vec4<f32>(self_.g0_.x) * other.g6_ + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g3_.x, other.g3_.y, other.g3_.z, -other.g5_.w), vec3<f32>(self_.g0_.x) * other.g7_ + vec3<f32>(self_.g0_.y) * other.g4_, vec3<f32>(self_.g0_.x) * other.g8_ + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z), vec3<f32>(self_.g0_.x) * other.g9_ + vec3<f32>(self_.g0_.y) * other.g1_, vec2<f32>(self_.g0_.x) * other.g10_ - vec2<f32>(self_.g0_.y) * other.g2_);
}

fn dualNum_wedgeDot_plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.w));
}

fn dualNum_wedgeDot_roundPoint(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(self_.g0_.x) * other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(0.0) - vec2<f32>(self_.g0_.y) * other.g1_);
}

fn dualNum_wedgeDot_scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(other.g0_));
}

fn dualNum_wedgeDot_sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(self_.g0_.y) * other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(self_.g0_.x) * other.g1_);
}

fn flatPoint_wedgeDot_antiScalar(self_: FlatPoint, other: AntiScalar) -> Circle {
    return Circle(vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_));
}

fn flatPoint_wedgeDot_circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g0_.wwwz * other.g0_.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) + vec3<f32>(self_.g0_.w) * other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_wedgeDot_dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g2_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w, -other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn flatPoint_wedgeDot_dualNum(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.x), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_wedgeDot_flatPoint(self_: FlatPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_.xyzx * vec4<f32>(-other.g0_.w, -other.g0_.w, -other.g0_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_wedgeDot_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.w));
}

fn flatPoint_wedgeDot_line(self_: FlatPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_wedgeDot_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w) + vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_wedgeDot_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, other.g6_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g5_.w, -other.g6_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g7_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g0_.w) * other.g2_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g9_, vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y, -other.g3_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x, -other.g3_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g4_.z, other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w, -other.g3_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g5_.x, other.g5_.y, other.g5_.z, other.g0_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.z) - vec4<f32>(self_.g0_.w) * vec4<f32>(other.g6_.x, other.g6_.y, other.g6_.z, other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g6_.z, other.g2_.x, other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g7_.z, other.g6_.w, other.g7_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g6_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y) + vec3<f32>(self_.g0_.w) * other.g8_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g4_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(-1.0, 1.0));
}

fn flatPoint_wedgeDot_plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w));
}

fn flatPoint_wedgeDot_roundPoint(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_wedgeDot_scalar(self_: FlatPoint, other: Scalar) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(other.g0_));
}

fn flatPoint_wedgeDot_sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g0_.w) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0));
}

fn flector_wedgeDot_antiScalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_), vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_wedgeDot_circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g0_.wwwz * other.g0_.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) + vec3<f32>(self_.g0_.w) * other.g2_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g1_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_wedgeDot_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g2_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.w) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w, -other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g2_.w));
}

fn flector_wedgeDot_dualNum(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.y), vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.y), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.x), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.x), vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.x));
}

fn flector_wedgeDot_flatPoint(self_: Flector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.w), self_.g0_.xyzx * vec4<f32>(-other.g0_.w, -other.g0_.w, -other.g0_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn flector_wedgeDot_flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(other.g0_.w, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g1_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.w, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, other.g1_.w, other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g1_.w, 0.0) + vec4<f32>(self_.g1_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn flector_wedgeDot_line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_wedgeDot_motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_wedgeDot_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, other.g6_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g5_.w, -other.g6_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g9_.x, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g9_.y, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g9_.z, other.g1_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(other.g10_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g0_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g6_.w) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.y), vec3<f32>(0.0) - vec3<f32>(self_.g0_.w) * other.g3_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g1_.w) * other.g3_, vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y, -other.g3_.x) + vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x, -other.g3_.y) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g4_.z, other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w, -other.g3_.z) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g5_.x, other.g5_.y, other.g5_.z, other.g0_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g10_.y, other.g5_.z, -other.g5_.y, -other.g4_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g5_.z, other.g10_.y, other.g5_.x, -other.g4_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g5_.y, -other.g5_.x, other.g10_.y, -other.g4_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(-other.g9_.x, -other.g9_.y, -other.g9_.z, other.g10_.x) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.z) - vec4<f32>(self_.g0_.w) * vec4<f32>(other.g6_.x, other.g6_.y, other.g6_.z, other.g0_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y, other.g7_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x, other.g7_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x, other.g7_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g6_.z, other.g2_.x, other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g1_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g7_.z, other.g6_.w, other.g7_.x) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g6_.w) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y) + vec3<f32>(self_.g0_.w) * other.g8_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.w) * other.g7_ + vec3<f32>(self_.g1_.w) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g1_.w) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g5_.w) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.x));
}

fn flector_wedgeDot_plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + self_.g1_.xyzx * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0) + vec4<f32>(self_.g1_.w) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w));
}

fn flector_wedgeDot_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1_ * vec4<f32>(other.g1_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g0_.w) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_wedgeDot_scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec4<f32>(other.g0_));
}

fn flector_wedgeDot_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.w) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g0_.w) * other.g0_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + self_.g1_.xyzx * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.w) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0));
}

fn line_wedgeDot_antiScalar(self_: Line, other: AntiScalar) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(-other.g0_, -other.g0_, -other.g0_, 0.0));
}

fn line_wedgeDot_circle(self_: Line, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn line_wedgeDot_dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_wedgeDot_dualNum(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.y), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(-other.g0_.y, -other.g0_.y, -other.g0_.y, 0.0), vec4<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_wedgeDot_flatPoint(self_: Line, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g1_ * vec3<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_wedgeDot_flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.z), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_wedgeDot_line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn line_wedgeDot_motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn line_wedgeDot_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g7_.x, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g7_.y, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g7_.z, -other.g4_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, -other.g3_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, -other.g3_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, -other.g3_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g4_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.y, -other.g8_.z, other.g8_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g8_.z, -other.g2_.y, -other.g8_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g8_.y, other.g8_.x, -other.g2_.y, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, -other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.y, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.x, other.g3_.z, -other.g3_.y, other.g9_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g3_.z, other.g10_.x, other.g3_.x, other.g9_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, other.g10_.x, other.g9_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g6_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g6_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g7_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g7_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g7_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn line_wedgeDot_plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_wedgeDot_roundPoint(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.x), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, -other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, -other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn line_wedgeDot_scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn line_wedgeDot_sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, other.g0_.z), self_.g1_ * vec3<f32>(other.g1_.x), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_wedgeDot_antiScalar(self_: Motor, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(-other.g0_, -other.g0_, -other.g0_, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_wedgeDot_circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, other.g0_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn motor_wedgeDot_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g2_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_wedgeDot_dualNum(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * other.g0_.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(-other.g0_.y, -other.g0_.y, -other.g0_.y, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_wedgeDot_flatPoint(self_: Motor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) - self_.g1_ * vec3<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_wedgeDot_flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_wedgeDot_line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn motor_wedgeDot_motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn motor_wedgeDot_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g7_.x, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g7_.y, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g7_.z, -other.g4_.z) + vec2<f32>(self_.g0_.w) * other.g0_.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, -other.g3_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, -other.g3_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, -other.g3_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) - vec3<f32>(self_.g0_.w) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g0_.w) * other.g10_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g4_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) - vec3<f32>(self_.g0_.w) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.y, -other.g8_.z, other.g8_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g8_.z, -other.g2_.y, -other.g8_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g8_.y, other.g8_.x, -other.g2_.y, -other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g6_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, -other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.y, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.x, other.g3_.z, -other.g3_.y, other.g9_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g3_.z, other.g10_.x, other.g3_.x, other.g9_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, other.g10_.x, other.g9_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g3_.x, other.g3_.y, other.g3_.z, -other.g5_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g0_.w) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g6_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g6_.w) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, other.g8_.z) - vec2<f32>(self_.g0_.w) * other.g2_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g7_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g7_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g7_.z) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn motor_wedgeDot_plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_wedgeDot_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, -other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, -other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_ - self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.w) * other.g1_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn motor_wedgeDot_scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn motor_wedgeDot_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g0_ - self_.g1_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.w) * other.g1_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, other.g0_.z), self_.g1_ * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_wedgeDot_antiScalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0_.yx * vec2<f32>(-other.g0_), vec3<f32>(0.0) - self_.g9_ * vec3<f32>(other.g0_), self_.g10_ * vec2<f32>(other.g0_), vec3<f32>(0.0) - vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_), vec3<f32>(0.0) - self_.g7_ * vec3<f32>(other.g0_), vec4<f32>(self_.g6_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_) + vec4<f32>(self_.g8_.x, self_.g8_.y, self_.g8_.z, self_.g8_.x) * vec4<f32>(-other.g0_, -other.g0_, -other.g0_, 0.0), vec4<f32>(self_.g3_.x, self_.g3_.y, self_.g3_.z, self_.g3_.x) * vec4<f32>(other.g0_, other.g0_, other.g0_, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_), self_.g4_ * vec3<f32>(other.g0_), vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), vec2<f32>(0.0) - self_.g2_ * vec2<f32>(other.g0_));
}

fn multiVector_wedgeDot_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, -other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g2_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g2_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g2_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g0_.w, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g7_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g7_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g8_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g8_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + self_.g4_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g2_ - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g10_ * vec2<f32>(-other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g1_.z, other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, other.g0_.w) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * other.g1_ - self_.g1_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g2_.x) * other.g2_ - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.x, -other.g2_.y, -other.g2_.z, other.g0_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.y) + self_.g6_.wwwz * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, -other.g2_.z) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, -other.g2_.z, other.g2_.y, 0.0) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g2_.z, 0.0, -other.g2_.x, 0.0) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g2_.y, other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g8_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, other.g0_.x) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, other.g0_.y) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, other.g0_.z), vec4<f32>(self_.g0_.x) * other.g0_ + vec4<f32>(self_.g3_.x) * vec4<f32>(-other.g0_.w, other.g1_.z, -other.g1_.y, -other.g2_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(-other.g1_.z, -other.g0_.w, other.g1_.x, -other.g2_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, -other.g0_.w, -other.g2_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g5_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + self_.g5_.wwwz * other.g0_.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g9_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g2_ + vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * other.g2_ + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) + vec3<f32>(self_.g5_.w) * other.g2_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g10_.y) * other.g1_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * other.g2_ - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g1_ + self_.g7_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g2_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(other.g0_.x, other.g2_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(other.g0_.y, other.g2_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn multiVector_wedgeDot_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g5_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g5_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.w) * vec2<f32>(other.g2_.w, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, -other.g2_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g2_.y) * other.g0_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g1_ - self_.g7_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, other.g2_.z) + self_.g2_ * vec2<f32>(other.g2_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(self_.g0_.x) * other.g0_ + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g1_.z, other.g2_.w, other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g2_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g5_.w) * other.g0_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g9_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g10_.y) * other.g0_, vec4<f32>(self_.g0_.x) * other.g2_ + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, 0.0) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, 0.0) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, 0.0) + vec4<f32>(self_.g5_.x) * vec4<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g5_.y) * vec4<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g5_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w, -other.g0_.z) + vec4<f32>(self_.g5_.w) * vec4<f32>(other.g2_.x, other.g2_.y, other.g2_.z, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, -other.g2_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g2_.w, other.g1_.z, -other.g1_.y, -other.g2_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(-other.g1_.z, other.g2_.w, other.g1_.x, -other.g2_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g2_.w, -other.g2_.z) + vec4<f32>(self_.g6_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g7_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g7_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g8_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g8_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(self_.g0_.y) * other.g1_ - self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g2_.y) * other.g0_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g2_.y) * other.g1_ - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g2_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g1_.z, -other.g2_.w, other.g1_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g2_.w), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + self_.g4_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g10_.y) * other.g0_, vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g10_ * vec2<f32>(other.g2_.w));
}

fn multiVector_wedgeDot_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * other.g0_.yx * vec2<f32>(-1.0, 1.0), self_.g1_ * vec3<f32>(other.g0_.x) - self_.g9_ * vec3<f32>(other.g0_.y), self_.g2_ * vec2<f32>(other.g0_.x) + self_.g10_ * vec2<f32>(other.g0_.y), self_.g3_ * vec3<f32>(other.g0_.x) - vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.y), self_.g4_ * vec3<f32>(other.g0_.x) - self_.g7_ * vec3<f32>(other.g0_.y), self_.g5_ * vec4<f32>(other.g0_.x) + vec4<f32>(self_.g6_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g8_.x, self_.g8_.y, self_.g8_.z, self_.g8_.x) * vec4<f32>(-other.g0_.y, -other.g0_.y, -other.g0_.y, 0.0), vec4<f32>(self_.g3_.x, self_.g3_.y, self_.g3_.z, self_.g3_.x) * vec4<f32>(other.g0_.y, other.g0_.y, other.g0_.y, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.y) + self_.g6_ * vec4<f32>(other.g0_.x), self_.g4_ * vec3<f32>(other.g0_.y) + self_.g7_ * vec3<f32>(other.g0_.x), vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g0_.y) + self_.g8_ * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.y) + self_.g9_ * vec3<f32>(other.g0_.x), vec2<f32>(0.0) - self_.g2_ * vec2<f32>(other.g0_.y) + self_.g10_ * vec2<f32>(other.g0_.x));
}

fn multiVector_wedgeDot_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.w) * vec2<f32>(other.g0_.w, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g7_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + self_.g2_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g0_.z), self_.g3_ * vec3<f32>(other.g0_.w), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g9_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * other.g0_ + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + self_.g5_.xyzx * vec4<f32>(-other.g0_.w, -other.g0_.w, -other.g0_.w, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g8_ * vec3<f32>(other.g0_.w), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g4_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g10_ * vec2<f32>(other.g0_.w));
}

fn multiVector_wedgeDot_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.w) * vec2<f32>(other.g0_.w, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, -other.g0_.w) + vec2<f32>(self_.g9_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g9_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g9_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g1_.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g7_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + self_.g2_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) - vec2<f32>(self_.g6_.z, self_.g6_.w) * vec2<f32>(other.g1_.z, other.g1_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g1_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * other.g0_ + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(other.g1_.w, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g0_.z, other.g1_.w, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(other.g1_.w, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g0_.z, other.g1_.w, other.g0_.x, 0.0) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g1_.w, 0.0) - vec4<f32>(self_.g10_.y, self_.g10_.y, self_.g10_.y, self_.g10_.x) * other.g1_, vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w) + vec4<f32>(self_.g2_.x) * other.g1_ + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g0_.w, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(-other.g1_.z, other.g0_.w, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, -other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g1_.w) - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g1_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g0_.z, other.g1_.w, other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g1_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(-other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, -other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g1_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g10_ * vec2<f32>(other.g0_.w));
}

fn multiVector_wedgeDot_line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g7_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g7_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - vec3<f32>(self_.g5_.w) * other.g0_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g1_, vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0) - vec3<f32>(self_.g2_.x) * other.g0_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * other.g0_ - vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + self_.g6_.wwwz * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, -other.g1_.z) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec3<f32>(self_.g0_.x) * other.g0_ + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g10_.y) * other.g0_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g0_, vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn multiVector_wedgeDot_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_.yx * vec2<f32>(-other.g0_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g7_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g7_.z) * vec2<f32>(other.g0_.z, 0.0), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - vec3<f32>(self_.g5_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g1_, vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g1_.z) + self_.g10_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) - vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g7_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w), vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.z) + vec4<f32>(self_.g6_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, other.g0_.w) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g8_.x) * vec4<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w, 0.0), vec4<f32>(self_.g3_.x) * vec4<f32>(other.g0_.w, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(-other.g0_.z, other.g0_.w, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g0_.w, -other.g1_.z) + vec4<f32>(self_.g5_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0_.w) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g1_ + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w) + vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w) + vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) - self_.g2_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn multiVector_wedgeDot_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * other.g0_.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.x, other.g9_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.y, other.g9_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g1_.z, other.g9_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g2_.y, other.g10_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g2_.x, other.g10_.x) - vec2<f32>(self_.g3_.x) * vec2<f32>(other.g5_.x, other.g8_.x) - vec2<f32>(self_.g3_.y) * vec2<f32>(other.g5_.y, other.g8_.y) - vec2<f32>(self_.g3_.z) * vec2<f32>(other.g5_.z, other.g8_.z) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g4_.x, other.g7_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g4_.y, other.g7_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g4_.z, other.g7_.z) - vec2<f32>(self_.g5_.x) * vec2<f32>(other.g3_.x, other.g6_.x) - vec2<f32>(self_.g5_.y) * vec2<f32>(other.g3_.y, other.g6_.y) - vec2<f32>(self_.g5_.z) * vec2<f32>(other.g3_.z, other.g6_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(other.g5_.w, -other.g6_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g8_.x, -other.g5_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g8_.y, -other.g5_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g8_.z, -other.g5_.z) - vec2<f32>(self_.g6_.w) * vec2<f32>(other.g6_.w, other.g5_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(other.g7_.x, -other.g4_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(other.g7_.y, -other.g4_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(other.g7_.z, -other.g4_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(other.g6_.x, -other.g3_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(other.g6_.y, -other.g3_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(other.g6_.z, -other.g3_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(-other.g9_.x, other.g1_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(-other.g9_.y, other.g1_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(-other.g9_.z, other.g1_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g10_.y, other.g2_.y) + vec2<f32>(self_.g10_.y) * vec2<f32>(other.g10_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * other.g1_ - vec3<f32>(self_.g0_.y) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g2_.y) * other.g3_ + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g1_.z, other.g6_.w, other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g6_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) - vec3<f32>(self_.g5_.w) * other.g7_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g6_.w) * other.g4_ + vec3<f32>(self_.g7_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) + vec3<f32>(self_.g10_.x) * other.g8_ - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * other.g2_ + vec2<f32>(self_.g0_.y) * other.g10_ + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g3_.x, other.g5_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g3_.y, other.g5_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g3_.z, other.g5_.z) + self_.g2_ * vec2<f32>(other.g5_.w) + self_.g2_ * vec2<f32>(other.g0_.x) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g3_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(other.g1_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g5_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g10_ * vec2<f32>(1.0, -1.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g10_ * vec2<f32>(-other.g6_.w) + self_.g10_ * vec2<f32>(other.g0_.y), vec3<f32>(self_.g0_.x) * other.g3_ - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) - vec3<f32>(self_.g2_.x) * other.g7_ + vec3<f32>(self_.g2_.x) * other.g1_ + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) - vec3<f32>(self_.g5_.w) * other.g3_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g6_.w, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g6_.x) * vec3<f32>(-other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g7_.z, other.g6_.w, -other.g7_.x) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, -other.g0_.y, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, other.g6_.w) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, -other.g0_.y) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g7_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g10_.x) * other.g9_ + vec3<f32>(self_.g10_.x) * other.g4_, vec3<f32>(self_.g0_.x) * other.g4_ - vec3<f32>(self_.g0_.y) * other.g7_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, -other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g6_.w) - vec3<f32>(self_.g2_.x) * other.g8_ - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g5_.w) * other.g9_ + vec3<f32>(self_.g6_.x) * vec3<f32>(-other.g2_.y, -other.g8_.z, other.g8_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(other.g8_.z, -other.g2_.y, -other.g8_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(-other.g8_.y, other.g8_.x, -other.g2_.y) - vec3<f32>(self_.g6_.w) * other.g1_ + vec3<f32>(self_.g7_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g10_.y) * other.g3_, vec4<f32>(self_.g0_.x) * other.g5_ + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g8_.x, -other.g8_.y, -other.g8_.z, other.g6_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g2_.y, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g8_.z, other.g2_.y, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, other.g2_.y, -other.g7_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) - vec4<f32>(self_.g2_.y) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, other.g2_.x) + vec4<f32>(self_.g2_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g5_.x) + vec4<f32>(self_.g3_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g5_.y) + vec4<f32>(self_.g3_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g5_.z) + vec4<f32>(self_.g4_.x) * vec4<f32>(other.g10_.y, other.g5_.z, -other.g5_.y, -other.g9_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g5_.z, other.g10_.y, other.g5_.x, -other.g9_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g5_.y, -other.g5_.x, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y, -other.g3_.x) + vec4<f32>(self_.g5_.x) * vec4<f32>(other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x, -other.g3_.y) + vec4<f32>(self_.g5_.y) * vec4<f32>(-other.g4_.z, other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w, -other.g3_.z) + vec4<f32>(self_.g5_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, other.g0_.x, 0.0) + vec4<f32>(self_.g5_.w) * vec4<f32>(other.g5_.x, other.g5_.y, other.g5_.z, other.g0_.x) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.x) + vec4<f32>(self_.g6_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.y) + vec4<f32>(self_.g6_.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8_.z) + vec4<f32>(self_.g6_.w) * vec4<f32>(other.g8_.x, other.g8_.y, other.g8_.z, other.g0_.y) + vec4<f32>(self_.g7_.x) * vec4<f32>(-other.g2_.y, -other.g8_.z, other.g8_.y, -other.g1_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(other.g8_.z, -other.g2_.y, -other.g8_.x, -other.g1_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(-other.g8_.y, other.g8_.x, -other.g2_.y, -other.g1_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(-other.g6_.w, -other.g7_.z, other.g7_.y, other.g6_.x) + vec4<f32>(self_.g8_.x) * vec4<f32>(-other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g7_.z, -other.g6_.w, -other.g7_.x, other.g6_.y) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g1_.z, -other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g7_.y, other.g7_.x, -other.g6_.w, other.g6_.z) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, -other.g0_.y, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(other.g10_.y, other.g5_.z, -other.g5_.y, -other.g4_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g5_.z, other.g10_.y, other.g5_.x, -other.g4_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g5_.y, -other.g5_.x, other.g10_.y, -other.g4_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.y) + vec4<f32>(self_.g10_.y) * vec4<f32>(-other.g9_.x, -other.g9_.y, -other.g9_.z, other.g10_.x) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0), vec4<f32>(self_.g0_.x) * other.g6_ + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g3_.x, other.g3_.y, other.g3_.z, -other.g5_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g10_.x, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g3_.z, other.g10_.x, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, other.g10_.x, -other.g4_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, other.g10_.y) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x) + vec4<f32>(self_.g3_.x) * vec4<f32>(-other.g6_.w, other.g7_.z, -other.g7_.y, -other.g8_.x) + vec4<f32>(self_.g3_.x) * vec4<f32>(other.g0_.y, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g3_.y) * vec4<f32>(-other.g7_.z, -other.g6_.w, other.g7_.x, -other.g8_.y) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g1_.z, other.g0_.y, -other.g1_.x, 0.0) + vec4<f32>(self_.g3_.z) * vec4<f32>(other.g7_.y, -other.g7_.x, -other.g6_.w, -other.g8_.z) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, other.g0_.y, 0.0) + vec4<f32>(self_.g4_.x) * vec4<f32>(other.g2_.x, other.g6_.z, -other.g6_.y, -other.g1_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(-other.g6_.z, other.g2_.x, other.g6_.x, -other.g1_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(other.g6_.y, -other.g6_.x, other.g2_.x, -other.g1_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.x) + vec4<f32>(self_.g5_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.y) + vec4<f32>(self_.g5_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6_.z) - vec4<f32>(self_.g5_.w) * vec4<f32>(other.g6_.x, other.g6_.y, other.g6_.z, other.g0_.y) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g5_.w, other.g9_.z, -other.g9_.y, -other.g5_.x) + vec4<f32>(self_.g6_.x) * vec4<f32>(other.g0_.x, other.g4_.z, -other.g4_.y, 0.0) + vec4<f32>(self_.g6_.y) * vec4<f32>(-other.g9_.z, other.g5_.w, other.g9_.x, -other.g5_.y) + vec4<f32>(self_.g6_.y) * vec4<f32>(-other.g4_.z, other.g0_.x, other.g4_.x, 0.0) + vec4<f32>(self_.g6_.z) * vec4<f32>(other.g9_.y, -other.g9_.x, other.g5_.w, -other.g5_.z) + vec4<f32>(self_.g6_.z) * vec4<f32>(other.g4_.y, -other.g4_.x, other.g0_.x, 0.0) + vec4<f32>(self_.g6_.w) * vec4<f32>(other.g3_.x, other.g3_.y, other.g3_.z, other.g0_.x) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g10_.x, other.g3_.z, -other.g3_.y, other.g9_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(-other.g3_.z, other.g10_.x, other.g3_.x, other.g9_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, other.g10_.x, other.g9_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.x) + vec4<f32>(self_.g8_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.y) + vec4<f32>(self_.g8_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3_.z) + vec4<f32>(self_.g9_.x) * vec4<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y, other.g7_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x, other.g7_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x, other.g7_.z) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, other.g2_.y) + vec4<f32>(self_.g10_.x) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g10_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x), vec3<f32>(self_.g0_.x) * other.g7_ + vec3<f32>(self_.g0_.y) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g2_.y) * other.g3_ + vec3<f32>(self_.g3_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g0_.y, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g7_.z, other.g0_.y, other.g7_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g0_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g2_.x, other.g6_.z, -other.g6_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g6_.z, other.g2_.x, other.g6_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g6_.y, -other.g6_.x, other.g2_.x) - vec3<f32>(self_.g5_.w) * other.g1_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) - vec3<f32>(self_.g6_.w) * other.g9_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g8_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(-other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g1_.z, -other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g10_.x) * other.g8_ + vec3<f32>(self_.g10_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * other.g8_ + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.x) * vec3<f32>(-other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g5_.z, -other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, -other.g10_.y) - vec3<f32>(self_.g2_.y) * other.g9_ + vec3<f32>(self_.g2_.y) * other.g4_ + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g6_.w, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g0_.y, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g7_.z, other.g6_.w, other.g7_.x) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g1_.z, other.g0_.y, other.g1_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g6_.w) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.y) + vec3<f32>(self_.g5_.w) * other.g8_ - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g10_.y, other.g5_.z, -other.g5_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g5_.z, other.g10_.y, other.g5_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g5_.y, -other.g5_.x, other.g10_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g8_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g8_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g10_.y) * other.g7_ + vec3<f32>(self_.g10_.y) * other.g1_, vec3<f32>(self_.g0_.x) * other.g9_ + vec3<f32>(self_.g0_.y) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.y, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g7_.z, other.g0_.y, other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g0_.y) + vec3<f32>(self_.g2_.x) * other.g8_ - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(-other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g5_.z, -other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, -other.g10_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(other.g10_.x, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g3_.z, other.g10_.x, other.g3_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, other.g10_.x) + vec3<f32>(self_.g5_.w) * other.g4_ + vec3<f32>(self_.g6_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g6_.w) * other.g7_ + vec3<f32>(self_.g7_.x) * vec3<f32>(other.g6_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g1_.z, other.g6_.w, other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g6_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) - vec3<f32>(self_.g10_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g10_.y) * other.g3_, vec2<f32>(self_.g0_.x) * other.g10_ - vec2<f32>(self_.g0_.y) * other.g2_ + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g2_ * vec2<f32>(other.g6_.w) - self_.g2_ * vec2<f32>(other.g0_.y) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g4_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g5_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(other.g7_.x, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(other.g7_.y, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(other.g7_.z, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(other.g6_.x, other.g8_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(other.g6_.y, other.g8_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g7_.x) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g7_.y) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g7_.z) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g10_ * vec2<f32>(other.g5_.w) + self_.g10_ * vec2<f32>(other.g0_.x));
}

fn multiVector_wedgeDot_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g9_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g9_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g9_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) - vec2<f32>(self_.g6_.z, self_.g6_.w) * vec2<f32>(other.g0_.z, other.g0_.w) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g3_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g5_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g4_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g9_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0) - vec4<f32>(self_.g10_.y, self_.g10_.y, self_.g10_.y, self_.g10_.x) * other.g0_, vec4<f32>(self_.g2_.x) * other.g0_ + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g6_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g6_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + self_.g7_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) - self_.g3_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, other.g0_.w));
}

fn multiVector_wedgeDot_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g10_.y) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(self_.g0_.x) * other.g0_ + self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * other.g1_ + vec2<f32>(self_.g3_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g5_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g2_.x) * other.g0_ + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g7_ * vec3<f32>(other.g1_.x), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g6_.w) * other.g0_ - self_.g8_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) - vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x) + vec4<f32>(self_.g7_.x) * vec4<f32>(-other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, -other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, -other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g4_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z) + vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g9_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g10_.x) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g1_.y) + vec4<f32>(self_.g10_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x), self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g5_.w) * other.g0_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), self_.g4_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g9_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g10_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g0_ + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g8_ * vec3<f32>(other.g1_.x), vec2<f32>(0.0) - vec2<f32>(self_.g0_.y) * other.g1_ + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn multiVector_wedgeDot_scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec2<f32>(other.g0_), self_.g3_ * vec3<f32>(other.g0_), self_.g4_ * vec3<f32>(other.g0_), self_.g5_ * vec4<f32>(other.g0_), self_.g6_ * vec4<f32>(other.g0_), self_.g7_ * vec3<f32>(other.g0_), self_.g8_ * vec3<f32>(other.g0_), self_.g9_ * vec3<f32>(other.g0_), self_.g10_ * vec2<f32>(other.g0_));
}

fn multiVector_wedgeDot_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g9_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g9_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g9_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g10_.y) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.y) * other.g0_ + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - self_.g8_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.y) * other.g1_ + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g1_ * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g0_.z), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g4_ * vec3<f32>(other.g1_.x) - self_.g9_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g10_.x) * other.g0_, self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g5_.w) * other.g0_ + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g4_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g5_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g5_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g5_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g9_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g10_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g10_.y) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g1_.x), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.x, other.g1_.x, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.y) + vec4<f32>(self_.g2_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g6_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g6_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g6_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g6_.w) * other.g0_ + self_.g8_ * vec3<f32>(other.g1_.x), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g2_.y) * other.g0_ + self_.g7_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * other.g0_ - self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * other.g1_ + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * other.g1_ * vec2<f32>(-1.0, 1.0));
}

fn plane_wedgeDot_antiScalar(self_: Plane, other: AntiScalar) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_));
}

fn plane_wedgeDot_circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_wedgeDot_dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g0_.w) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g2_.w));
}

fn plane_wedgeDot_dualNum(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.x));
}

fn plane_wedgeDot_flatPoint(self_: Plane, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn plane_wedgeDot_flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.w, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, other.g1_.w, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g1_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn plane_wedgeDot_line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_wedgeDot_motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_wedgeDot_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g9_.x, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g9_.y, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g9_.z, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g10_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g6_.w) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g0_.w) * other.g3_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.y, other.g5_.z, -other.g5_.y, -other.g4_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g5_.z, other.g10_.y, other.g5_.x, -other.g4_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g5_.y, -other.g5_.x, other.g10_.y, -other.g4_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g9_.x, -other.g9_.y, -other.g9_.z, other.g10_.x) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y, other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x, other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x, other.g7_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, -other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g0_.w) * other.g7_ + vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g0_.w) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g5_.w) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.x));
}

fn plane_wedgeDot_plane(self_: Plane, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_.xyzx * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_wedgeDot_roundPoint(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g0_ * vec4<f32>(other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_wedgeDot_scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(other.g0_));
}

fn plane_wedgeDot_sphere(self_: Plane, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_.xyzx * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_wedgeDot_antiScalar(self_: RoundPoint, other: AntiScalar) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(other.g0_), vec2<f32>(0.0) - self_.g1_ * vec2<f32>(other.g0_));
}

fn roundPoint_wedgeDot_circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g1_.x) * other.g2_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g2_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(other.g0_.w));
}

fn roundPoint_wedgeDot_dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g1_.y) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, other.g2_.z) + self_.g1_ * vec2<f32>(other.g2_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_wedgeDot_dualNum(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec2<f32>(other.g0_.x), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.y), vec2<f32>(0.0) - self_.g1_ * vec2<f32>(other.g0_.y));
}

fn roundPoint_wedgeDot_flatPoint(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_wedgeDot_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.w), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, -other.g0_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g1_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, -other.g1_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g1_.w) - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_wedgeDot_line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn roundPoint_wedgeDot_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, other.g0_.w, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, other.g0_.w) + vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) - self_.g1_ * vec2<f32>(other.g0_.w));
}

fn roundPoint_wedgeDot_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, other.g9_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, other.g9_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, other.g9_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g2_.y, other.g10_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g2_.x, other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g1_.y) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g3_.x, other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g3_.y, other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g3_.z, other.g5_.z) + self_.g1_ * vec2<f32>(other.g5_.w) + self_.g1_ * vec2<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x) - vec3<f32>(self_.g1_.x) * other.g7_ + vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, -other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g6_.w) - vec3<f32>(self_.g1_.x) * other.g8_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g2_.y, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g8_.z, other.g2_.y, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, other.g2_.y, -other.g7_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) - vec4<f32>(self_.g1_.y) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, other.g2_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.x, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g3_.z, other.g10_.x, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, other.g10_.x, -other.g4_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, other.g10_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g5_.w, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g9_.z, -other.g5_.w, -other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, -other.g5_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.y) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.y, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, -other.g10_.y, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, -other.g10_.y) - vec3<f32>(self_.g1_.y) * other.g9_ + vec3<f32>(self_.g1_.y) * other.g4_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.y, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g7_.z, other.g0_.y, other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, other.g0_.y) + vec3<f32>(self_.g1_.x) * other.g8_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g1_ * vec2<f32>(other.g6_.w) - self_.g1_ * vec2<f32>(other.g0_.y));
}

fn roundPoint_wedgeDot_plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_wedgeDot_roundPoint(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) - vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_wedgeDot_scalar(self_: RoundPoint, other: Scalar) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn roundPoint_wedgeDot_sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g1_.x, other.g1_.x, other.g1_.x, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar_wedgeDot_antiScalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn scalar_wedgeDot_circle(self_: Scalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec3<f32>(self_.g0_) * other.g2_);
}

fn scalar_wedgeDot_dipole(self_: Scalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec4<f32>(self_.g0_) * other.g2_);
}

fn scalar_wedgeDot_dualNum(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_) * other.g0_);
}

fn scalar_wedgeDot_flatPoint(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_) * other.g0_);
}

fn scalar_wedgeDot_flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_) * other.g0_, vec4<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedgeDot_line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedgeDot_motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedgeDot_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec2<f32>(self_.g0_) * other.g2_, vec3<f32>(self_.g0_) * other.g3_, vec3<f32>(self_.g0_) * other.g4_, vec4<f32>(self_.g0_) * other.g5_, vec4<f32>(self_.g0_) * other.g6_, vec3<f32>(self_.g0_) * other.g7_, vec3<f32>(self_.g0_) * other.g8_, vec3<f32>(self_.g0_) * other.g9_, vec2<f32>(self_.g0_) * other.g10_);
}

fn scalar_wedgeDot_plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0_) * other.g0_);
}

fn scalar_wedgeDot_roundPoint(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedgeDot_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn scalar_wedgeDot_sphere(self_: Scalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn sphere_wedgeDot_antiScalar(self_: Sphere, other: AntiScalar) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn sphere_wedgeDot_circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g2_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(-other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * other.g2_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g1_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_wedgeDot_dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g1_, self_.g0_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.y) * other.g0_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.y) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(other.g2_.w));
}

fn sphere_wedgeDot_dualNum(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec2<f32>(other.g0_.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec2<f32>(other.g0_.x));
}

fn sphere_wedgeDot_flatPoint(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w));
}

fn sphere_wedgeDot_flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.w, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, other.g0_.w, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.w, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, other.g1_.w, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, other.g1_.w, 0.0) - vec4<f32>(self_.g1_.y, self_.g1_.y, self_.g1_.y, self_.g1_.x) * other.g1_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w));
}

fn sphere_wedgeDot_line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_wedgeDot_motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.w, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, -other.g0_.w, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, -other.g0_.w) + vec3<f32>(self_.g1_.x) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_wedgeDot_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g9_.x, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g9_.y, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g9_.z, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g10_.y, other.g2_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g10_.x, other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g0_.y, -other.g7_.z, other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g7_.z, -other.g0_.y, -other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g7_.y, other.g7_.x, -other.g0_.y) + vec3<f32>(self_.g1_.x) * other.g8_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g1_ * vec2<f32>(-other.g6_.w) + self_.g1_ * vec2<f32>(other.g0_.y), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g10_.x, -other.g3_.z, other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g3_.z, -other.g10_.x, -other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g3_.y, other.g3_.x, -other.g10_.x) + vec3<f32>(self_.g1_.x) * other.g9_ + vec3<f32>(self_.g1_.x) * other.g4_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g5_.w, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, other.g5_.w, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, other.g5_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.y) * other.g3_, vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.y, other.g5_.z, -other.g5_.y, -other.g4_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g5_.z, other.g10_.y, other.g5_.x, -other.g4_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g5_.y, -other.g5_.x, other.g10_.y, -other.g4_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g9_.x, -other.g9_.y, -other.g9_.z, other.g10_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0), vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g2_.x, -other.g6_.z, other.g6_.y, other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g6_.z, -other.g2_.x, -other.g6_.x, other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g6_.y, other.g6_.x, -other.g2_.x, other.g7_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, other.g2_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g1_.x, -other.g1_.y, -other.g1_.z, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(-other.g6_.w, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, -other.g6_.w, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, -other.g6_.w) + vec3<f32>(self_.g1_.x) * other.g8_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g2_.y, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g8_.z, other.g2_.y, other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, other.g2_.y) + vec3<f32>(self_.g1_.y) * other.g7_ + vec3<f32>(self_.g1_.y) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g4_.z, -other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g4_.z, other.g0_.x, other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g4_.y, -other.g4_.x, other.g0_.x) - vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.y) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g1_ * vec2<f32>(other.g5_.w) + self_.g1_ * vec2<f32>(other.g0_.x));
}

fn sphere_wedgeDot_plane(self_: Sphere, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g0_.w, other.g0_.w, other.g0_.w, 0.0) - vec4<f32>(self_.g1_.y, self_.g1_.y, self_.g1_.y, self_.g1_.x) * other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_wedgeDot_roundPoint(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g1_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_wedgeDot_scalar(self_: Sphere, other: Scalar) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn sphere_wedgeDot_sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, other.g1_.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn antiScalar_antiWedge_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn antiScalar_antiWedge_circle(self_: AntiScalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec3<f32>(self_.g0_) * other.g2_);
}

fn antiScalar_antiWedge_dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec4<f32>(self_.g0_) * other.g2_);
}

fn antiScalar_antiWedge_dualNum(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_) * other.g0_);
}

fn antiScalar_antiWedge_flatPoint(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_) * other.g0_);
}

fn antiScalar_antiWedge_flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_) * other.g0_, vec4<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedge_line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedge_motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedge_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec2<f32>(self_.g0_) * other.g2_, vec3<f32>(self_.g0_) * other.g3_, vec3<f32>(self_.g0_) * other.g4_, vec4<f32>(self_.g0_) * other.g5_, vec4<f32>(self_.g0_) * other.g6_, vec3<f32>(self_.g0_) * other.g7_, vec3<f32>(self_.g0_) * other.g8_, vec3<f32>(self_.g0_) * other.g9_, vec2<f32>(self_.g0_) * other.g10_);
}

fn antiScalar_antiWedge_plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0_) * other.g0_);
}

fn antiScalar_antiWedge_roundPoint(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn antiScalar_antiWedge_scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn antiScalar_antiWedge_sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn circle_antiWedge_antiScalar(self_: Circle, other: AntiScalar) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec3<f32>(other.g0_));
}

fn circle_antiWedge_circle(self_: Circle, other: Circle) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g1_ + self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn circle_antiWedge_dipole(self_: Circle, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g2_.x - self_.g0_.y * other.g2_.y - self_.g0_.z * other.g2_.z - self_.g0_.w * other.g2_.w - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z - self_.g2_.x * other.g0_.x - self_.g2_.y * other.g0_.y - self_.g2_.z * other.g0_.z);
}

fn circle_antiWedge_dualNum(self_: Circle, other: DualNum) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), self_.g2_ * vec3<f32>(other.g0_.y));
}

fn circle_antiWedge_flatPoint(self_: Circle, other: FlatPoint) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z - self_.g0_.w * other.g0_.w);
}

fn circle_antiWedge_flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.w, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.w, 0.0, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedge_line(self_: Circle, other: Line) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn circle_antiWedge_motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.w), self_.g1_ * vec3<f32>(other.g0_.w), self_.g2_ * vec3<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedge_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g5_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g5_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g5_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g5_.w, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g3_.x, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g3_.y, 0.0) + vec2<f32>(self_.g2_.z) * vec2<f32>(-other.g3_.z, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g8_.z, 0.0, other.g8_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g7_ + self_.g1_ * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g7_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g7_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, 0.0, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, 0.0) + self_.g1_ * vec3<f32>(other.g10_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g10_.y) - vec3<f32>(self_.g0_.w) * other.g9_ + self_.g2_ * vec3<f32>(other.g10_.x), vec4<f32>(self_.g1_.x) * vec4<f32>(other.g10_.y, 0.0, 0.0, -other.g9_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g10_.y, 0.0, -other.g9_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g9_.z, other.g9_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g9_.z, 0.0, -other.g9_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, 0.0, 0.0), self_.g0_ * vec4<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), self_.g2_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle_antiWedge_plane(self_: Circle, other: Plane) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0));
}

fn circle_antiWedge_sphere(self_: Circle, other: Sphere) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g1_ * vec3<f32>(other.g1_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g0_.w) * other.g0_ + self_.g2_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g2_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0));
}

fn dipole_antiWedge_antiScalar(self_: Dipole, other: AntiScalar) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec4<f32>(other.g0_));
}

fn dipole_antiWedge_circle(self_: Dipole, other: Circle) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g2_.x - self_.g0_.y * other.g2_.y - self_.g0_.z * other.g2_.z - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z - self_.g2_.x * other.g0_.x - self_.g2_.y * other.g0_.y - self_.g2_.z * other.g0_.z - self_.g2_.w * other.g0_.w);
}

fn dipole_antiWedge_dualNum(self_: Dipole, other: DualNum) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), self_.g2_ * vec4<f32>(other.g0_.y));
}

fn dipole_antiWedge_flector(self_: Dipole, other: Flector) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g1_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, other.g1_.w));
}

fn dipole_antiWedge_line(self_: Dipole, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn dipole_antiWedge_motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w), self_.g1_ * vec3<f32>(other.g0_.w), self_.g2_ * vec4<f32>(other.g0_.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_antiWedge_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g8_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g8_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g8_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(-other.g6_.x, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(-other.g6_.y, 0.0) + vec2<f32>(self_.g2_.z) * vec2<f32>(-other.g6_.z, 0.0) + vec2<f32>(self_.g2_.w) * vec2<f32>(-other.g6_.w, 0.0), self_.g0_ * vec3<f32>(other.g10_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g9_.z, 0.0, -other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, 0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g10_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g2_.w) * other.g10_ * vec2<f32>(-1.0, 1.0), self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), self_.g2_ * vec4<f32>(other.g0_.y), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole_antiWedge_plane(self_: Dipole, other: Plane) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, other.g0_.w));
}

fn dipole_antiWedge_sphere(self_: Dipole, other: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.w) * other.g1_ * vec2<f32>(-1.0, 1.0));
}

fn dualNum_antiWedge_antiScalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(other.g0_));
}

fn dualNum_antiWedge_circle(self_: DualNum, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(self_.g0_.y) * other.g2_);
}

fn dualNum_antiWedge_dipole(self_: DualNum, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec4<f32>(self_.g0_.y) * other.g2_);
}

fn dualNum_antiWedge_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.y) * other.g0_);
}

fn dualNum_antiWedge_flatPoint(self_: DualNum, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_.y) * other.g0_);
}

fn dualNum_antiWedge_flector(self_: DualNum, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_.y) * other.g0_, vec4<f32>(self_.g0_.y) * other.g1_);
}

fn dualNum_antiWedge_line(self_: DualNum, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_);
}

fn dualNum_antiWedge_motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dualNum_antiWedge_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec2<f32>(self_.g0_.y) * other.g2_, vec3<f32>(self_.g0_.y) * other.g3_, vec3<f32>(self_.g0_.y) * other.g4_, vec4<f32>(self_.g0_.y) * other.g5_, vec4<f32>(self_.g0_.y) * other.g6_, vec3<f32>(self_.g0_.y) * other.g7_, vec3<f32>(self_.g0_.y) * other.g8_, vec3<f32>(self_.g0_.y) * other.g9_, vec2<f32>(self_.g0_.y) * other.g10_);
}

fn dualNum_antiWedge_plane(self_: DualNum, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0_.y) * other.g0_);
}

fn dualNum_antiWedge_roundPoint(self_: DualNum, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(self_.g0_.y) * other.g1_);
}

fn dualNum_antiWedge_scalar(self_: DualNum, other: Scalar) -> Scalar {
    return Scalar(self_.g0_.y * other.g0_);
}

fn dualNum_antiWedge_sphere(self_: DualNum, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(self_.g0_.y) * other.g1_);
}

fn flatPoint_antiWedge_antiScalar(self_: FlatPoint, other: AntiScalar) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(other.g0_));
}

fn flatPoint_antiWedge_circle(self_: FlatPoint, other: Circle) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z - self_.g0_.w * other.g0_.w);
}

fn flatPoint_antiWedge_dualNum(self_: FlatPoint, other: DualNum) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(other.g0_.y));
}

fn flatPoint_antiWedge_flector(self_: FlatPoint, other: Flector) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.w));
}

fn flatPoint_antiWedge_motor(self_: FlatPoint, other: Motor) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(other.g0_.w));
}

fn flatPoint_antiWedge_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g6_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g6_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g6_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g6_.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g10_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.y), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flatPoint_antiWedge_plane(self_: FlatPoint, other: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w));
}

fn flatPoint_antiWedge_sphere(self_: FlatPoint, other: Sphere) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0));
}

fn flector_antiWedge_antiScalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec4<f32>(other.g0_));
}

fn flector_antiWedge_circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedge_dipole(self_: Flector, other: Dipole) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g1_.w) * other.g0_, vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g2_.w));
}

fn flector_antiWedge_dualNum(self_: Flector, other: DualNum) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(other.g0_.y), self_.g1_ * vec4<f32>(other.g0_.y));
}

fn flector_antiWedge_flatPoint(self_: Flector, other: FlatPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn flector_antiWedge_flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g1_.w) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedge_line(self_: Flector, other: Line) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0));
}

fn flector_antiWedge_motor(self_: Flector, other: Motor) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(other.g0_.w) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), self_.g1_ * vec4<f32>(other.g0_.w));
}

fn flector_antiWedge_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g6_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g6_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g6_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(-other.g6_.w, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.w) * vec2<f32>(other.g2_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g10_.x) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g4_.z, 0.0, -other.g4_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, 0.0) - vec3<f32>(self_.g1_.w) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g0_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, -other.g5_.w), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g1_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), self_.g0_ * vec4<f32>(other.g0_.y) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g8_.z, 0.0, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, 0.0, -other.g7_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, 0.0), vec4<f32>(0.0) - self_.g1_ * vec4<f32>(other.g10_.x), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g9_.z, 0.0, other.g9_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, 0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g10_.y) - vec3<f32>(self_.g1_.w) * other.g9_, vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.y), vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.y));
}

fn flector_antiWedge_plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g1_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector_antiWedge_roundPoint(self_: Flector, other: RoundPoint) -> Scalar {
    return Scalar(self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z + self_.g1_.w * other.g1_.x);
}

fn flector_antiWedge_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1_ * vec4<f32>(other.g1_.x), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g1_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedge_antiScalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn line_antiWedge_circle(self_: Line, other: Circle) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn line_antiWedge_dipole(self_: Line, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn line_antiWedge_dualNum(self_: Line, other: DualNum) -> Line {
    return Line(self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y));
}

fn line_antiWedge_flector(self_: Line, other: Flector) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.w, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.w, 0.0, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0));
}

fn line_antiWedge_line(self_: Line, other: Line) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn line_antiWedge_motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w), self_.g1_ * vec3<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedge_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g3_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g3_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g3_.z, 0.0), self_.g0_ * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g7_.z), self_.g0_ * vec3<f32>(other.g10_.x), self_.g1_ * vec3<f32>(other.g10_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.y, 0.0, 0.0, -other.g9_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g10_.y, 0.0, -other.g9_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g9_.z, other.g9_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g9_.z, 0.0, -other.g9_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, 0.0, 0.0), vec4<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiWedge_plane(self_: Line, other: Plane) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0));
}

fn line_antiWedge_sphere(self_: Line, other: Sphere) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(other.g1_.x), self_.g1_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0));
}

fn motor_antiWedge_antiScalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn motor_antiWedge_circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(self_.g0_.w) * other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedge_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.w) * other.g1_, vec4<f32>(self_.g0_.w) * other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedge_dualNum(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * other.g0_, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), self_.g1_ * vec3<f32>(other.g0_.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedge_flatPoint(self_: Motor, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_.w) * other.g0_);
}

fn motor_antiWedge_flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.w, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.w, 0.0, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g0_.w) * other.g0_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0), vec4<f32>(self_.g0_.w) * other.g1_);
}

fn motor_antiWedge_line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedge_motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.w) * other.g1_ + self_.g1_ * vec3<f32>(other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor_antiWedge_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g0_ + vec2<f32>(self_.g1_.x) * vec2<f32>(-other.g3_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(-other.g3_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(-other.g3_.z, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g0_.w) * other.g1_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g0_.w) * other.g2_ + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g7_.z), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g10_.x) + vec3<f32>(self_.g0_.w) * other.g3_, vec3<f32>(self_.g0_.w) * other.g4_ + self_.g1_ * vec3<f32>(other.g10_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g10_.y, 0.0, 0.0, -other.g9_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g10_.y, 0.0, -other.g9_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g0_.w) * other.g5_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g9_.z, other.g9_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g9_.z, 0.0, -other.g9_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, 0.0, 0.0), vec4<f32>(self_.g0_.w) * other.g6_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y) + vec3<f32>(self_.g0_.w) * other.g7_, vec3<f32>(self_.g0_.w) * other.g8_ + self_.g1_ * vec3<f32>(other.g0_.y), vec3<f32>(self_.g0_.w) * other.g9_, vec2<f32>(self_.g0_.w) * other.g10_);
}

fn motor_antiWedge_plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g0_.w) * other.g0_);
}

fn motor_antiWedge_roundPoint(self_: Motor, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.w) * other.g1_);
}

fn motor_antiWedge_scalar(self_: Motor, other: Scalar) -> Scalar {
    return Scalar(self_.g0_.w * other.g0_);
}

fn motor_antiWedge_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x), self_.g1_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g1_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.w) * other.g1_);
}

fn multiVector_antiWedge_antiScalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec2<f32>(other.g0_), self_.g3_ * vec3<f32>(other.g0_), self_.g4_ * vec3<f32>(other.g0_), self_.g5_ * vec4<f32>(other.g0_), self_.g6_ * vec4<f32>(other.g0_), self_.g7_ * vec3<f32>(other.g0_), self_.g8_ * vec3<f32>(other.g0_), self_.g9_ * vec3<f32>(other.g0_), self_.g10_ * vec2<f32>(other.g0_));
}

fn multiVector_antiWedge_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g5_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g5_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g2_.z, -other.g2_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g2_.z, 0.0, other.g2_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g2_.y, -other.g2_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g1_ + self_.g7_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g1_.z), vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g1_, vec3<f32>(0.0) - self_.g9_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g2_ + vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec4<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(self_.g0_.y) * other.g2_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_antiWedge_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g2_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g2_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g2_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g2_.w, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g7_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g7_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g8_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g8_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g10_.y) * other.g0_, vec2<f32>(self_.g9_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g10_ * vec2<f32>(other.g2_.w), vec3<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec4<f32>(self_.g0_.y) * other.g2_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_antiWedge_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.y) * other.g0_, self_.g1_ * vec3<f32>(other.g0_.y), self_.g2_ * vec2<f32>(other.g0_.y), self_.g3_ * vec3<f32>(other.g0_.y), self_.g4_ * vec3<f32>(other.g0_.y), self_.g5_ * vec4<f32>(other.g0_.y), self_.g6_ * vec4<f32>(other.g0_.y), self_.g7_ * vec3<f32>(other.g0_.y), self_.g8_ * vec3<f32>(other.g0_.y), self_.g9_ * vec3<f32>(other.g0_.y), self_.g10_ * vec2<f32>(other.g0_.y));
}

fn multiVector_antiWedge_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g0_.w, 0.0), vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g10_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0_.y) * other.g0_, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_antiWedge_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g1_.w, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g0_.w, 0.0), self_.g3_ * vec3<f32>(other.g1_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g10_ * vec2<f32>(other.g0_.w), vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.w) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec4<f32>(self_.g0_.y) * other.g0_ + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g1_.w, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g1_.w, 0.0, -other.g1_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g1_.w, -other.g1_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0), vec4<f32>(self_.g10_.x) * other.g1_, vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), self_.g9_ * vec3<f32>(other.g1_.w) - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.w));
}

fn multiVector_antiWedge_line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g0_.z, 0.0), vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g0_, vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(self_.g10_.x) * other.g0_, vec3<f32>(self_.g10_.x) * other.g1_, vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g1_, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_antiWedge_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g0_.z, 0.0), self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g2_ * vec2<f32>(other.g0_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z), self_.g3_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), self_.g4_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g10_.x) * other.g1_, self_.g5_ * vec4<f32>(other.g0_.w) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), self_.g6_ * vec4<f32>(other.g0_.w), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z) + self_.g7_ * vec3<f32>(other.g0_.w), vec3<f32>(self_.g0_.y) * other.g1_ + self_.g8_ * vec3<f32>(other.g0_.w), self_.g9_ * vec3<f32>(other.g0_.w), self_.g10_ * vec2<f32>(other.g0_.w));
}

fn multiVector_antiWedge_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g0_.y) * other.g0_ + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g9_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g9_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g9_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g10_.y, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(other.g10_.x, 0.0) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g8_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g8_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g8_.z, 0.0) + vec2<f32>(self_.g4_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g4_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g4_.z) * vec2<f32>(-other.g7_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(-other.g6_.x, 0.0) + vec2<f32>(self_.g5_.y) * vec2<f32>(-other.g6_.y, 0.0) + vec2<f32>(self_.g5_.z) * vec2<f32>(-other.g6_.z, 0.0) + vec2<f32>(self_.g5_.w) * vec2<f32>(-other.g6_.w, 0.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g5_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g5_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g5_.z, 0.0) + vec2<f32>(self_.g6_.w) * vec2<f32>(-other.g5_.w, 0.0) + vec2<f32>(self_.g7_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g7_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g7_.z) * vec2<f32>(-other.g4_.z, 0.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(-other.g3_.x, 0.0) + vec2<f32>(self_.g8_.y) * vec2<f32>(-other.g3_.y, 0.0) + vec2<f32>(self_.g8_.z) * vec2<f32>(-other.g3_.z, 0.0) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g2_.y, 0.0) + vec2<f32>(self_.g10_.y) * vec2<f32>(other.g2_.x, 0.0), vec3<f32>(self_.g0_.y) * other.g1_ + self_.g1_ * vec3<f32>(other.g0_.y) + self_.g3_ * vec3<f32>(other.g10_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g9_.z, other.g9_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g9_.z, 0.0, -other.g9_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g9_.y, other.g9_.x, 0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g10_.x) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g8_.z, -other.g8_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g8_.z, 0.0, other.g8_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g8_.y, -other.g8_.x, 0.0) + vec3<f32>(self_.g6_.w) * other.g7_ + self_.g7_ * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g8_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g8_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g8_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g4_.z, 0.0, -other.g4_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, 0.0) + vec3<f32>(self_.g10_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g10_.y) * other.g3_, vec2<f32>(self_.g0_.y) * other.g2_ + self_.g2_ * vec2<f32>(other.g0_.y) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g9_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g9_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g9_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g5_.w) * other.g10_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g7_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g7_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g7_.z, 0.0) - vec2<f32>(self_.g7_.x) * vec2<f32>(other.g6_.x, other.g8_.x) - vec2<f32>(self_.g7_.y) * vec2<f32>(other.g6_.y, other.g8_.y) - vec2<f32>(self_.g7_.z) * vec2<f32>(other.g6_.z, other.g8_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g10_ * vec2<f32>(other.g5_.w), vec3<f32>(self_.g0_.y) * other.g3_ + self_.g3_ * vec3<f32>(other.g0_.y) + vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g9_.z, 0.0, other.g9_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, 0.0) + self_.g7_ * vec3<f32>(other.g10_.x) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0) + vec3<f32>(self_.g10_.x) * other.g7_, vec3<f32>(self_.g0_.y) * other.g4_ + self_.g4_ * vec3<f32>(other.g0_.y) + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g10_.y) - vec3<f32>(self_.g6_.w) * other.g9_ + self_.g8_ * vec3<f32>(other.g10_.x) - self_.g9_ * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g10_.x) * other.g8_ + vec3<f32>(self_.g10_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.y) * other.g5_ + self_.g5_ * vec4<f32>(other.g0_.y) + vec4<f32>(self_.g7_.x) * vec4<f32>(other.g10_.y, 0.0, 0.0, -other.g9_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g10_.y, 0.0, -other.g9_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g10_.y, -other.g9_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g9_.z, other.g9_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g9_.z, 0.0, -other.g9_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g9_.y, other.g9_.x, 0.0, 0.0) + vec4<f32>(self_.g9_.x) * vec4<f32>(0.0, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g9_.y) * vec4<f32>(-other.g8_.z, 0.0, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g9_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, 0.0, -other.g7_.z) + vec4<f32>(self_.g10_.y) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, 0.0), vec4<f32>(self_.g0_.y) * other.g6_ + self_.g6_ * vec4<f32>(other.g0_.y) + vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g9_.x) * vec4<f32>(-other.g10_.x, -other.g10_.x, -other.g10_.x, 0.0) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, other.g10_.y) + vec4<f32>(self_.g10_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x), vec3<f32>(self_.g0_.y) * other.g7_ + self_.g7_ * vec3<f32>(other.g0_.y) + vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g9_.z, 0.0, other.g9_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, 0.0), vec3<f32>(self_.g0_.y) * other.g8_ + self_.g8_ * vec3<f32>(other.g0_.y) + self_.g9_ * vec3<f32>(other.g10_.y) - vec3<f32>(self_.g10_.y) * other.g9_, vec3<f32>(self_.g0_.y) * other.g9_ + self_.g9_ * vec3<f32>(other.g0_.y), vec2<f32>(self_.g0_.y) * other.g10_ + self_.g10_ * vec2<f32>(other.g0_.y));
}

fn multiVector_antiWedge_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g0_.w, 0.0), self_.g3_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g6_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g7_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g10_.x) * other.g0_, vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g9_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g10_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.w));
}

fn multiVector_antiWedge_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g9_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g9_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g9_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g10_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g10_.y) * vec2<f32>(other.g1_.x, 0.0), vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(self_.g0_.y) * other.g1_, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_antiWedge_scalar(self_: MultiVector, other: Scalar) -> Scalar {
    return Scalar(self_.g0_.y * other.g0_);
}

fn multiVector_antiWedge_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, 0.0) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, 0.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g2_.y) * vec2<f32>(other.g1_.x, 0.0), self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g4_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g4_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g4_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) - vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x), vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g5_.w) * other.g1_ * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g6_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g6_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g6_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + self_.g7_ * vec3<f32>(other.g1_.x), vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g6_.w) * other.g0_ + self_.g8_ * vec3<f32>(other.g1_.x), vec4<f32>(self_.g7_.x) * vec4<f32>(other.g1_.y, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g7_.y) * vec4<f32>(0.0, other.g1_.y, 0.0, -other.g0_.y) + vec4<f32>(self_.g7_.z) * vec4<f32>(0.0, 0.0, other.g1_.y, -other.g0_.z) + vec4<f32>(self_.g8_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g8_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g8_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0), vec4<f32>(self_.g9_.x, self_.g9_.y, self_.g9_.z, self_.g9_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g10_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.y) + vec4<f32>(self_.g10_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x), vec3<f32>(self_.g9_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g9_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g9_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g9_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g10_.y) * other.g0_, vec3<f32>(self_.g0_.y) * other.g0_, vec2<f32>(self_.g0_.y) * other.g1_);
}

fn plane_antiWedge_antiScalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(other.g0_));
}

fn plane_antiWedge_circle(self_: Plane, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0));
}

fn plane_antiWedge_dipole(self_: Plane, other: Dipole) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g2_.w));
}

fn plane_antiWedge_dualNum(self_: Plane, other: DualNum) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(other.g0_.y));
}

fn plane_antiWedge_flatPoint(self_: Plane, other: FlatPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w));
}

fn plane_antiWedge_flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane_antiWedge_line(self_: Plane, other: Line) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0));
}

fn plane_antiWedge_motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), self_.g0_ * vec4<f32>(other.g0_.w));
}

fn plane_antiWedge_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g0_.w) * vec2<f32>(other.g2_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g4_.z, 0.0, -other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, 0.0) - vec3<f32>(self_.g0_.w) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g5_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g0_.w) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g8_.z, 0.0, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, 0.0, -other.g7_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, 0.0), vec4<f32>(0.0) - self_.g0_ * vec4<f32>(other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, 0.0, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g10_.y) - vec3<f32>(self_.g0_.w) * other.g9_, vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.y), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.y));
}

fn plane_antiWedge_plane(self_: Plane, other: Plane) -> Line {
    return Line(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g0_.w) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z));
}

fn plane_antiWedge_roundPoint(self_: Plane, other: RoundPoint) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g0_.w * other.g1_.x);
}

fn plane_antiWedge_sphere(self_: Plane, other: Sphere) -> Circle {
    return Circle(vec4<f32>(0.0) - self_.g0_ * vec4<f32>(other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g0_.w) * other.g0_);
}

fn roundPoint_antiWedge_antiScalar(self_: RoundPoint, other: AntiScalar) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn roundPoint_antiWedge_dualNum(self_: RoundPoint, other: DualNum) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec2<f32>(other.g0_.y));
}

fn roundPoint_antiWedge_flector(self_: RoundPoint, other: Flector) -> Scalar {
    return Scalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z + self_.g1_.x * other.g1_.w);
}

fn roundPoint_antiWedge_motor(self_: RoundPoint, other: Motor) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_.w), self_.g1_ * vec2<f32>(other.g0_.w));
}

fn roundPoint_antiWedge_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g9_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g9_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g9_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g10_.y, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g10_.x, 0.0), self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec2<f32>(other.g0_.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_antiWedge_plane(self_: RoundPoint, other: Plane) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g1_.x * other.g0_.w);
}

fn roundPoint_antiWedge_sphere(self_: RoundPoint, other: Sphere) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g1_.x * other.g1_.y + self_.g1_.y * other.g1_.x);
}

fn scalar_antiWedge_antiScalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn scalar_antiWedge_dualNum(self_: Scalar, other: DualNum) -> Scalar {
    return Scalar(self_.g0_ * other.g0_.y);
}

fn scalar_antiWedge_motor(self_: Scalar, other: Motor) -> Scalar {
    return Scalar(self_.g0_ * other.g0_.w);
}

fn scalar_antiWedge_multiVector(self_: Scalar, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_ * other.g0_.y);
}

fn sphere_antiWedge_antiScalar(self_: Sphere, other: AntiScalar) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn sphere_antiWedge_circle(self_: Sphere, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * other.g2_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g2_.z, -other.g2_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g2_.z, 0.0, other.g2_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g2_.y, -other.g2_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0));
}

fn sphere_antiWedge_dipole(self_: Sphere, other: Dipole) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) - vec3<f32>(self_.g1_.y) * other.g0_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(other.g2_.w));
}

fn sphere_antiWedge_dualNum(self_: Sphere, other: DualNum) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec2<f32>(other.g0_.y));
}

fn sphere_antiWedge_flatPoint(self_: Sphere, other: FlatPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w));
}

fn sphere_antiWedge_flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g0_.z) + self_.g1_ * vec2<f32>(other.g0_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), self_.g0_ * vec3<f32>(other.g1_.w) - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere_antiWedge_line(self_: Sphere, other: Line) -> Dipole {
    return Dipole(vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g1_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0));
}

fn sphere_antiWedge_motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g1_.x) * other.g1_, vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g1_.z, -other.g1_.y, -other.g0_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g1_.z, 0.0, other.g1_.x, -other.g0_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g1_.y, -other.g1_.x, 0.0, -other.g0_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.w), self_.g1_ * vec2<f32>(other.g0_.w));
}

fn sphere_antiWedge_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g1_.z, 0.0) + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g2_.y, 0.0) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g2_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g4_.z, other.g4_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g4_.z, 0.0, -other.g4_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g4_.y, other.g4_.x, 0.0) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) - vec3<f32>(self_.g1_.y) * other.g3_, vec2<f32>(self_.g0_.x) * vec2<f32>(other.g3_.x, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g3_.y, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g3_.z, -other.g5_.z) + self_.g1_ * vec2<f32>(other.g5_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g6_.z, other.g6_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g6_.z, 0.0, -other.g6_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g6_.y, other.g6_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g7_, vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g6_.w) + vec3<f32>(self_.g1_.x) * other.g8_ + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g8_.z, -other.g8_.y, -other.g7_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g8_.z, 0.0, other.g8_.x, -other.g7_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g8_.y, -other.g8_.x, 0.0, -other.g7_.z) + vec4<f32>(self_.g1_.y) * vec4<f32>(other.g7_.x, other.g7_.y, other.g7_.z, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g10_.x, -other.g10_.x, -other.g10_.x, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g9_.x, other.g9_.y, other.g9_.z, other.g10_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g9_.z, -other.g9_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g9_.z, 0.0, other.g9_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g9_.y, -other.g9_.x, 0.0), self_.g0_ * vec3<f32>(other.g10_.y) - vec3<f32>(self_.g1_.y) * other.g9_, self_.g0_ * vec3<f32>(other.g0_.y), self_.g1_ * vec2<f32>(other.g0_.y));
}

fn sphere_antiWedge_plane(self_: Sphere, other: Plane) -> Circle {
    return Circle(vec4<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_ * vec3<f32>(other.g0_.w) - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z));
}

fn sphere_antiWedge_roundPoint(self_: Sphere, other: RoundPoint) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g1_.x * other.g1_.y + self_.g1_.y * other.g1_.x);
}

fn sphere_antiWedge_sphere(self_: Sphere, other: Sphere) -> Circle {
    return Circle(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(-other.g1_.x, -other.g1_.x, -other.g1_.x, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.y) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), self_.g0_ * vec3<f32>(other.g1_.y) - vec3<f32>(self_.g1_.y) * other.g0_);
}

fn antiScalar_wedge_dualNum(self_: AntiScalar, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_.x);
}

fn antiScalar_wedge_multiVector(self_: AntiScalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_.x);
}

fn antiScalar_wedge_scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn circle_wedge_dipole(self_: Circle, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g2_.x - self_.g0_.y * other.g2_.y - self_.g0_.z * other.g2_.z - self_.g0_.w * other.g2_.w - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z - self_.g2_.x * other.g0_.x - self_.g2_.y * other.g0_.y - self_.g2_.z * other.g0_.z);
}

fn circle_wedge_dualNum(self_: Circle, other: DualNum) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), self_.g2_ * vec3<f32>(other.g0_.x));
}

fn circle_wedge_flatPoint(self_: Circle, other: FlatPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z - self_.g0_.w * other.g0_.w);
}

fn circle_wedge_flector(self_: Circle, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z - self_.g0_.w * other.g0_.w);
}

fn circle_wedge_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g5_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g5_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g5_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g5_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g3_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g3_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g3_.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), self_.g2_ * vec3<f32>(other.g0_.x), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g2_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - self_.g2_ * vec3<f32>(other.g2_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn circle_wedge_roundPoint(self_: Circle, other: RoundPoint) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g2_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g0_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn circle_wedge_scalar(self_: Circle, other: Scalar) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec3<f32>(other.g0_));
}

fn dipole_wedge_circle(self_: Dipole, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g2_.x - self_.g0_.y * other.g2_.y - self_.g0_.z * other.g2_.z - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z - self_.g2_.x * other.g0_.x - self_.g2_.y * other.g0_.y - self_.g2_.z * other.g0_.z - self_.g2_.w * other.g0_.w);
}

fn dipole_wedge_dipole(self_: Dipole, other: Dipole) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.w) * other.g1_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn dipole_wedge_dualNum(self_: Dipole, other: DualNum) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), self_.g2_ * vec4<f32>(other.g0_.x));
}

fn dipole_wedge_flatPoint(self_: Dipole, other: FlatPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z));
}

fn dipole_wedge_flector(self_: Dipole, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.w, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g0_.w, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g0_.w, -other.g0_.z));
}

fn dipole_wedge_line(self_: Dipole, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn dipole_wedge_motor(self_: Dipole, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn dipole_wedge_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g8_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g6_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g6_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g6_.z) + vec2<f32>(self_.g2_.w) * vec2<f32>(0.0, -other.g6_.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), self_.g2_ * vec4<f32>(other.g0_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g2_.x, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g2_.x, 0.0, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g2_.x, -other.g1_.z), self_.g0_ * vec3<f32>(other.g2_.y) + vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g2_.x) - vec3<f32>(self_.g2_.w) * other.g1_, self_.g1_ * vec3<f32>(other.g2_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, 0.0, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, 0.0) + self_.g1_ * vec3<f32>(other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g3_.z, 0.0, other.g3_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, 0.0) + vec3<f32>(self_.g2_.w) * other.g4_, vec2<f32>(self_.g0_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g0_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g0_.z) * vec2<f32>(-other.g4_.z, 0.0) - vec2<f32>(self_.g1_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g1_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g1_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g2_.z) * vec2<f32>(0.0, -other.g4_.z));
}

fn dipole_wedge_roundPoint(self_: Dipole, other: RoundPoint) -> Circle {
    return Circle(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z), self_.g0_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g2_.w) * other.g0_, self_.g1_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g2_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g2_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g2_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0));
}

fn dipole_wedge_scalar(self_: Dipole, other: Scalar) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec4<f32>(other.g0_));
}

fn dualNum_wedge_antiScalar(self_: DualNum, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_);
}

fn dualNum_wedge_circle(self_: DualNum, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g2_);
}

fn dualNum_wedge_dipole(self_: DualNum, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec4<f32>(self_.g0_.x) * other.g2_);
}

fn dualNum_wedge_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.x));
}

fn dualNum_wedge_flatPoint(self_: DualNum, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_.x) * other.g0_);
}

fn dualNum_wedge_flector(self_: DualNum, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_.x) * other.g0_, vec4<f32>(self_.g0_.x) * other.g1_);
}

fn dualNum_wedge_line(self_: DualNum, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_);
}

fn dualNum_wedge_motor(self_: DualNum, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_);
}

fn dualNum_wedge_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.x), vec3<f32>(self_.g0_.x) * other.g1_, vec2<f32>(self_.g0_.x) * other.g2_, vec3<f32>(self_.g0_.x) * other.g3_, vec3<f32>(self_.g0_.x) * other.g4_, vec4<f32>(self_.g0_.x) * other.g5_, vec4<f32>(self_.g0_.x) * other.g6_, vec3<f32>(self_.g0_.x) * other.g7_, vec3<f32>(self_.g0_.x) * other.g8_, vec3<f32>(self_.g0_.x) * other.g9_, vec2<f32>(self_.g0_.x) * other.g10_);
}

fn dualNum_wedge_plane(self_: DualNum, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * other.g0_);
}

fn dualNum_wedge_roundPoint(self_: DualNum, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(self_.g0_.x) * other.g1_);
}

fn dualNum_wedge_scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(other.g0_));
}

fn dualNum_wedge_sphere(self_: DualNum, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(self_.g0_.x) * other.g1_);
}

fn flatPoint_wedge_circle(self_: FlatPoint, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z - self_.g0_.w * other.g0_.w);
}

fn flatPoint_wedge_dipole(self_: FlatPoint, other: Dipole) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0));
}

fn flatPoint_wedge_dualNum(self_: FlatPoint, other: DualNum) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(other.g0_.x));
}

fn flatPoint_wedge_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g6_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g6_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g6_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g6_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.x), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, 0.0, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g4_, vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g4_.z));
}

fn flatPoint_wedge_roundPoint(self_: FlatPoint, other: RoundPoint) -> Line {
    return Line(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g0_.w) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0));
}

fn flatPoint_wedge_scalar(self_: FlatPoint, other: Scalar) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(other.g0_));
}

fn flector_wedge_circle(self_: Flector, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z - self_.g0_.w * other.g0_.w);
}

fn flector_wedge_dipole(self_: Flector, other: Dipole) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g0_.w) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0));
}

fn flector_wedge_dualNum(self_: Flector, other: DualNum) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(other.g0_.x), self_.g1_ * vec4<f32>(other.g0_.x));
}

fn flector_wedge_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g6_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g6_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g6_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, -other.g6_.w) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g2_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec4<f32>(other.g0_.x), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g2_.x) - vec3<f32>(self_.g0_.w) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g3_.z, 0.0, other.g3_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, 0.0) + vec3<f32>(self_.g0_.w) * other.g4_ + vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z) * vec3<f32>(other.g0_.x), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g1_.w) * vec2<f32>(0.0, other.g0_.x));
}

fn flector_wedge_roundPoint(self_: Flector, other: RoundPoint) -> Motor {
    return Motor(self_.g0_.xyzx * vec4<f32>(other.g1_.x, other.g1_.x, other.g1_.x, 0.0) + vec4<f32>(self_.g0_.w) * vec4<f32>(-other.g0_.x, -other.g0_.y, -other.g0_.z, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0_.z) + vec4<f32>(self_.g1_.w) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0));
}

fn flector_wedge_scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec4<f32>(other.g0_));
}

fn line_wedge_dipole(self_: Line, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn line_wedge_dualNum(self_: Line, other: DualNum) -> Line {
    return Line(self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x));
}

fn line_wedge_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g3_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g3_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g3_.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - self_.g1_ * vec3<f32>(other.g2_.x), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn line_wedge_roundPoint(self_: Line, other: RoundPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g1_.x, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, -other.g1_.x, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, -other.g1_.x, other.g0_.z));
}

fn line_wedge_scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn motor_wedge_dipole(self_: Motor, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn motor_wedge_dualNum(self_: Motor, other: DualNum) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x));
}

fn motor_wedge_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g3_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g3_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g3_.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - self_.g1_ * vec3<f32>(other.g2_.x), vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z));
}

fn motor_wedge_roundPoint(self_: Motor, other: RoundPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, 0.0) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, 0.0) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(-other.g1_.x, 0.0, 0.0, other.g0_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(0.0, -other.g1_.x, 0.0, other.g0_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(0.0, 0.0, -other.g1_.x, other.g0_.z));
}

fn motor_wedge_scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_));
}

fn multiVector_wedge_antiScalar(self_: MultiVector, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_);
}

fn multiVector_wedge_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(self_.g0_.x) * other.g2_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g2_.x) * other.g2_ - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g1_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g2_ * vec2<f32>(other.g0_.w));
}

fn multiVector_wedge_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g2_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g2_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g2_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, -other.g2_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec4<f32>(self_.g0_.x) * other.g2_, vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g2_.y) * other.g0_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g2_.y) * other.g1_, vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + self_.g4_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g5_.w) * other.g1_, vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g1_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g0_.x, other.g2_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g0_.y, other.g2_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g0_.z, other.g2_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn multiVector_wedge_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.x), self_.g1_ * vec3<f32>(other.g0_.x), self_.g2_ * vec2<f32>(other.g0_.x), self_.g3_ * vec3<f32>(other.g0_.x), self_.g4_ * vec3<f32>(other.g0_.x), self_.g5_ * vec4<f32>(other.g0_.x), self_.g6_ * vec4<f32>(other.g0_.x), self_.g7_ * vec3<f32>(other.g0_.x), self_.g8_ * vec3<f32>(other.g0_.x), self_.g9_ * vec3<f32>(other.g0_.x), self_.g10_ * vec2<f32>(other.g0_.x));
}

fn multiVector_wedge_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0_.x) * other.g0_, vec4<f32>(0.0), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g4_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn multiVector_wedge_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g0_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, -other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0_.x) * other.g0_, vec4<f32>(0.0), vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g1_.x, other.g1_.y, other.g1_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0) + self_.g4_ * vec3<f32>(other.g0_.w), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.w) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z));
}

fn multiVector_wedge_line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.x) * other.g1_, vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn multiVector_wedge_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, -other.g1_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g0_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g0_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * other.g1_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) + vec3<f32>(self_.g2_.x) * other.g1_, vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, -other.g1_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, -other.g1_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, -other.g1_.z));
}

fn multiVector_wedge_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * other.g0_ + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g10_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g10_.x) + vec2<f32>(self_.g3_.x) * vec2<f32>(0.0, -other.g8_.x) + vec2<f32>(self_.g3_.y) * vec2<f32>(0.0, -other.g8_.y) + vec2<f32>(self_.g3_.z) * vec2<f32>(0.0, -other.g8_.z) + vec2<f32>(self_.g4_.x) * vec2<f32>(0.0, -other.g7_.x) + vec2<f32>(self_.g4_.y) * vec2<f32>(0.0, -other.g7_.y) + vec2<f32>(self_.g4_.z) * vec2<f32>(0.0, -other.g7_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g6_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g6_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g6_.z) + vec2<f32>(self_.g5_.w) * vec2<f32>(0.0, -other.g6_.w) + vec2<f32>(self_.g6_.x) * vec2<f32>(0.0, -other.g5_.x) + vec2<f32>(self_.g6_.y) * vec2<f32>(0.0, -other.g5_.y) + vec2<f32>(self_.g6_.z) * vec2<f32>(0.0, -other.g5_.z) + vec2<f32>(self_.g6_.w) * vec2<f32>(0.0, -other.g5_.w) + vec2<f32>(self_.g7_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g7_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g7_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, -other.g3_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, -other.g3_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, -other.g3_.z) + vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(0.0, other.g2_.y) + vec2<f32>(self_.g10_.y) * vec2<f32>(0.0, other.g2_.x), vec3<f32>(self_.g0_.x) * other.g1_ + self_.g1_ * vec3<f32>(other.g0_.x), vec2<f32>(self_.g0_.x) * other.g2_ + self_.g2_ * vec2<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * other.g3_ - self_.g1_ * vec3<f32>(other.g2_.x) + vec3<f32>(self_.g2_.x) * other.g1_ + self_.g3_ * vec3<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * other.g4_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0) + self_.g4_ * vec3<f32>(other.g0_.x), vec4<f32>(self_.g0_.x) * other.g5_ + vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g2_.y, other.g2_.y, other.g2_.y, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) - vec4<f32>(self_.g2_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, other.g2_.x) + self_.g5_ * vec4<f32>(other.g0_.x), vec4<f32>(self_.g0_.x) * other.g6_ + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g1_.y) * vec4<f32>(-other.g3_.z, 0.0, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g1_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, 0.0, -other.g4_.z) + vec4<f32>(self_.g2_.x) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0) + vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, -other.g1_.z, other.g1_.y, 0.0) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g1_.z, 0.0, -other.g1_.x, 0.0) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g1_.y, other.g1_.x, 0.0, 0.0) + vec4<f32>(self_.g4_.x) * vec4<f32>(other.g2_.x, 0.0, 0.0, -other.g1_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, other.g2_.x, 0.0, -other.g1_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, other.g2_.x, -other.g1_.z) + self_.g6_ * vec4<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * other.g7_ - self_.g1_ * vec3<f32>(other.g5_.w) + vec3<f32>(self_.g2_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g2_.y) * other.g3_ + self_.g3_ * vec3<f32>(other.g2_.y) + vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g2_.x) - vec3<f32>(self_.g5_.w) * other.g1_ + self_.g7_ * vec3<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * other.g8_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g5_.z, 0.0, -other.g5_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, 0.0) + vec3<f32>(self_.g2_.y) * other.g4_ + self_.g4_ * vec3<f32>(other.g2_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + self_.g8_ * vec3<f32>(other.g0_.x), vec3<f32>(self_.g0_.x) * other.g9_ + vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(-other.g7_.z, 0.0, other.g7_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, 0.0) + vec3<f32>(self_.g2_.x) * other.g8_ - vec3<f32>(self_.g2_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z) + vec3<f32>(self_.g3_.x) * vec3<f32>(0.0, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g3_.y) * vec3<f32>(other.g5_.z, 0.0, -other.g5_.x) + vec3<f32>(self_.g3_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, 0.0) + self_.g4_ * vec3<f32>(other.g5_.w) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g3_.z, -other.g3_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g3_.z, 0.0, other.g3_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g3_.y, -other.g3_.x, 0.0) + vec3<f32>(self_.g5_.w) * other.g4_ + vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g2_.y) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) - self_.g8_ * vec3<f32>(other.g2_.x) + self_.g9_ * vec3<f32>(other.g0_.x), vec2<f32>(self_.g0_.x) * other.g10_ + vec2<f32>(self_.g1_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g2_ * vec2<f32>(other.g6_.w) + vec2<f32>(self_.g3_.x) * vec2<f32>(-other.g4_.x, 0.0) + vec2<f32>(self_.g3_.y) * vec2<f32>(-other.g4_.y, 0.0) + vec2<f32>(self_.g3_.z) * vec2<f32>(-other.g4_.z, 0.0) - vec2<f32>(self_.g4_.x) * vec2<f32>(other.g3_.x, other.g5_.x) - vec2<f32>(self_.g4_.y) * vec2<f32>(other.g3_.y, other.g5_.y) - vec2<f32>(self_.g4_.z) * vec2<f32>(other.g3_.z, other.g5_.z) + vec2<f32>(self_.g5_.x) * vec2<f32>(0.0, -other.g4_.x) + vec2<f32>(self_.g5_.y) * vec2<f32>(0.0, -other.g4_.y) + vec2<f32>(self_.g5_.z) * vec2<f32>(0.0, -other.g4_.z) + vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g1_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g1_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g1_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g2_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g1_.z) + self_.g10_ * vec2<f32>(other.g0_.x));
}

fn multiVector_wedge_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g0_.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g0_.w));
}

fn multiVector_wedge_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g9_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g9_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g9_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g10_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g10_.y) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(self_.g0_.x) * other.g1_, vec3<f32>(0.0) - self_.g1_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g2_.x) * other.g0_, vec3<f32>(self_.g1_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g1_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, self_.g1_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g2_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) - vec4<f32>(self_.g2_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x), vec4<f32>(self_.g3_.x) * vec4<f32>(0.0, -other.g0_.z, other.g0_.y, 0.0) + vec4<f32>(self_.g3_.y) * vec4<f32>(other.g0_.z, 0.0, -other.g0_.x, 0.0) + vec4<f32>(self_.g3_.z) * vec4<f32>(-other.g0_.y, other.g0_.x, 0.0, 0.0) + vec4<f32>(self_.g4_.x) * vec4<f32>(other.g1_.x, 0.0, 0.0, -other.g0_.x) + vec4<f32>(self_.g4_.y) * vec4<f32>(0.0, other.g1_.x, 0.0, -other.g0_.y) + vec4<f32>(self_.g4_.z) * vec4<f32>(0.0, 0.0, other.g1_.x, -other.g0_.z), self_.g3_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z) * vec3<f32>(other.g1_.x) - vec3<f32>(self_.g5_.w) * other.g0_, self_.g4_ * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g5_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g5_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g5_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0), vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z) * vec3<f32>(other.g1_.y) + vec3<f32>(self_.g7_.x) * vec3<f32>(0.0, other.g0_.z, -other.g0_.y) + vec3<f32>(self_.g7_.y) * vec3<f32>(-other.g0_.z, 0.0, other.g0_.x) + vec3<f32>(self_.g7_.z) * vec3<f32>(other.g0_.y, -other.g0_.x, 0.0) - self_.g8_ * vec3<f32>(other.g1_.x), vec2<f32>(self_.g6_.x) * vec2<f32>(-other.g0_.x, 0.0) + vec2<f32>(self_.g6_.y) * vec2<f32>(-other.g0_.y, 0.0) + vec2<f32>(self_.g6_.z) * vec2<f32>(-other.g0_.z, 0.0) + vec2<f32>(self_.g6_.w) * other.g1_ * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g8_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g8_.z) * vec2<f32>(0.0, other.g0_.z));
}

fn multiVector_wedge_scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(other.g0_), self_.g1_ * vec3<f32>(other.g0_), self_.g2_ * vec2<f32>(other.g0_), self_.g3_ * vec3<f32>(other.g0_), self_.g4_ * vec3<f32>(other.g0_), self_.g5_ * vec4<f32>(other.g0_), self_.g6_ * vec4<f32>(other.g0_), self_.g7_ * vec3<f32>(other.g0_), self_.g8_ * vec3<f32>(other.g0_), self_.g9_ * vec3<f32>(other.g0_), self_.g10_ * vec2<f32>(other.g0_));
}

fn multiVector_wedge_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g0_.x) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g0_.y) + vec2<f32>(self_.g1_.z) * vec2<f32>(0.0, other.g0_.z) + vec2<f32>(self_.g2_.x) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g2_.y) * vec2<f32>(0.0, other.g1_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x) * other.g0_, vec2<f32>(self_.g0_.x) * other.g1_);
}

fn plane_wedge_dualNum(self_: Plane, other: DualNum) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(other.g0_.x));
}

fn plane_wedge_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g2_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z) * vec3<f32>(other.g0_.x), vec2<f32>(self_.g0_.w) * vec2<f32>(0.0, other.g0_.x));
}

fn plane_wedge_roundPoint(self_: Plane, other: RoundPoint) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g0_.w * other.g1_.x);
}

fn plane_wedge_scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(other.g0_));
}

fn roundPoint_wedge_circle(self_: RoundPoint, other: Circle) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g1_.z, -other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g1_.z, 0.0, other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g1_.y, -other.g1_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g2_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g0_.x, -other.g2_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g0_.y, -other.g2_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g0_.z, -other.g2_.z) + self_.g1_ * vec2<f32>(other.g0_.w));
}

fn roundPoint_wedge_dipole(self_: RoundPoint, other: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g2_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g2_.x, other.g2_.y, other.g2_.z) + vec3<f32>(self_.g1_.y) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g2_.z, other.g2_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g2_.z, 0.0, -other.g2_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g2_.y, other.g2_.x, 0.0) + vec3<f32>(self_.g1_.y) * other.g1_);
}

fn roundPoint_wedge_dualNum(self_: RoundPoint, other: DualNum) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec2<f32>(other.g0_.x));
}

fn roundPoint_wedge_flatPoint(self_: RoundPoint, other: FlatPoint) -> Line {
    return Line(vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g0_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g0_.x, other.g0_.y, other.g0_.z), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0));
}

fn roundPoint_wedge_flector(self_: RoundPoint, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0_.x) * vec4<f32>(-other.g0_.w, 0.0, 0.0, other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(0.0, -other.g0_.w, 0.0, other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(0.0, 0.0, -other.g0_.w, other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.w), vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0));
}

fn roundPoint_wedge_line(self_: RoundPoint, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0));
}

fn roundPoint_wedge_motor(self_: RoundPoint, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g0_.z, -other.g0_.y, -other.g1_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g0_.z, 0.0, other.g0_.x, -other.g1_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g0_.y, -other.g0_.x, 0.0, -other.g1_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, 0.0));
}

fn roundPoint_wedge_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g9_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g9_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g9_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g10_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g10_.x), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec2<f32>(other.g0_.x), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g2_.x) + vec3<f32>(self_.g1_.x) * other.g1_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g1_.z, other.g1_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g1_.z, 0.0, -other.g1_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g1_.y, other.g1_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g2_.y, other.g2_.y, other.g2_.y, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2_.y) - vec4<f32>(self_.g1_.y) * vec4<f32>(other.g1_.x, other.g1_.y, other.g1_.z, other.g2_.x), vec4<f32>(self_.g0_.x) * vec4<f32>(0.0, other.g3_.z, -other.g3_.y, -other.g4_.x) + vec4<f32>(self_.g0_.y) * vec4<f32>(-other.g3_.z, 0.0, other.g3_.x, -other.g4_.y) + vec4<f32>(self_.g0_.z) * vec4<f32>(other.g3_.y, -other.g3_.x, 0.0, -other.g4_.z) + vec4<f32>(self_.g1_.x) * vec4<f32>(other.g4_.x, other.g4_.y, other.g4_.z, 0.0), vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g5_.w) + vec3<f32>(self_.g1_.x) * vec3<f32>(other.g5_.x, other.g5_.y, other.g5_.z) + vec3<f32>(self_.g1_.y) * other.g3_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g5_.z, other.g5_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g5_.z, 0.0, -other.g5_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g5_.y, other.g5_.x, 0.0) + vec3<f32>(self_.g1_.y) * other.g4_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, other.g7_.z, -other.g7_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(-other.g7_.z, 0.0, other.g7_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(other.g7_.y, -other.g7_.x, 0.0) + vec3<f32>(self_.g1_.x) * other.g8_ - vec3<f32>(self_.g1_.y) * vec3<f32>(other.g6_.x, other.g6_.y, other.g6_.z), vec2<f32>(self_.g0_.x) * vec2<f32>(other.g6_.x, -other.g8_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(other.g6_.y, -other.g8_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(other.g6_.z, -other.g8_.z) + self_.g1_ * vec2<f32>(other.g6_.w));
}

fn roundPoint_wedge_plane(self_: RoundPoint, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g1_.x * other.g0_.w);
}

fn roundPoint_wedge_roundPoint(self_: RoundPoint, other: RoundPoint) -> Dipole {
    return Dipole(vec3<f32>(0.0) - self_.g0_ * vec3<f32>(other.g1_.x) + vec3<f32>(self_.g1_.x) * other.g0_, vec3<f32>(self_.g0_.x) * vec3<f32>(0.0, -other.g0_.z, other.g0_.y) + vec3<f32>(self_.g0_.y) * vec3<f32>(other.g0_.z, 0.0, -other.g0_.x) + vec3<f32>(self_.g0_.z) * vec3<f32>(-other.g0_.y, other.g0_.x, 0.0), vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, self_.g0_.x) * vec4<f32>(other.g1_.y, other.g1_.y, other.g1_.y, 0.0) + vec4<f32>(self_.g1_.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1_.y) - vec4<f32>(self_.g1_.y) * vec4<f32>(other.g0_.x, other.g0_.y, other.g0_.z, other.g1_.x));
}

fn roundPoint_wedge_scalar(self_: RoundPoint, other: Scalar) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn roundPoint_wedge_sphere(self_: RoundPoint, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g1_.x * other.g1_.y + self_.g1_.y * other.g1_.x);
}

fn scalar_wedge_antiScalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn scalar_wedge_circle(self_: Scalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec3<f32>(self_.g0_) * other.g2_);
}

fn scalar_wedge_dipole(self_: Scalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec4<f32>(self_.g0_) * other.g2_);
}

fn scalar_wedge_dualNum(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0_) * other.g0_);
}

fn scalar_wedge_flatPoint(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0_) * other.g0_);
}

fn scalar_wedge_flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0_) * other.g0_, vec4<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedge_line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedge_motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedge_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_) * other.g0_, vec3<f32>(self_.g0_) * other.g1_, vec2<f32>(self_.g0_) * other.g2_, vec3<f32>(self_.g0_) * other.g3_, vec3<f32>(self_.g0_) * other.g4_, vec4<f32>(self_.g0_) * other.g5_, vec4<f32>(self_.g0_) * other.g6_, vec3<f32>(self_.g0_) * other.g7_, vec3<f32>(self_.g0_) * other.g8_, vec3<f32>(self_.g0_) * other.g9_, vec2<f32>(self_.g0_) * other.g10_);
}

fn scalar_wedge_plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0_) * other.g0_);
}

fn scalar_wedge_roundPoint(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn scalar_wedge_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn scalar_wedge_sphere(self_: Scalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0_) * other.g0_, vec2<f32>(self_.g0_) * other.g1_);
}

fn sphere_wedge_dualNum(self_: Sphere, other: DualNum) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec2<f32>(other.g0_.x));
}

fn sphere_wedge_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.x) * vec2<f32>(0.0, other.g1_.x) + vec2<f32>(self_.g0_.y) * vec2<f32>(0.0, other.g1_.y) + vec2<f32>(self_.g0_.z) * vec2<f32>(0.0, other.g1_.z) + vec2<f32>(self_.g1_.x) * vec2<f32>(0.0, other.g2_.y) + vec2<f32>(self_.g1_.y) * vec2<f32>(0.0, other.g2_.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0_ * vec3<f32>(other.g0_.x), self_.g1_ * vec2<f32>(other.g0_.x));
}

fn sphere_wedge_roundPoint(self_: Sphere, other: RoundPoint) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z + self_.g1_.x * other.g1_.y + self_.g1_.y * other.g1_.x);
}

fn sphere_wedge_scalar(self_: Sphere, other: Scalar) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(other.g0_), self_.g1_ * vec2<f32>(other.g0_));
}

fn antiScalar_antiDot_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_);
}

fn antiScalar_antiDot_dualNum(self_: AntiScalar, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_.y);
}

fn antiScalar_antiDot_motor(self_: AntiScalar, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_.w);
}

fn antiScalar_antiDot_multiVector(self_: AntiScalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_ * other.g0_.y);
}

fn circle_antiDot_circle(self_: Circle, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g2_.x - self_.g0_.y * other.g2_.y - self_.g0_.z * other.g2_.z + self_.g0_.w * other.g0_.w - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z - self_.g2_.x * other.g0_.x - self_.g2_.y * other.g0_.y - self_.g2_.z * other.g0_.z);
}

fn circle_antiDot_line(self_: Circle, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn circle_antiDot_motor(self_: Circle, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn circle_antiDot_multiVector(self_: Circle, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g8_.x - self_.g0_.y * other.g8_.y - self_.g0_.z * other.g8_.z + self_.g0_.w * other.g6_.w - self_.g1_.x * other.g7_.x - self_.g1_.y * other.g7_.y - self_.g1_.z * other.g7_.z - self_.g2_.x * other.g6_.x - self_.g2_.y * other.g6_.y - self_.g2_.z * other.g6_.z);
}

fn dipole_antiDot_dipole(self_: Dipole, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g2_.x + self_.g0_.y * other.g2_.y + self_.g0_.z * other.g2_.z + self_.g1_.x * other.g1_.x + self_.g1_.y * other.g1_.y + self_.g1_.z * other.g1_.z + self_.g2_.x * other.g0_.x + self_.g2_.y * other.g0_.y + self_.g2_.z * other.g0_.z - self_.g2_.w * other.g2_.w);
}

fn dipole_antiDot_flatPoint(self_: Dipole, other: FlatPoint) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g2_.w * other.g0_.w);
}

fn dipole_antiDot_flector(self_: Dipole, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g2_.w * other.g0_.w);
}

fn dipole_antiDot_multiVector(self_: Dipole, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g5_.x + self_.g0_.y * other.g5_.y + self_.g0_.z * other.g5_.z + self_.g1_.x * other.g4_.x + self_.g1_.y * other.g4_.y + self_.g1_.z * other.g4_.z + self_.g2_.x * other.g3_.x + self_.g2_.y * other.g3_.y + self_.g2_.z * other.g3_.z - self_.g2_.w * other.g5_.w);
}

fn dualNum_antiDot_antiScalar(self_: DualNum, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_.y * other.g0_);
}

fn dualNum_antiDot_dualNum(self_: DualNum, other: DualNum) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y);
}

fn dualNum_antiDot_motor(self_: DualNum, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0_.y * other.g0_.w);
}

fn dualNum_antiDot_multiVector(self_: DualNum, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y);
}

fn dualNum_antiDot_scalar(self_: DualNum, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_);
}

fn flatPoint_antiDot_dipole(self_: FlatPoint, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g0_.w * other.g2_.w);
}

fn flatPoint_antiDot_flatPoint(self_: FlatPoint, other: FlatPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.w * other.g0_.w);
}

fn flatPoint_antiDot_flector(self_: FlatPoint, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.w * other.g0_.w);
}

fn flatPoint_antiDot_multiVector(self_: FlatPoint, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g3_.x + self_.g0_.y * other.g3_.y + self_.g0_.z * other.g3_.z - self_.g0_.w * other.g5_.w);
}

fn flector_antiDot_dipole(self_: Flector, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g0_.w * other.g2_.w);
}

fn flector_antiDot_flatPoint(self_: Flector, other: FlatPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.w * other.g0_.w);
}

fn flector_antiDot_flector(self_: Flector, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.w * other.g0_.w + self_.g1_.x * other.g1_.x + self_.g1_.y * other.g1_.y + self_.g1_.z * other.g1_.z);
}

fn flector_antiDot_multiVector(self_: Flector, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g3_.x + self_.g0_.y * other.g3_.y + self_.g0_.z * other.g3_.z - self_.g0_.w * other.g5_.w + self_.g1_.x * other.g9_.x + self_.g1_.y * other.g9_.y + self_.g1_.z * other.g9_.z - self_.g1_.w * other.g10_.x);
}

fn flector_antiDot_plane(self_: Flector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z);
}

fn flector_antiDot_sphere(self_: Flector, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z - self_.g1_.w * other.g1_.x);
}

fn line_antiDot_circle(self_: Line, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn line_antiDot_line(self_: Line, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z);
}

fn line_antiDot_motor(self_: Line, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z);
}

fn line_antiDot_multiVector(self_: Line, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g7_.x - self_.g0_.y * other.g7_.y - self_.g0_.z * other.g7_.z - self_.g1_.x * other.g6_.x - self_.g1_.y * other.g6_.y - self_.g1_.z * other.g6_.z);
}

fn motor_antiDot_antiScalar(self_: Motor, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_.w * other.g0_);
}

fn motor_antiDot_circle(self_: Motor, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn motor_antiDot_dualNum(self_: Motor, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0_.w * other.g0_.y);
}

fn motor_antiDot_line(self_: Motor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z);
}

fn motor_antiDot_motor(self_: Motor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g0_.w * other.g0_.w);
}

fn motor_antiDot_multiVector(self_: Motor, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g7_.x - self_.g0_.y * other.g7_.y - self_.g0_.z * other.g7_.z + self_.g0_.w * other.g0_.y - self_.g1_.x * other.g6_.x - self_.g1_.y * other.g6_.y - self_.g1_.z * other.g6_.z);
}

fn multiVector_antiDot_antiScalar(self_: MultiVector, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0_.y * other.g0_);
}

fn multiVector_antiDot_circle(self_: MultiVector, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g6_.x * other.g2_.x - self_.g6_.y * other.g2_.y - self_.g6_.z * other.g2_.z + self_.g6_.w * other.g0_.w - self_.g7_.x * other.g1_.x - self_.g7_.y * other.g1_.y - self_.g7_.z * other.g1_.z - self_.g8_.x * other.g0_.x - self_.g8_.y * other.g0_.y - self_.g8_.z * other.g0_.z);
}

fn multiVector_antiDot_dipole(self_: MultiVector, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g3_.x * other.g2_.x + self_.g3_.y * other.g2_.y + self_.g3_.z * other.g2_.z + self_.g4_.x * other.g1_.x + self_.g4_.y * other.g1_.y + self_.g4_.z * other.g1_.z + self_.g5_.x * other.g0_.x + self_.g5_.y * other.g0_.y + self_.g5_.z * other.g0_.z - self_.g5_.w * other.g2_.w);
}

fn multiVector_antiDot_dualNum(self_: MultiVector, other: DualNum) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y);
}

fn multiVector_antiDot_flatPoint(self_: MultiVector, other: FlatPoint) -> AntiScalar {
    return AntiScalar(self_.g3_.x * other.g0_.x + self_.g3_.y * other.g0_.y + self_.g3_.z * other.g0_.z - self_.g5_.w * other.g0_.w);
}

fn multiVector_antiDot_flector(self_: MultiVector, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g3_.x * other.g0_.x + self_.g3_.y * other.g0_.y + self_.g3_.z * other.g0_.z - self_.g5_.w * other.g0_.w + self_.g9_.x * other.g1_.x + self_.g9_.y * other.g1_.y + self_.g9_.z * other.g1_.z - self_.g10_.x * other.g1_.w);
}

fn multiVector_antiDot_line(self_: MultiVector, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g6_.x * other.g1_.x - self_.g6_.y * other.g1_.y - self_.g6_.z * other.g1_.z - self_.g7_.x * other.g0_.x - self_.g7_.y * other.g0_.y - self_.g7_.z * other.g0_.z);
}

fn multiVector_antiDot_motor(self_: MultiVector, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0_.y * other.g0_.w - self_.g6_.x * other.g1_.x - self_.g6_.y * other.g1_.y - self_.g6_.z * other.g1_.z - self_.g7_.x * other.g0_.x - self_.g7_.y * other.g0_.y - self_.g7_.z * other.g0_.z);
}

fn multiVector_antiDot_multiVector(self_: MultiVector, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z + self_.g2_.x * other.g2_.y + self_.g2_.y * other.g2_.x + self_.g3_.x * other.g5_.x + self_.g3_.y * other.g5_.y + self_.g3_.z * other.g5_.z + self_.g4_.x * other.g4_.x + self_.g4_.y * other.g4_.y + self_.g4_.z * other.g4_.z + self_.g5_.x * other.g3_.x + self_.g5_.y * other.g3_.y + self_.g5_.z * other.g3_.z - self_.g5_.w * other.g5_.w - self_.g6_.x * other.g8_.x - self_.g6_.y * other.g8_.y - self_.g6_.z * other.g8_.z + self_.g6_.w * other.g6_.w - self_.g7_.x * other.g7_.x - self_.g7_.y * other.g7_.y - self_.g7_.z * other.g7_.z - self_.g8_.x * other.g6_.x - self_.g8_.y * other.g6_.y - self_.g8_.z * other.g6_.z + self_.g9_.x * other.g9_.x + self_.g9_.y * other.g9_.y + self_.g9_.z * other.g9_.z - self_.g10_.x * other.g10_.y - self_.g10_.y * other.g10_.x);
}

fn multiVector_antiDot_plane(self_: MultiVector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g9_.x * other.g0_.x + self_.g9_.y * other.g0_.y + self_.g9_.z * other.g0_.z - self_.g10_.x * other.g0_.w);
}

fn multiVector_antiDot_roundPoint(self_: MultiVector, other: RoundPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z + self_.g2_.x * other.g1_.y + self_.g2_.y * other.g1_.x);
}

fn multiVector_antiDot_scalar(self_: MultiVector, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_);
}

fn multiVector_antiDot_sphere(self_: MultiVector, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g9_.x * other.g0_.x + self_.g9_.y * other.g0_.y + self_.g9_.z * other.g0_.z - self_.g10_.x * other.g1_.y - self_.g10_.y * other.g1_.x);
}

fn plane_antiDot_flector(self_: Plane, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z);
}

fn plane_antiDot_multiVector(self_: Plane, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g9_.x + self_.g0_.y * other.g9_.y + self_.g0_.z * other.g9_.z - self_.g0_.w * other.g10_.x);
}

fn plane_antiDot_plane(self_: Plane, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z);
}

fn plane_antiDot_sphere(self_: Plane, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g0_.w * other.g1_.x);
}

fn roundPoint_antiDot_multiVector(self_: RoundPoint, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z + self_.g1_.x * other.g2_.y + self_.g1_.y * other.g2_.x);
}

fn roundPoint_antiDot_roundPoint(self_: RoundPoint, other: RoundPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g1_.x * other.g1_.y + self_.g1_.y * other.g1_.x);
}

fn scalar_antiDot_dualNum(self_: Scalar, other: DualNum) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_ * other.g0_.x);
}

fn scalar_antiDot_multiVector(self_: Scalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_ * other.g0_.x);
}

fn scalar_antiDot_scalar(self_: Scalar, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0_ * other.g0_);
}

fn sphere_antiDot_flector(self_: Sphere, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z - self_.g1_.x * other.g1_.w);
}

fn sphere_antiDot_multiVector(self_: Sphere, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g9_.x + self_.g0_.y * other.g9_.y + self_.g0_.z * other.g9_.z - self_.g1_.x * other.g10_.y - self_.g1_.y * other.g10_.x);
}

fn sphere_antiDot_plane(self_: Sphere, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g1_.x * other.g0_.w);
}

fn sphere_antiDot_sphere(self_: Sphere, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g1_.x * other.g1_.y - self_.g1_.y * other.g1_.x);
}

fn antiScalar_dot_antiScalar(self_: AntiScalar, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0_ * other.g0_);
}

fn antiScalar_dot_dualNum(self_: AntiScalar, other: DualNum) -> Scalar {
    return Scalar(0.0 - self_.g0_ * other.g0_.y);
}

fn antiScalar_dot_motor(self_: AntiScalar, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0_ * other.g0_.w);
}

fn antiScalar_dot_multiVector(self_: AntiScalar, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0_ * other.g0_.y);
}

fn circle_dot_circle(self_: Circle, other: Circle) -> Scalar {
    return Scalar(self_.g0_.x * other.g2_.x + self_.g0_.y * other.g2_.y + self_.g0_.z * other.g2_.z - self_.g0_.w * other.g0_.w + self_.g1_.x * other.g1_.x + self_.g1_.y * other.g1_.y + self_.g1_.z * other.g1_.z + self_.g2_.x * other.g0_.x + self_.g2_.y * other.g0_.y + self_.g2_.z * other.g0_.z);
}

fn circle_dot_line(self_: Circle, other: Line) -> Scalar {
    return Scalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z + self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z);
}

fn circle_dot_motor(self_: Circle, other: Motor) -> Scalar {
    return Scalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z + self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z);
}

fn circle_dot_multiVector(self_: Circle, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_.x * other.g8_.x + self_.g0_.y * other.g8_.y + self_.g0_.z * other.g8_.z - self_.g0_.w * other.g6_.w + self_.g1_.x * other.g7_.x + self_.g1_.y * other.g7_.y + self_.g1_.z * other.g7_.z + self_.g2_.x * other.g6_.x + self_.g2_.y * other.g6_.y + self_.g2_.z * other.g6_.z);
}

fn dipole_dot_dipole(self_: Dipole, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g2_.x - self_.g0_.y * other.g2_.y - self_.g0_.z * other.g2_.z - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z - self_.g2_.x * other.g0_.x - self_.g2_.y * other.g0_.y - self_.g2_.z * other.g0_.z + self_.g2_.w * other.g2_.w);
}

fn dipole_dot_flatPoint(self_: Dipole, other: FlatPoint) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g2_.w * other.g0_.w);
}

fn dipole_dot_flector(self_: Dipole, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g2_.w * other.g0_.w);
}

fn dipole_dot_multiVector(self_: Dipole, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g5_.x - self_.g0_.y * other.g5_.y - self_.g0_.z * other.g5_.z - self_.g1_.x * other.g4_.x - self_.g1_.y * other.g4_.y - self_.g1_.z * other.g4_.z - self_.g2_.x * other.g3_.x - self_.g2_.y * other.g3_.y - self_.g2_.z * other.g3_.z + self_.g2_.w * other.g5_.w);
}

fn dualNum_dot_antiScalar(self_: DualNum, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0_.y * other.g0_);
}

fn dualNum_dot_dualNum(self_: DualNum, other: DualNum) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y);
}

fn dualNum_dot_motor(self_: DualNum, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0_.y * other.g0_.w);
}

fn dualNum_dot_multiVector(self_: DualNum, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y);
}

fn dualNum_dot_scalar(self_: DualNum, other: Scalar) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_);
}

fn flatPoint_dot_dipole(self_: FlatPoint, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g0_.w * other.g2_.w);
}

fn flatPoint_dot_flatPoint(self_: FlatPoint, other: FlatPoint) -> Scalar {
    return Scalar(self_.g0_.w * other.g0_.w);
}

fn flatPoint_dot_flector(self_: FlatPoint, other: Flector) -> Scalar {
    return Scalar(self_.g0_.w * other.g0_.w);
}

fn flatPoint_dot_multiVector(self_: FlatPoint, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g3_.x - self_.g0_.y * other.g3_.y - self_.g0_.z * other.g3_.z + self_.g0_.w * other.g5_.w);
}

fn flector_dot_dipole(self_: Flector, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g0_.w * other.g2_.w);
}

fn flector_dot_flatPoint(self_: Flector, other: FlatPoint) -> Scalar {
    return Scalar(self_.g0_.w * other.g0_.w);
}

fn flector_dot_flector(self_: Flector, other: Flector) -> Scalar {
    return Scalar(self_.g0_.w * other.g0_.w - self_.g1_.x * other.g1_.x - self_.g1_.y * other.g1_.y - self_.g1_.z * other.g1_.z);
}

fn flector_dot_multiVector(self_: Flector, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g3_.x - self_.g0_.y * other.g3_.y - self_.g0_.z * other.g3_.z + self_.g0_.w * other.g5_.w - self_.g1_.x * other.g9_.x - self_.g1_.y * other.g9_.y - self_.g1_.z * other.g9_.z + self_.g1_.w * other.g10_.x);
}

fn flector_dot_plane(self_: Flector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z);
}

fn flector_dot_sphere(self_: Flector, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g1_.x * other.g0_.x - self_.g1_.y * other.g0_.y - self_.g1_.z * other.g0_.z + self_.g1_.w * other.g1_.x);
}

fn line_dot_circle(self_: Line, other: Circle) -> Scalar {
    return Scalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z + self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z);
}

fn line_dot_line(self_: Line, other: Line) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z);
}

fn line_dot_motor(self_: Line, other: Motor) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z);
}

fn line_dot_multiVector(self_: Line, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_.x * other.g7_.x + self_.g0_.y * other.g7_.y + self_.g0_.z * other.g7_.z + self_.g1_.x * other.g6_.x + self_.g1_.y * other.g6_.y + self_.g1_.z * other.g6_.z);
}

fn motor_dot_antiScalar(self_: Motor, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0_.w * other.g0_);
}

fn motor_dot_circle(self_: Motor, other: Circle) -> Scalar {
    return Scalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z + self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z);
}

fn motor_dot_dualNum(self_: Motor, other: DualNum) -> Scalar {
    return Scalar(0.0 - self_.g0_.w * other.g0_.y);
}

fn motor_dot_line(self_: Motor, other: Line) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z);
}

fn motor_dot_motor(self_: Motor, other: Motor) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g0_.w * other.g0_.w);
}

fn motor_dot_multiVector(self_: Motor, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_.x * other.g7_.x + self_.g0_.y * other.g7_.y + self_.g0_.z * other.g7_.z - self_.g0_.w * other.g0_.y + self_.g1_.x * other.g6_.x + self_.g1_.y * other.g6_.y + self_.g1_.z * other.g6_.z);
}

fn multiVector_dot_antiScalar(self_: MultiVector, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0_.y * other.g0_);
}

fn multiVector_dot_circle(self_: MultiVector, other: Circle) -> Scalar {
    return Scalar(self_.g6_.x * other.g2_.x + self_.g6_.y * other.g2_.y + self_.g6_.z * other.g2_.z - self_.g6_.w * other.g0_.w + self_.g7_.x * other.g1_.x + self_.g7_.y * other.g1_.y + self_.g7_.z * other.g1_.z + self_.g8_.x * other.g0_.x + self_.g8_.y * other.g0_.y + self_.g8_.z * other.g0_.z);
}

fn multiVector_dot_dipole(self_: MultiVector, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g3_.x * other.g2_.x - self_.g3_.y * other.g2_.y - self_.g3_.z * other.g2_.z - self_.g4_.x * other.g1_.x - self_.g4_.y * other.g1_.y - self_.g4_.z * other.g1_.z - self_.g5_.x * other.g0_.x - self_.g5_.y * other.g0_.y - self_.g5_.z * other.g0_.z + self_.g5_.w * other.g2_.w);
}

fn multiVector_dot_dualNum(self_: MultiVector, other: DualNum) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y);
}

fn multiVector_dot_flatPoint(self_: MultiVector, other: FlatPoint) -> Scalar {
    return Scalar(0.0 - self_.g3_.x * other.g0_.x - self_.g3_.y * other.g0_.y - self_.g3_.z * other.g0_.z + self_.g5_.w * other.g0_.w);
}

fn multiVector_dot_flector(self_: MultiVector, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g3_.x * other.g0_.x - self_.g3_.y * other.g0_.y - self_.g3_.z * other.g0_.z + self_.g5_.w * other.g0_.w - self_.g9_.x * other.g1_.x - self_.g9_.y * other.g1_.y - self_.g9_.z * other.g1_.z + self_.g10_.x * other.g1_.w);
}

fn multiVector_dot_line(self_: MultiVector, other: Line) -> Scalar {
    return Scalar(self_.g6_.x * other.g1_.x + self_.g6_.y * other.g1_.y + self_.g6_.z * other.g1_.z + self_.g7_.x * other.g0_.x + self_.g7_.y * other.g0_.y + self_.g7_.z * other.g0_.z);
}

fn multiVector_dot_motor(self_: MultiVector, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0_.y * other.g0_.w + self_.g6_.x * other.g1_.x + self_.g6_.y * other.g1_.y + self_.g6_.z * other.g1_.z + self_.g7_.x * other.g0_.x + self_.g7_.y * other.g0_.y + self_.g7_.z * other.g0_.z);
}

fn multiVector_dot_multiVector(self_: MultiVector, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y + self_.g1_.x * other.g1_.x + self_.g1_.y * other.g1_.y + self_.g1_.z * other.g1_.z - self_.g2_.x * other.g2_.y - self_.g2_.y * other.g2_.x - self_.g3_.x * other.g5_.x - self_.g3_.y * other.g5_.y - self_.g3_.z * other.g5_.z - self_.g4_.x * other.g4_.x - self_.g4_.y * other.g4_.y - self_.g4_.z * other.g4_.z - self_.g5_.x * other.g3_.x - self_.g5_.y * other.g3_.y - self_.g5_.z * other.g3_.z + self_.g5_.w * other.g5_.w + self_.g6_.x * other.g8_.x + self_.g6_.y * other.g8_.y + self_.g6_.z * other.g8_.z - self_.g6_.w * other.g6_.w + self_.g7_.x * other.g7_.x + self_.g7_.y * other.g7_.y + self_.g7_.z * other.g7_.z + self_.g8_.x * other.g6_.x + self_.g8_.y * other.g6_.y + self_.g8_.z * other.g6_.z - self_.g9_.x * other.g9_.x - self_.g9_.y * other.g9_.y - self_.g9_.z * other.g9_.z + self_.g10_.x * other.g10_.y + self_.g10_.y * other.g10_.x);
}

fn multiVector_dot_plane(self_: MultiVector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g9_.x * other.g0_.x - self_.g9_.y * other.g0_.y - self_.g9_.z * other.g0_.z + self_.g10_.x * other.g0_.w);
}

fn multiVector_dot_roundPoint(self_: MultiVector, other: RoundPoint) -> Scalar {
    return Scalar(self_.g1_.x * other.g0_.x + self_.g1_.y * other.g0_.y + self_.g1_.z * other.g0_.z - self_.g2_.x * other.g1_.y - self_.g2_.y * other.g1_.x);
}

fn multiVector_dot_scalar(self_: MultiVector, other: Scalar) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_);
}

fn multiVector_dot_sphere(self_: MultiVector, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g9_.x * other.g0_.x - self_.g9_.y * other.g0_.y - self_.g9_.z * other.g0_.z + self_.g10_.x * other.g1_.y + self_.g10_.y * other.g1_.x);
}

fn plane_dot_flector(self_: Plane, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z);
}

fn plane_dot_multiVector(self_: Plane, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g9_.x - self_.g0_.y * other.g9_.y - self_.g0_.z * other.g9_.z + self_.g0_.w * other.g10_.x);
}

fn plane_dot_plane(self_: Plane, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z);
}

fn plane_dot_sphere(self_: Plane, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g0_.w * other.g1_.x);
}

fn roundPoint_dot_multiVector(self_: RoundPoint, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_.x * other.g1_.x + self_.g0_.y * other.g1_.y + self_.g0_.z * other.g1_.z - self_.g1_.x * other.g2_.y - self_.g1_.y * other.g2_.x);
}

fn roundPoint_dot_roundPoint(self_: RoundPoint, other: RoundPoint) -> Scalar {
    return Scalar(self_.g0_.x * other.g0_.x + self_.g0_.y * other.g0_.y + self_.g0_.z * other.g0_.z - self_.g1_.x * other.g1_.y - self_.g1_.y * other.g1_.x);
}

fn scalar_dot_dualNum(self_: Scalar, other: DualNum) -> Scalar {
    return Scalar(self_.g0_ * other.g0_.x);
}

fn scalar_dot_multiVector(self_: Scalar, other: MultiVector) -> Scalar {
    return Scalar(self_.g0_ * other.g0_.x);
}

fn scalar_dot_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0_ * other.g0_);
}

fn sphere_dot_flector(self_: Sphere, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g1_.x - self_.g0_.y * other.g1_.y - self_.g0_.z * other.g1_.z + self_.g1_.x * other.g1_.w);
}

fn sphere_dot_multiVector(self_: Sphere, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g9_.x - self_.g0_.y * other.g9_.y - self_.g0_.z * other.g9_.z + self_.g1_.x * other.g10_.y + self_.g1_.y * other.g10_.x);
}

fn sphere_dot_plane(self_: Sphere, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g1_.x * other.g0_.w);
}

fn sphere_dot_sphere(self_: Sphere, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g0_.x * other.g0_.x - self_.g0_.y * other.g0_.y - self_.g0_.z * other.g0_.z + self_.g1_.x * other.g1_.y + self_.g1_.y * other.g1_.x);
}

fn circle_flatBulk(self_: Circle) -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), self_.g2_);
}

fn dipole_flatBulk(self_: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), self_.g2_ * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn flatPoint_flatBulk(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn flector_flatBulk(self_: Flector) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(1.0, 1.0, 1.0, 0.0), self_.g1_ * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn line_flatBulk(self_: Line) -> Line {
    return Line(vec3<f32>(0.0), self_.g1_);
}

fn motor_flatBulk(self_: Motor) -> Motor {
    return Motor(vec4<f32>(0.0), self_.g1_);
}

fn multiVector_flatBulk(self_: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), self_.g2_ * vec2<f32>(0.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g5_ * vec4<f32>(1.0, 1.0, 1.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g8_, vec3<f32>(0.0), self_.g10_ * vec2<f32>(0.0, 1.0));
}

fn plane_flatBulk(self_: Plane) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn roundPoint_flatBulk(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), self_.g1_ * vec2<f32>(0.0, 1.0));
}

fn sphere_flatBulk(self_: Sphere) -> Sphere {
    return Sphere(vec3<f32>(0.0), self_.g1_ * vec2<f32>(0.0, 1.0));
}

fn antiScalar_flatWeight(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle_flatWeight(self_: Circle) -> Circle {
    return Circle(vec4<f32>(0.0), self_.g1_, vec3<f32>(0.0));
}

fn dipole_flatWeight(self_: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), self_.g2_ * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn dualNum_flatWeight(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(0.0, 1.0));
}

fn flatPoint_flatWeight(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn flector_flatWeight(self_: Flector) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(0.0, 0.0, 0.0, 1.0), self_.g1_ * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn line_flatWeight(self_: Line) -> Line {
    return Line(self_.g0_, vec3<f32>(0.0));
}

fn motor_flatWeight(self_: Motor) -> Motor {
    return Motor(self_.g0_, vec3<f32>(0.0));
}

fn multiVector_flatWeight(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(0.0, 1.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g5_ * vec4<f32>(0.0, 0.0, 0.0, 1.0), vec4<f32>(0.0), self_.g7_, vec3<f32>(0.0), self_.g9_, vec2<f32>(0.0));
}

fn plane_flatWeight(self_: Plane) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn sphere_flatWeight(self_: Sphere) -> Sphere {
    return Sphere(self_.g0_, vec2<f32>(0.0));
}

fn circle_roundBulk(self_: Circle) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(0.0, 0.0, 0.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole_roundBulk(self_: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g1_, vec4<f32>(0.0));
}

fn dualNum_roundBulk(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(1.0, 0.0));
}

fn multiVector_roundBulk(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(1.0, 0.0), self_.g1_, vec2<f32>(0.0), vec3<f32>(0.0), self_.g4_, vec4<f32>(0.0), self_.g6_ * vec4<f32>(0.0, 0.0, 0.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn roundPoint_roundBulk(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_, vec2<f32>(0.0));
}

fn scalar_roundBulk(self_: Scalar) -> Scalar {
    return self_;
}

fn circle_roundWeight(self_: Circle) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(1.0, 1.0, 1.0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole_roundWeight(self_: Dipole) -> Dipole {
    return Dipole(self_.g0_, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multiVector_roundWeight(self_: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), self_.g2_ * vec2<f32>(1.0, 0.0), self_.g3_, vec3<f32>(0.0), vec4<f32>(0.0), self_.g6_ * vec4<f32>(1.0, 1.0, 1.0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g10_ * vec2<f32>(1.0, 0.0));
}

fn roundPoint_roundWeight(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), self_.g1_ * vec2<f32>(1.0, 0.0));
}

fn sphere_roundWeight(self_: Sphere) -> Sphere {
    return Sphere(vec3<f32>(0.0), self_.g1_ * vec2<f32>(1.0, 0.0));
}

fn antiScalar_antiDual(self_: AntiScalar) -> Scalar {
    return Scalar(self_.g0_);
}

fn circle_antiDual(self_: Circle) -> Dipole {
    return Dipole(vec3<f32>(-self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_ * vec3<f32>(-1.0), vec4<f32>(-self_.g2_.x, -self_.g2_.y, -self_.g2_.z, self_.g0_.w));
}

fn dipole_antiDual(self_: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z, -self_.g2_.w), self_.g1_, vec3<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z));
}

fn dualNum_antiDual(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_.yx * vec2<f32>(1.0, -1.0));
}

fn flatPoint_antiDual(self_: FlatPoint) -> Circle {
    return Circle(vec4<f32>(0.0, 0.0, 0.0, -self_.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z));
}

fn flector_antiDual(self_: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, -self_.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, -self_.g0_.w), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_antiDual(self_: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g0_ * vec3<f32>(-1.0), vec4<f32>(-self_.g1_.x, -self_.g1_.y, -self_.g1_.z, 0.0));
}

fn motor_antiDual(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0_.x, self_.g0_.y, self_.g0_.z), vec4<f32>(-self_.g1_.x, -self_.g1_.y, -self_.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_antiDual(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_.yx * vec2<f32>(1.0, -1.0), self_.g9_, self_.g10_ * vec2<f32>(-1.0), vec3<f32>(-self_.g6_.x, self_.g6_.y, self_.g6_.z), self_.g7_ * vec3<f32>(-1.0), vec4<f32>(-self_.g8_.x, -self_.g8_.y, -self_.g8_.z, self_.g6_.w), vec4<f32>(self_.g3_.x, self_.g3_.y, self_.g3_.z, -self_.g5_.w), self_.g4_, vec3<f32>(self_.g5_.x, self_.g5_.y, self_.g5_.z), self_.g1_ * vec3<f32>(-1.0), self_.g2_);
}

fn plane_antiDual(self_: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, -self_.g0_.w));
}

fn roundPoint_antiDual(self_: RoundPoint) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(-1.0), self_.g1_);
}

fn scalar_antiDual(self_: Scalar) -> AntiScalar {
    return AntiScalar(-self_.g0_);
}

fn sphere_antiDual(self_: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0_, self_.g1_ * vec2<f32>(-1.0));
}

fn antiScalar_antiReversal(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle_antiReversal(self_: Circle) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec3<f32>(-1.0));
}

fn dipole_antiReversal(self_: Dipole) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec4<f32>(-1.0));
}

fn dualNum_antiReversal(self_: DualNum) -> DualNum {
    return self_;
}

fn flatPoint_antiReversal(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(-1.0));
}

fn flector_antiReversal(self_: Flector) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(-1.0), self_.g1_);
}

fn line_antiReversal(self_: Line) -> Line {
    return Line(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn motor_antiReversal(self_: Motor) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn multiVector_antiReversal(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_ * vec3<f32>(-1.0), self_.g4_ * vec3<f32>(-1.0), self_.g5_ * vec4<f32>(-1.0), self_.g6_ * vec4<f32>(-1.0), self_.g7_ * vec3<f32>(-1.0), self_.g8_ * vec3<f32>(-1.0), self_.g9_, self_.g10_);
}

fn plane_antiReversal(self_: Plane) -> Plane {
    return self_;
}

fn roundPoint_antiReversal(self_: RoundPoint) -> RoundPoint {
    return self_;
}

fn scalar_antiReversal(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere_antiReversal(self_: Sphere) -> Sphere {
    return self_;
}

fn antiScalar_automorphism(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0_);
}

fn circle_automorphism(self_: Circle) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec3<f32>(-1.0));
}

fn dipole_automorphism(self_: Dipole) -> Dipole {
    return self_;
}

fn dualNum_automorphism(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(1.0, -1.0));
}

fn flatPoint_automorphism(self_: FlatPoint) -> FlatPoint {
    return self_;
}

fn flector_automorphism(self_: Flector) -> Flector {
    return self_;
}

fn line_automorphism(self_: Line) -> Line {
    return Line(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn motor_automorphism(self_: Motor) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn multiVector_automorphism(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(1.0, -1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec2<f32>(-1.0), self_.g3_, self_.g4_, self_.g5_, self_.g6_ * vec4<f32>(-1.0), self_.g7_ * vec3<f32>(-1.0), self_.g8_ * vec3<f32>(-1.0), self_.g9_, self_.g10_);
}

fn plane_automorphism(self_: Plane) -> Plane {
    return self_;
}

fn roundPoint_automorphism(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec2<f32>(-1.0));
}

fn scalar_automorphism(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere_automorphism(self_: Sphere) -> Sphere {
    return self_;
}

fn antiScalar_complement(self_: AntiScalar) -> Scalar {
    return Scalar(self_.g0_);
}

fn circle_complement(self_: Circle) -> Dipole {
    return Dipole(self_.g2_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g0_ * vec4<f32>(-1.0));
}

fn dipole_complement(self_: Dipole) -> Circle {
    return Circle(self_.g2_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g0_ * vec3<f32>(-1.0));
}

fn dualNum_complement(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_.yx);
}

fn flatPoint_complement(self_: FlatPoint) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(-1.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn flector_complement(self_: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(self_.g1_.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0_ * vec4<f32>(-1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_complement(self_: Line) -> Dipole {
    return Dipole(self_.g1_ * vec3<f32>(-1.0), self_.g0_ * vec3<f32>(-1.0), vec4<f32>(0.0));
}

fn motor_complement(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g1_ * vec3<f32>(-1.0), vec3<f32>(-self_.g0_.x, self_.g0_.y, self_.g0_.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_complement(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_.yx, self_.g9_, self_.g10_.yx, self_.g8_ * vec3<f32>(-1.0), self_.g7_ * vec3<f32>(-1.0), self_.g6_ * vec4<f32>(-1.0), self_.g5_ * vec4<f32>(-1.0), self_.g4_ * vec3<f32>(-1.0), self_.g3_ * vec3<f32>(-1.0), self_.g1_, self_.g2_.yx);
}

fn plane_complement(self_: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(self_.g0_.w, 0.0));
}

fn roundPoint_complement(self_: RoundPoint) -> Sphere {
    return Sphere(self_.g0_, self_.g1_.yx);
}

fn scalar_complement(self_: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0_);
}

fn sphere_complement(self_: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0_, self_.g1_.yx);
}

fn antiScalar_conformalConjugate(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0_);
}

fn circle_conformalConjugate(self_: Circle) -> Circle {
    return Circle(self_.g0_, self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec3<f32>(-1.0));
}

fn dipole_conformalConjugate(self_: Dipole) -> Dipole {
    return Dipole(self_.g0_, self_.g1_, self_.g2_ * vec4<f32>(-1.0));
}

fn dualNum_conformalConjugate(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(1.0, -1.0));
}

fn flatPoint_conformalConjugate(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(-1.0));
}

fn flector_conformalConjugate(self_: Flector) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec4<f32>(-1.0));
}

fn line_conformalConjugate(self_: Line) -> Line {
    return Line(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn motor_conformalConjugate(self_: Motor) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn multiVector_conformalConjugate(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(1.0, -1.0), self_.g1_, self_.g2_ * vec2<f32>(1.0, -1.0), self_.g3_, self_.g4_, self_.g5_ * vec4<f32>(-1.0), self_.g6_, self_.g7_ * vec3<f32>(-1.0), self_.g8_ * vec3<f32>(-1.0), self_.g9_ * vec3<f32>(-1.0), self_.g10_ * vec2<f32>(1.0, -1.0));
}

fn plane_conformalConjugate(self_: Plane) -> Plane {
    return Plane(self_.g0_ * vec4<f32>(-1.0));
}

fn roundPoint_conformalConjugate(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_, self_.g1_ * vec2<f32>(1.0, -1.0));
}

fn scalar_conformalConjugate(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere_conformalConjugate(self_: Sphere) -> Sphere {
    return Sphere(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec2<f32>(1.0, -1.0));
}

fn antiScalar_conjugation(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0_);
}

fn circle_conjugation(self_: Circle) -> Circle {
    return self_;
}

fn dipole_conjugation(self_: Dipole) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec4<f32>(-1.0));
}

fn dualNum_conjugation(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_ * vec2<f32>(1.0, -1.0));
}

fn flatPoint_conjugation(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(-1.0));
}

fn flector_conjugation(self_: Flector) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(-1.0), self_.g1_);
}

fn line_conjugation(self_: Line) -> Line {
    return self_;
}

fn motor_conjugation(self_: Motor) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1_);
}

fn multiVector_conjugation(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_ * vec2<f32>(1.0, -1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec2<f32>(-1.0), self_.g3_ * vec3<f32>(-1.0), self_.g4_ * vec3<f32>(-1.0), self_.g5_ * vec4<f32>(-1.0), self_.g6_, self_.g7_, self_.g8_, self_.g9_, self_.g10_);
}

fn plane_conjugation(self_: Plane) -> Plane {
    return self_;
}

fn roundPoint_conjugation(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec2<f32>(-1.0));
}

fn scalar_conjugation(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere_conjugation(self_: Sphere) -> Sphere {
    return self_;
}

fn antiScalar_doubleComplement(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle_doubleComplement(self_: Circle) -> Circle {
    return self_;
}

fn dipole_doubleComplement(self_: Dipole) -> Dipole {
    return self_;
}

fn dualNum_doubleComplement(self_: DualNum) -> DualNum {
    return self_;
}

fn flatPoint_doubleComplement(self_: FlatPoint) -> FlatPoint {
    return self_;
}

fn flector_doubleComplement(self_: Flector) -> Flector {
    return self_;
}

fn line_doubleComplement(self_: Line) -> Line {
    return self_;
}

fn motor_doubleComplement(self_: Motor) -> Motor {
    return self_;
}

fn multiVector_doubleComplement(self_: MultiVector) -> MultiVector {
    return self_;
}

fn plane_doubleComplement(self_: Plane) -> Plane {
    return self_;
}

fn roundPoint_doubleComplement(self_: RoundPoint) -> RoundPoint {
    return self_;
}

fn scalar_doubleComplement(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere_doubleComplement(self_: Sphere) -> Sphere {
    return self_;
}

fn antiScalar_dual(self_: AntiScalar) -> Scalar {
    return Scalar(-self_.g0_);
}

fn circle_dual(self_: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), self_.g1_, vec4<f32>(self_.g2_.x, self_.g2_.y, self_.g2_.z, -self_.g0_.w));
}

fn dipole_dual(self_: Dipole) -> Circle {
    return Circle(vec4<f32>(-self_.g0_.x, -self_.g0_.y, -self_.g0_.z, self_.g2_.w), self_.g1_ * vec3<f32>(-1.0), vec3<f32>(-self_.g2_.x, self_.g2_.y, self_.g2_.z));
}

fn dualNum_dual(self_: DualNum) -> DualNum {
    return DualNum(self_.g0_.yx * vec2<f32>(-1.0, 1.0));
}

fn flatPoint_dual(self_: FlatPoint) -> Circle {
    return Circle(vec4<f32>(0.0, 0.0, 0.0, self_.g0_.w), vec3<f32>(0.0), vec3<f32>(-self_.g0_.x, self_.g0_.y, self_.g0_.z));
}

fn flector_dual(self_: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(-self_.g1_.x, self_.g1_.y, self_.g1_.z), vec2<f32>(0.0, self_.g1_.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0_.w), vec3<f32>(0.0), vec3<f32>(-self_.g0_.x, self_.g0_.y, self_.g0_.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line_dual(self_: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g0_, vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, 0.0));
}

fn motor_dual(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(-self_.g0_.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0_.x, self_.g0_.y, self_.g0_.z), vec4<f32>(self_.g1_.x, self_.g1_.y, self_.g1_.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multiVector_dual(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_.yx * vec2<f32>(-1.0, 1.0), self_.g9_ * vec3<f32>(-1.0), self_.g10_, vec3<f32>(self_.g6_.x, self_.g6_.y, self_.g6_.z), self_.g7_, vec4<f32>(self_.g8_.x, self_.g8_.y, self_.g8_.z, -self_.g6_.w), vec4<f32>(-self_.g3_.x, -self_.g3_.y, -self_.g3_.z, self_.g5_.w), self_.g4_ * vec3<f32>(-1.0), vec3<f32>(-self_.g5_.x, self_.g5_.y, self_.g5_.z), self_.g1_, self_.g2_ * vec2<f32>(-1.0));
}

fn plane_dual(self_: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(-self_.g0_.x, self_.g0_.y, self_.g0_.z), vec2<f32>(0.0, self_.g0_.w));
}

fn roundPoint_dual(self_: RoundPoint) -> Sphere {
    return Sphere(self_.g0_, self_.g1_ * vec2<f32>(-1.0));
}

fn scalar_dual(self_: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0_);
}

fn sphere_dual(self_: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0_ * vec3<f32>(-1.0), self_.g1_);
}

fn antiScalar_reversal(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle_reversal(self_: Circle) -> Circle {
    return Circle(self_.g0_ * vec4<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec3<f32>(-1.0));
}

fn dipole_reversal(self_: Dipole) -> Dipole {
    return Dipole(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0), self_.g2_ * vec4<f32>(-1.0));
}

fn dualNum_reversal(self_: DualNum) -> DualNum {
    return self_;
}

fn flatPoint_reversal(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0_ * vec4<f32>(-1.0));
}

fn flector_reversal(self_: Flector) -> Flector {
    return Flector(self_.g0_ * vec4<f32>(-1.0), self_.g1_);
}

fn line_reversal(self_: Line) -> Line {
    return Line(self_.g0_ * vec3<f32>(-1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn motor_reversal(self_: Motor) -> Motor {
    return Motor(self_.g0_ * vec4<f32>(-1.0, -1.0, -1.0, 1.0), self_.g1_ * vec3<f32>(-1.0));
}

fn multiVector_reversal(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0_, self_.g1_, self_.g2_, self_.g3_ * vec3<f32>(-1.0), self_.g4_ * vec3<f32>(-1.0), self_.g5_ * vec4<f32>(-1.0), self_.g6_ * vec4<f32>(-1.0), self_.g7_ * vec3<f32>(-1.0), self_.g8_ * vec3<f32>(-1.0), self_.g9_, self_.g10_);
}

fn plane_reversal(self_: Plane) -> Plane {
    return self_;
}

fn roundPoint_reversal(self_: RoundPoint) -> RoundPoint {
    return self_;
}

fn scalar_reversal(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere_reversal(self_: Sphere) -> Sphere {
    return self_;
}

fn circle_flatBulkDual(self_: Circle) -> Dipole {
    return circle_dual(circle_flatBulk(self_));
}

fn dipole_flatBulkDual(self_: Dipole) -> Circle {
    return dipole_dual(dipole_flatBulk(self_));
}

fn flatPoint_flatBulkDual(self_: FlatPoint) -> Circle {
    return flatPoint_dual(flatPoint_flatBulk(self_));
}

fn flector_flatBulkDual(self_: Flector) -> MultiVector {
    return flector_dual(flector_flatBulk(self_));
}

fn line_flatBulkDual(self_: Line) -> Dipole {
    return line_dual(line_flatBulk(self_));
}

fn motor_flatBulkDual(self_: Motor) -> MultiVector {
    return motor_dual(motor_flatBulk(self_));
}

fn multiVector_flatBulkDual(self_: MultiVector) -> MultiVector {
    return multiVector_dual(multiVector_flatBulk(self_));
}

fn plane_flatBulkDual(self_: Plane) -> RoundPoint {
    return plane_dual(plane_flatBulk(self_));
}

fn roundPoint_flatBulkDual(self_: RoundPoint) -> Sphere {
    return roundPoint_dual(roundPoint_flatBulk(self_));
}

fn sphere_flatBulkDual(self_: Sphere) -> RoundPoint {
    return sphere_dual(sphere_flatBulk(self_));
}

fn antiScalar_flatWeightDual(self_: AntiScalar) -> Scalar {
    return antiScalar_dual(antiScalar_flatWeight(self_));
}

fn circle_flatWeightDual(self_: Circle) -> Dipole {
    return circle_dual(circle_flatWeight(self_));
}

fn dipole_flatWeightDual(self_: Dipole) -> Circle {
    return dipole_dual(dipole_flatWeight(self_));
}

fn dualNum_flatWeightDual(self_: DualNum) -> DualNum {
    return dualNum_dual(dualNum_flatWeight(self_));
}

fn flatPoint_flatWeightDual(self_: FlatPoint) -> Circle {
    return flatPoint_dual(flatPoint_flatWeight(self_));
}

fn flector_flatWeightDual(self_: Flector) -> MultiVector {
    return flector_dual(flector_flatWeight(self_));
}

fn line_flatWeightDual(self_: Line) -> Dipole {
    return line_dual(line_flatWeight(self_));
}

fn motor_flatWeightDual(self_: Motor) -> MultiVector {
    return motor_dual(motor_flatWeight(self_));
}

fn multiVector_flatWeightDual(self_: MultiVector) -> MultiVector {
    return multiVector_dual(multiVector_flatWeight(self_));
}

fn plane_flatWeightDual(self_: Plane) -> RoundPoint {
    return plane_dual(plane_flatWeight(self_));
}

fn sphere_flatWeightDual(self_: Sphere) -> RoundPoint {
    return sphere_dual(sphere_flatWeight(self_));
}

fn circle_roundBulkDual(self_: Circle) -> Dipole {
    return circle_dual(circle_roundBulk(self_));
}

fn dipole_roundBulkDual(self_: Dipole) -> Circle {
    return dipole_dual(dipole_roundBulk(self_));
}

fn dualNum_roundBulkDual(self_: DualNum) -> DualNum {
    return dualNum_dual(dualNum_roundBulk(self_));
}

fn multiVector_roundBulkDual(self_: MultiVector) -> MultiVector {
    return multiVector_dual(multiVector_roundBulk(self_));
}

fn roundPoint_roundBulkDual(self_: RoundPoint) -> Sphere {
    return roundPoint_dual(roundPoint_roundBulk(self_));
}

fn scalar_roundBulkDual(self_: Scalar) -> AntiScalar {
    return scalar_dual(scalar_roundBulk(self_));
}

fn circle_roundWeightDual(self_: Circle) -> Dipole {
    return circle_dual(circle_roundWeight(self_));
}

fn dipole_roundWeightDual(self_: Dipole) -> Circle {
    return dipole_dual(dipole_roundWeight(self_));
}

fn multiVector_roundWeightDual(self_: MultiVector) -> MultiVector {
    return multiVector_dual(multiVector_roundWeight(self_));
}

fn roundPoint_roundWeightDual(self_: RoundPoint) -> Sphere {
    return roundPoint_dual(roundPoint_roundWeight(self_));
}

fn sphere_roundWeightDual(self_: Sphere) -> RoundPoint {
    return sphere_dual(sphere_roundWeight(self_));
}

fn antiScalar_antiGrade() -> i32 {
    return 0;
}

fn circle_antiGrade() -> i32 {
    return 2;
}

fn dipole_antiGrade() -> i32 {
    return 3;
}

fn flatPoint_antiGrade() -> i32 {
    return 3;
}

fn line_antiGrade() -> i32 {
    return 2;
}

fn plane_antiGrade() -> i32 {
    return 1;
}

fn roundPoint_antiGrade() -> i32 {
    return 4;
}

fn scalar_antiGrade() -> i32 {
    return 5;
}

fn sphere_antiGrade() -> i32 {
    return 1;
}

fn antiScalar_grade() -> i32 {
    return 5;
}

fn circle_grade() -> i32 {
    return 3;
}

fn dipole_grade() -> i32 {
    return 2;
}

fn flatPoint_grade() -> i32 {
    return 2;
}

fn line_grade() -> i32 {
    return 3;
}

fn plane_grade() -> i32 {
    return 4;
}

fn roundPoint_grade() -> i32 {
    return 1;
}

fn scalar_grade() -> i32 {
    return 0;
}

fn sphere_grade() -> i32 {
    return 4;
}

fn antiScalar_antiSqrt(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(sqrt(self_.g0_));
}

fn dualNum_antiSqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let sqrt_t: f32 = sqrt(t);
    return DualNum(vec2<f32>(s / (2.0 * sqrt_t), sqrt_t));
}

fn antiScalar_attitude(self_: AntiScalar) -> Plane {
    return antiScalar_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn circle_attitude(self_: Circle) -> Dipole {
    return circle_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn dipole_attitude(self_: Dipole) -> RoundPoint {
    return dipole_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn dualNum_attitude(self_: DualNum) -> Plane {
    return dualNum_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn flatPoint_attitude(self_: FlatPoint) -> RoundPoint {
    return flatPoint_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn flector_attitude(self_: Flector) -> MultiVector {
    return flector_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn line_attitude(self_: Line) -> FlatPoint {
    return line_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn motor_attitude(self_: Motor) -> Flector {
    return motor_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn multiVector_attitude(self_: MultiVector) -> MultiVector {
    return multiVector_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn plane_attitude(self_: Plane) -> Line {
    return plane_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn roundPoint_attitude(self_: RoundPoint) -> Scalar {
    return roundPoint_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn sphere_attitude(self_: Sphere) -> Circle {
    return sphere_antiWedge_plane(self_, Plane(vec4<f32>(0.0, 0.0, 0.0, 1.0)));
}

fn circle_carrier(self_: Circle) -> Sphere {
    return circle_wedge_roundPoint(self_, RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn dipole_carrier(self_: Dipole) -> Circle {
    return dipole_wedge_roundPoint(self_, RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn dualNum_carrier(self_: DualNum) -> RoundPoint {
    return dualNum_wedge_roundPoint(self_, RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn multiVector_carrier(self_: MultiVector) -> MultiVector {
    return multiVector_wedge_roundPoint(self_, RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn roundPoint_carrier(self_: RoundPoint) -> Dipole {
    return roundPoint_wedge_roundPoint(self_, RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn scalar_carrier(self_: Scalar) -> RoundPoint {
    return scalar_wedge_roundPoint(self_, RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn sphere_carrier(self_: Sphere) -> AntiScalar {
    return sphere_wedge_roundPoint(self_, RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn circle_coCarrier(self_: Circle) -> Circle {
    return dipole_wedge_roundPoint(circle_antiDual(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn dipole_coCarrier(self_: Dipole) -> Sphere {
    return circle_wedge_roundPoint(dipole_antiDual(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn dualNum_coCarrier(self_: DualNum) -> RoundPoint {
    return dualNum_wedge_roundPoint(dualNum_antiDual(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn multiVector_coCarrier(self_: MultiVector) -> MultiVector {
    return multiVector_wedge_roundPoint(multiVector_antiDual(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn roundPoint_coCarrier(self_: RoundPoint) -> AntiScalar {
    return sphere_wedge_roundPoint(roundPoint_antiDual(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn sphere_coCarrier(self_: Sphere) -> Dipole {
    return roundPoint_wedge_roundPoint(sphere_antiDual(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
}

fn dualNum_sqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let sqrt_s: f32 = sqrt(s);
    return DualNum(vec2<f32>(sqrt_s, t / (2.0 * sqrt_s)));
}

fn scalar_sqrt(self_: Scalar) -> Scalar {
    return Scalar(sqrt(self_.g0_));
}

fn circle_center(self_: Circle) -> RoundPoint {
    return circle_antiWedge_circle(circle_coCarrier(self_), self_);
}

fn dipole_center(self_: Dipole) -> RoundPoint {
    return sphere_antiWedge_dipole(dipole_coCarrier(self_), self_);
}

fn dualNum_center(self_: DualNum) -> RoundPoint {
    return roundPoint_antiWedge_dualNum(dualNum_coCarrier(self_), self_);
}

fn multiVector_center(self_: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_coCarrier(self_), self_);
}

fn roundPoint_center(self_: RoundPoint) -> RoundPoint {
    return antiScalar_antiWedge_roundPoint(roundPoint_coCarrier(self_), self_);
}

fn sphere_center(self_: Sphere) -> RoundPoint {
    return dipole_antiWedge_sphere(sphere_coCarrier(self_), self_);
}

fn circle_container(self_: Circle) -> Sphere {
    return circle_wedge_roundPoint(self_, sphere_antiDual(circle_carrier(self_)));
}

fn dipole_container(self_: Dipole) -> Sphere {
    return dipole_wedge_dipole(self_, circle_antiDual(dipole_carrier(self_)));
}

fn dualNum_container(self_: DualNum) -> Sphere {
    return dualNum_wedge_sphere(self_, roundPoint_antiDual(dualNum_carrier(self_)));
}

fn multiVector_container(self_: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(self_, multiVector_antiDual(multiVector_carrier(self_)));
}

fn roundPoint_container(self_: RoundPoint) -> Sphere {
    return roundPoint_wedge_circle(self_, dipole_antiDual(roundPoint_carrier(self_)));
}

fn scalar_container(self_: Scalar) -> Sphere {
    return scalar_wedge_sphere(self_, roundPoint_antiDual(scalar_carrier(self_)));
}

fn sphere_container(self_: Sphere) -> Sphere {
    return sphere_wedge_scalar(self_, antiScalar_antiDual(sphere_carrier(self_)));
}

fn circle_partner(self_: Circle) -> Circle {
    return sphere_antiWedge_sphere(sphere_neg(dipole_container(circle_dual(self_))), circle_carrier(self_));
}

fn dipole_partner(self_: Dipole) -> Dipole {
    return sphere_antiWedge_circle(sphere_neg(circle_container(dipole_dual(self_))), dipole_carrier(self_));
}

fn dualNum_partner(self_: DualNum) -> Scalar {
    return sphere_antiWedge_roundPoint(sphere_neg(dualNum_container(dualNum_dual(self_))), dualNum_carrier(self_));
}

fn multiVector_partner(self_: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_neg(multiVector_container(multiVector_dual(self_))), multiVector_carrier(self_));
}

fn roundPoint_partner(self_: RoundPoint) -> RoundPoint {
    return sphere_antiWedge_dipole(sphere_neg(sphere_container(roundPoint_dual(self_))), roundPoint_carrier(self_));
}

fn sphere_partner(self_: Sphere) -> Sphere {
    return sphere_antiWedge_antiScalar(sphere_neg(roundPoint_container(sphere_dual(self_))), sphere_carrier(self_));
}

fn antiScalar_antiInverse(self_: AntiScalar) -> AntiScalar {
    return antiScalar_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), antiScalar_antiDot_antiScalar(self_, self_)));
}

fn circle_antiInverse(self_: Circle) -> Circle {
    return circle_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), circle_antiDot_circle(self_, self_)));
}

fn dipole_antiInverse(self_: Dipole) -> Dipole {
    return dipole_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), dipole_antiDot_dipole(self_, self_)));
}

fn dualNum_antiInverse(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(-1.0 * s / (t * t), 1.0 / t));
}

fn flatPoint_antiInverse(self_: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), flatPoint_antiDot_flatPoint(self_, self_)));
}

fn flector_antiInverse(self_: Flector) -> Flector {
    return flector_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), flector_antiDot_flector(self_, self_)));
}

fn line_antiInverse(self_: Line) -> Line {
    return line_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), line_antiDot_line(self_, self_)));
}

fn motor_antiInverse(self_: Motor) -> Motor {
    return motor_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), motor_antiDot_motor(self_, self_)));
}

fn multiVector_antiInverse(self_: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), multiVector_antiDot_multiVector(self_, self_)));
}

fn plane_antiInverse(self_: Plane) -> Plane {
    return plane_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), plane_antiDot_plane(self_, self_)));
}

fn roundPoint_antiInverse(self_: RoundPoint) -> RoundPoint {
    return roundPoint_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), roundPoint_antiDot_roundPoint(self_, self_)));
}

fn scalar_antiInverse(self_: Scalar) -> Scalar {
    return scalar_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), scalar_antiDot_scalar(self_, self_)));
}

fn sphere_antiInverse(self_: Sphere) -> Sphere {
    return sphere_antiWedgeDot_antiScalar(self_, antiScalar_div_antiScalar(antiScalar_unit(), sphere_antiDot_sphere(self_, self_)));
}

fn antiScalar_inverse(self_: AntiScalar) -> AntiScalar {
    return antiScalar_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), antiScalar_dot_antiScalar(self_, self_)));
}

fn circle_inverse(self_: Circle) -> Circle {
    return circle_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), circle_dot_circle(self_, self_)));
}

fn dipole_inverse(self_: Dipole) -> Dipole {
    return dipole_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), dipole_dot_dipole(self_, self_)));
}

fn dualNum_inverse(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(1.0 / s, -1.0 * t / (s * s)));
}

fn flatPoint_inverse(self_: FlatPoint) -> FlatPoint {
    return flatPoint_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), flatPoint_dot_flatPoint(self_, self_)));
}

fn flector_inverse(self_: Flector) -> Flector {
    return flector_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), flector_dot_flector(self_, self_)));
}

fn line_inverse(self_: Line) -> Line {
    return line_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), line_dot_line(self_, self_)));
}

fn motor_inverse(self_: Motor) -> Motor {
    return motor_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), motor_dot_motor(self_, self_)));
}

fn multiVector_inverse(self_: MultiVector) -> MultiVector {
    return multiVector_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), multiVector_dot_multiVector(self_, self_)));
}

fn plane_inverse(self_: Plane) -> Plane {
    return plane_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), plane_dot_plane(self_, self_)));
}

fn roundPoint_inverse(self_: RoundPoint) -> RoundPoint {
    return roundPoint_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), roundPoint_dot_roundPoint(self_, self_)));
}

fn scalar_inverse(self_: Scalar) -> Scalar {
    return scalar_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), scalar_dot_scalar(self_, self_)));
}

fn sphere_inverse(self_: Sphere) -> Sphere {
    return sphere_wedgeDot_scalar(self_, scalar_div_scalar(scalar_unit(), sphere_dot_sphere(self_, self_)));
}

fn dualNum_antiCos(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(-1.0 * s * sin(t), cos(t)));
}

fn antiScalar_antiCosh(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(cosh(self_.g0_));
}

fn dualNum_antiCosh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(s * sinh(t), cosh(t)));
}

fn antiScalar_antiExp(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(exp(self_.g0_));
}

fn dualNum_antiExp(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let exp_t: f32 = exp(t);
    return DualNum(vec2<f32>(s * exp_t, exp_t));
}

fn antiScalar_antiInverseSqrt(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(1.0 / sqrt(self_.g0_));
}

fn dualNum_antiInverseSqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let sqrt_t: f32 = sqrt(t);
    return DualNum(vec2<f32>(-1.0 * s / (2.0 * t * sqrt_t), 1.0 / sqrt_t));
}

fn antiScalar_antiPow(self_: AntiScalar, other: f32) -> AntiScalar {
    return AntiScalar(pow(self_.g0_, other));
}

fn dualNum_antiPow(self_: DualNum, other: f32) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(other * pow(t, other - 1.0) * s, pow(t, other)));
}

fn dualNum_antiSin(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(s * cos(t), sin(t)));
}

fn antiScalar_antiSinh(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(sinh(self_.g0_));
}

fn dualNum_antiSinh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(s * cosh(t), sinh(t)));
}

fn dualNum_antiTan(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let tan_t: f32 = tan(t);
    return DualNum(vec2<f32>(s * (1.0 + tan_t * tan_t), tan_t));
}

fn antiScalar_antiTanh(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(tanh(self_.g0_));
}

fn dualNum_antiTanh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let tanh_t: f32 = tanh(t);
    return DualNum(vec2<f32>(s * (1.0 - tanh_t * tanh_t), tanh_t));
}

fn dualNum_cos(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(cos(s), -1.0 * t * sin(s)));
}

fn dualNum_cosh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(cosh(s), t * sinh(s)));
}

fn scalar_cosh(self_: Scalar) -> Scalar {
    return Scalar(cosh(self_.g0_));
}

fn dualNum_exp(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let exp_s: f32 = exp(s);
    return DualNum(vec2<f32>(exp_s, t * exp_s));
}

fn scalar_exp(self_: Scalar) -> Scalar {
    return Scalar(exp(self_.g0_));
}

fn dualNum_inverseSqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let sqrt_s: f32 = sqrt(s);
    return DualNum(vec2<f32>(1.0 / sqrt_s, -1.0 * t / (2.0 * s * sqrt_s)));
}

fn scalar_inverseSqrt(self_: Scalar) -> Scalar {
    return Scalar(1.0 / sqrt(self_.g0_));
}

fn dualNum_pow(self_: DualNum, other: f32) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(pow(s, other), other * pow(s, other - 1.0) * t));
}

fn scalar_pow(self_: Scalar, other: f32) -> Scalar {
    return Scalar(pow(self_.g0_, other));
}

fn dualNum_sin(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(sin(s), t * cos(s)));
}

fn dualNum_sinh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    return DualNum(vec2<f32>(sinh(s), t * cosh(s)));
}

fn scalar_sinh(self_: Scalar) -> Scalar {
    return Scalar(sinh(self_.g0_));
}

fn dualNum_tan(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let tan_s: f32 = tan(s);
    return DualNum(vec2<f32>(tan_s, t * (1.0 + tan_s * tan_s)));
}

fn dualNum_tanh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0_.x;
    let t: f32 = self_.g0_.y;
    let tanh_s: f32 = tanh(s);
    return DualNum(vec2<f32>(tanh_s, t * (1.0 - tanh_s * tanh_s)));
}

fn scalar_tanh(self_: Scalar) -> Scalar {
    return Scalar(tanh(self_.g0_));
}

fn circle_roundBulkNormSquared(self_: Circle) -> Scalar {
    let round_bulk_carrier: Circle = circle_roundBulk(self_);
    return circle_dot_circle(round_bulk_carrier, round_bulk_carrier);
}

fn dipole_roundBulkNormSquared(self_: Dipole) -> Scalar {
    let round_bulk_carrier: Dipole = dipole_roundBulk(self_);
    return dipole_dot_dipole(round_bulk_carrier, round_bulk_carrier);
}

fn dualNum_roundBulkNormSquared(self_: DualNum) -> Scalar {
    let round_bulk_carrier: DualNum = dualNum_roundBulk(self_);
    return dualNum_dot_dualNum(round_bulk_carrier, round_bulk_carrier);
}

fn multiVector_roundBulkNormSquared(self_: MultiVector) -> Scalar {
    let round_bulk_carrier: MultiVector = multiVector_roundBulk(self_);
    return multiVector_dot_multiVector(round_bulk_carrier, round_bulk_carrier);
}

fn roundPoint_roundBulkNormSquared(self_: RoundPoint) -> Scalar {
    let round_bulk_carrier: RoundPoint = roundPoint_roundBulk(self_);
    return roundPoint_dot_roundPoint(round_bulk_carrier, round_bulk_carrier);
}

fn scalar_roundBulkNormSquared(self_: Scalar) -> Scalar {
    let round_bulk_carrier: Scalar = scalar_roundBulk(self_);
    return scalar_dot_scalar(round_bulk_carrier, round_bulk_carrier);
}

fn circle_roundBulkNorm(self_: Circle) -> Scalar {
    return scalar_sqrt(circle_roundBulkNormSquared(self_));
}

fn dipole_roundBulkNorm(self_: Dipole) -> Scalar {
    return scalar_sqrt(dipole_roundBulkNormSquared(self_));
}

fn dualNum_roundBulkNorm(self_: DualNum) -> Scalar {
    return scalar_sqrt(dualNum_roundBulkNormSquared(self_));
}

fn multiVector_roundBulkNorm(self_: MultiVector) -> Scalar {
    return scalar_sqrt(multiVector_roundBulkNormSquared(self_));
}

fn roundPoint_roundBulkNorm(self_: RoundPoint) -> Scalar {
    return scalar_sqrt(roundPoint_roundBulkNormSquared(self_));
}

fn scalar_roundBulkNorm(self_: Scalar) -> Scalar {
    return scalar_sqrt(scalar_roundBulkNormSquared(self_));
}

fn circle_roundWeightNormSquared(self_: Circle) -> AntiScalar {
    let round_weight_carrier: Sphere = circle_wedge_roundPoint(circle_roundWeight(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
    return sphere_antiDot_sphere(round_weight_carrier, round_weight_carrier);
}

fn dipole_roundWeightNormSquared(self_: Dipole) -> AntiScalar {
    let round_weight_carrier: Circle = dipole_wedge_roundPoint(dipole_roundWeight(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
    return circle_antiDot_circle(round_weight_carrier, round_weight_carrier);
}

fn multiVector_roundWeightNormSquared(self_: MultiVector) -> AntiScalar {
    let round_weight_carrier: MultiVector = multiVector_wedge_roundPoint(multiVector_roundWeight(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
    return multiVector_antiDot_multiVector(round_weight_carrier, round_weight_carrier);
}

fn roundPoint_roundWeightNormSquared(self_: RoundPoint) -> AntiScalar {
    let round_weight_carrier: Dipole = roundPoint_wedge_roundPoint(roundPoint_roundWeight(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
    return dipole_antiDot_dipole(round_weight_carrier, round_weight_carrier);
}

fn sphere_roundWeightNormSquared(self_: Sphere) -> AntiScalar {
    let round_weight_carrier: AntiScalar = sphere_wedge_roundPoint(sphere_roundWeight(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0, 1.0)));
    return antiScalar_antiDot_antiScalar(round_weight_carrier, round_weight_carrier);
}

fn circle_roundWeightNorm(self_: Circle) -> AntiScalar {
    return antiScalar_antiSqrt(circle_roundWeightNormSquared(self_));
}

fn dipole_roundWeightNorm(self_: Dipole) -> AntiScalar {
    return antiScalar_antiSqrt(dipole_roundWeightNormSquared(self_));
}

fn multiVector_roundWeightNorm(self_: MultiVector) -> AntiScalar {
    return antiScalar_antiSqrt(multiVector_roundWeightNormSquared(self_));
}

fn roundPoint_roundWeightNorm(self_: RoundPoint) -> AntiScalar {
    return antiScalar_antiSqrt(roundPoint_roundWeightNormSquared(self_));
}

fn sphere_roundWeightNorm(self_: Sphere) -> AntiScalar {
    return antiScalar_antiSqrt(sphere_roundWeightNormSquared(self_));
}

fn circle_roundNormSquared(self_: Circle) -> DualNum {
    return scalar_add_antiScalar(circle_roundBulkNormSquared(self_), circle_roundWeightNormSquared(self_));
}

fn dipole_roundNormSquared(self_: Dipole) -> DualNum {
    return scalar_add_antiScalar(dipole_roundBulkNormSquared(self_), dipole_roundWeightNormSquared(self_));
}

fn multiVector_roundNormSquared(self_: MultiVector) -> DualNum {
    return scalar_add_antiScalar(multiVector_roundBulkNormSquared(self_), multiVector_roundWeightNormSquared(self_));
}

fn roundPoint_roundNormSquared(self_: RoundPoint) -> DualNum {
    return scalar_add_antiScalar(roundPoint_roundBulkNormSquared(self_), roundPoint_roundWeightNormSquared(self_));
}

fn circle_roundNorm(self_: Circle) -> DualNum {
    return scalar_add_antiScalar(circle_roundBulkNorm(self_), circle_roundWeightNorm(self_));
}

fn dipole_roundNorm(self_: Dipole) -> DualNum {
    return scalar_add_antiScalar(dipole_roundBulkNorm(self_), dipole_roundWeightNorm(self_));
}

fn multiVector_roundNorm(self_: MultiVector) -> DualNum {
    return scalar_add_antiScalar(multiVector_roundBulkNorm(self_), multiVector_roundWeightNorm(self_));
}

fn roundPoint_roundNorm(self_: RoundPoint) -> DualNum {
    return scalar_add_antiScalar(roundPoint_roundBulkNorm(self_), roundPoint_roundWeightNorm(self_));
}

fn circle_unitizedRoundNormSquared(self_: Circle) -> f32 {
    return circle_roundBulkNormSquared(self_).g0_ / circle_roundWeightNormSquared(self_).g0_;
}

fn dipole_unitizedRoundNormSquared(self_: Dipole) -> f32 {
    return dipole_roundBulkNormSquared(self_).g0_ / dipole_roundWeightNormSquared(self_).g0_;
}

fn multiVector_unitizedRoundNormSquared(self_: MultiVector) -> f32 {
    return multiVector_roundBulkNormSquared(self_).g0_ / multiVector_roundWeightNormSquared(self_).g0_;
}

fn roundPoint_unitizedRoundNormSquared(self_: RoundPoint) -> f32 {
    return roundPoint_roundBulkNormSquared(self_).g0_ / roundPoint_roundWeightNormSquared(self_).g0_;
}

fn circle_unitizedRoundNorm(self_: Circle) -> f32 {
    return sqrt(circle_unitizedRoundNormSquared(self_));
}

fn dipole_unitizedRoundNorm(self_: Dipole) -> f32 {
    return sqrt(dipole_unitizedRoundNormSquared(self_));
}

fn multiVector_unitizedRoundNorm(self_: MultiVector) -> f32 {
    return sqrt(multiVector_unitizedRoundNormSquared(self_));
}

fn roundPoint_unitizedRoundNorm(self_: RoundPoint) -> f32 {
    return sqrt(roundPoint_unitizedRoundNormSquared(self_));
}

fn circle_flatBulkNormSquared(self_: Circle) -> Scalar {
    let flat_bulk_thing: Sphere = circle_wedge_roundPoint(circle_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return sphere_dot_sphere(flat_bulk_thing, flat_bulk_thing);
}

fn dipole_flatBulkNormSquared(self_: Dipole) -> Scalar {
    let flat_bulk_thing: Circle = dipole_wedge_roundPoint(dipole_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return circle_dot_circle(flat_bulk_thing, flat_bulk_thing);
}

fn flatPoint_flatBulkNormSquared(self_: FlatPoint) -> Scalar {
    let flat_bulk_thing: Line = flatPoint_wedge_roundPoint(flatPoint_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return line_dot_line(flat_bulk_thing, flat_bulk_thing);
}

fn flector_flatBulkNormSquared(self_: Flector) -> Scalar {
    let flat_bulk_thing: Motor = flector_wedge_roundPoint(flector_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return motor_dot_motor(flat_bulk_thing, flat_bulk_thing);
}

fn line_flatBulkNormSquared(self_: Line) -> Scalar {
    let flat_bulk_thing: Plane = line_wedge_roundPoint(line_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return plane_dot_plane(flat_bulk_thing, flat_bulk_thing);
}

fn motor_flatBulkNormSquared(self_: Motor) -> Scalar {
    let flat_bulk_thing: Plane = motor_wedge_roundPoint(motor_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return plane_dot_plane(flat_bulk_thing, flat_bulk_thing);
}

fn multiVector_flatBulkNormSquared(self_: MultiVector) -> Scalar {
    let flat_bulk_thing: MultiVector = multiVector_wedge_roundPoint(multiVector_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return multiVector_dot_multiVector(flat_bulk_thing, flat_bulk_thing);
}

fn plane_flatBulkNormSquared(self_: Plane) -> Scalar {
    let flat_bulk_thing: AntiScalar = plane_wedge_roundPoint(plane_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return antiScalar_dot_antiScalar(flat_bulk_thing, flat_bulk_thing);
}

fn roundPoint_flatBulkNormSquared(self_: RoundPoint) -> Scalar {
    let flat_bulk_thing: Dipole = roundPoint_wedge_roundPoint(roundPoint_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return dipole_dot_dipole(flat_bulk_thing, flat_bulk_thing);
}

fn sphere_flatBulkNormSquared(self_: Sphere) -> Scalar {
    let flat_bulk_thing: AntiScalar = sphere_wedge_roundPoint(sphere_flatBulk(self_), RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)));
    return antiScalar_dot_antiScalar(flat_bulk_thing, flat_bulk_thing);
}

fn circle_flatBulkNorm(self_: Circle) -> Scalar {
    return scalar_sqrt(circle_flatBulkNormSquared(self_));
}

fn dipole_flatBulkNorm(self_: Dipole) -> Scalar {
    return scalar_sqrt(dipole_flatBulkNormSquared(self_));
}

fn flatPoint_flatBulkNorm(self_: FlatPoint) -> Scalar {
    return scalar_sqrt(flatPoint_flatBulkNormSquared(self_));
}

fn flector_flatBulkNorm(self_: Flector) -> Scalar {
    return scalar_sqrt(flector_flatBulkNormSquared(self_));
}

fn line_flatBulkNorm(self_: Line) -> Scalar {
    return scalar_sqrt(line_flatBulkNormSquared(self_));
}

fn motor_flatBulkNorm(self_: Motor) -> Scalar {
    return scalar_sqrt(motor_flatBulkNormSquared(self_));
}

fn multiVector_flatBulkNorm(self_: MultiVector) -> Scalar {
    return scalar_sqrt(multiVector_flatBulkNormSquared(self_));
}

fn plane_flatBulkNorm(self_: Plane) -> Scalar {
    return scalar_sqrt(plane_flatBulkNormSquared(self_));
}

fn roundPoint_flatBulkNorm(self_: RoundPoint) -> Scalar {
    return scalar_sqrt(roundPoint_flatBulkNormSquared(self_));
}

fn sphere_flatBulkNorm(self_: Sphere) -> Scalar {
    return scalar_sqrt(sphere_flatBulkNormSquared(self_));
}

fn antiScalar_flatWeightNormSquared(self_: AntiScalar) -> AntiScalar {
    let flat_weight: AntiScalar = antiScalar_flatWeight(self_);
    return antiScalar_antiDot_antiScalar(flat_weight, flat_weight);
}

fn circle_flatWeightNormSquared(self_: Circle) -> AntiScalar {
    let flat_weight: Circle = circle_flatWeight(self_);
    return circle_antiDot_circle(flat_weight, flat_weight);
}

fn dipole_flatWeightNormSquared(self_: Dipole) -> AntiScalar {
    let flat_weight: Dipole = dipole_flatWeight(self_);
    return dipole_antiDot_dipole(flat_weight, flat_weight);
}

fn dualNum_flatWeightNormSquared(self_: DualNum) -> AntiScalar {
    let flat_weight: DualNum = dualNum_flatWeight(self_);
    return dualNum_antiDot_dualNum(flat_weight, flat_weight);
}

fn flatPoint_flatWeightNormSquared(self_: FlatPoint) -> AntiScalar {
    let flat_weight: FlatPoint = flatPoint_flatWeight(self_);
    return flatPoint_antiDot_flatPoint(flat_weight, flat_weight);
}

fn flector_flatWeightNormSquared(self_: Flector) -> AntiScalar {
    let flat_weight: Flector = flector_flatWeight(self_);
    return flector_antiDot_flector(flat_weight, flat_weight);
}

fn line_flatWeightNormSquared(self_: Line) -> AntiScalar {
    let flat_weight: Line = line_flatWeight(self_);
    return line_antiDot_line(flat_weight, flat_weight);
}

fn motor_flatWeightNormSquared(self_: Motor) -> AntiScalar {
    let flat_weight: Motor = motor_flatWeight(self_);
    return motor_antiDot_motor(flat_weight, flat_weight);
}

fn multiVector_flatWeightNormSquared(self_: MultiVector) -> AntiScalar {
    let flat_weight: MultiVector = multiVector_flatWeight(self_);
    return multiVector_antiDot_multiVector(flat_weight, flat_weight);
}

fn plane_flatWeightNormSquared(self_: Plane) -> AntiScalar {
    let flat_weight: Plane = plane_flatWeight(self_);
    return plane_antiDot_plane(flat_weight, flat_weight);
}

fn sphere_flatWeightNormSquared(self_: Sphere) -> AntiScalar {
    let flat_weight: Sphere = sphere_flatWeight(self_);
    return sphere_antiDot_sphere(flat_weight, flat_weight);
}

fn antiScalar_flatWeightNorm(self_: AntiScalar) -> AntiScalar {
    return antiScalar_antiSqrt(antiScalar_flatWeightNormSquared(self_));
}

fn circle_flatWeightNorm(self_: Circle) -> AntiScalar {
    return antiScalar_antiSqrt(circle_flatWeightNormSquared(self_));
}

fn dipole_flatWeightNorm(self_: Dipole) -> AntiScalar {
    return antiScalar_antiSqrt(dipole_flatWeightNormSquared(self_));
}

fn dualNum_flatWeightNorm(self_: DualNum) -> AntiScalar {
    return antiScalar_antiSqrt(dualNum_flatWeightNormSquared(self_));
}

fn flatPoint_flatWeightNorm(self_: FlatPoint) -> AntiScalar {
    return antiScalar_antiSqrt(flatPoint_flatWeightNormSquared(self_));
}

fn flector_flatWeightNorm(self_: Flector) -> AntiScalar {
    return antiScalar_antiSqrt(flector_flatWeightNormSquared(self_));
}

fn line_flatWeightNorm(self_: Line) -> AntiScalar {
    return antiScalar_antiSqrt(line_flatWeightNormSquared(self_));
}

fn motor_flatWeightNorm(self_: Motor) -> AntiScalar {
    return antiScalar_antiSqrt(motor_flatWeightNormSquared(self_));
}

fn multiVector_flatWeightNorm(self_: MultiVector) -> AntiScalar {
    return antiScalar_antiSqrt(multiVector_flatWeightNormSquared(self_));
}

fn plane_flatWeightNorm(self_: Plane) -> AntiScalar {
    return antiScalar_antiSqrt(plane_flatWeightNormSquared(self_));
}

fn sphere_flatWeightNorm(self_: Sphere) -> AntiScalar {
    return antiScalar_antiSqrt(sphere_flatWeightNormSquared(self_));
}

fn circle_flatNormSquared(self_: Circle) -> DualNum {
    return scalar_add_antiScalar(circle_flatBulkNormSquared(self_), circle_flatWeightNormSquared(self_));
}

fn dipole_flatNormSquared(self_: Dipole) -> DualNum {
    return scalar_add_antiScalar(dipole_flatBulkNormSquared(self_), dipole_flatWeightNormSquared(self_));
}

fn flatPoint_flatNormSquared(self_: FlatPoint) -> DualNum {
    return scalar_add_antiScalar(flatPoint_flatBulkNormSquared(self_), flatPoint_flatWeightNormSquared(self_));
}

fn flector_flatNormSquared(self_: Flector) -> DualNum {
    return scalar_add_antiScalar(flector_flatBulkNormSquared(self_), flector_flatWeightNormSquared(self_));
}

fn line_flatNormSquared(self_: Line) -> DualNum {
    return scalar_add_antiScalar(line_flatBulkNormSquared(self_), line_flatWeightNormSquared(self_));
}

fn motor_flatNormSquared(self_: Motor) -> DualNum {
    return scalar_add_antiScalar(motor_flatBulkNormSquared(self_), motor_flatWeightNormSquared(self_));
}

fn multiVector_flatNormSquared(self_: MultiVector) -> DualNum {
    return scalar_add_antiScalar(multiVector_flatBulkNormSquared(self_), multiVector_flatWeightNormSquared(self_));
}

fn plane_flatNormSquared(self_: Plane) -> DualNum {
    return scalar_add_antiScalar(plane_flatBulkNormSquared(self_), plane_flatWeightNormSquared(self_));
}

fn sphere_flatNormSquared(self_: Sphere) -> DualNum {
    return scalar_add_antiScalar(sphere_flatBulkNormSquared(self_), sphere_flatWeightNormSquared(self_));
}

fn circle_flatNorm(self_: Circle) -> DualNum {
    return scalar_add_antiScalar(circle_flatBulkNorm(self_), circle_flatWeightNorm(self_));
}

fn dipole_flatNorm(self_: Dipole) -> DualNum {
    return scalar_add_antiScalar(dipole_flatBulkNorm(self_), dipole_flatWeightNorm(self_));
}

fn flatPoint_flatNorm(self_: FlatPoint) -> DualNum {
    return scalar_add_antiScalar(flatPoint_flatBulkNorm(self_), flatPoint_flatWeightNorm(self_));
}

fn flector_flatNorm(self_: Flector) -> DualNum {
    return scalar_add_antiScalar(flector_flatBulkNorm(self_), flector_flatWeightNorm(self_));
}

fn line_flatNorm(self_: Line) -> DualNum {
    return scalar_add_antiScalar(line_flatBulkNorm(self_), line_flatWeightNorm(self_));
}

fn motor_flatNorm(self_: Motor) -> DualNum {
    return scalar_add_antiScalar(motor_flatBulkNorm(self_), motor_flatWeightNorm(self_));
}

fn multiVector_flatNorm(self_: MultiVector) -> DualNum {
    return scalar_add_antiScalar(multiVector_flatBulkNorm(self_), multiVector_flatWeightNorm(self_));
}

fn plane_flatNorm(self_: Plane) -> DualNum {
    return scalar_add_antiScalar(plane_flatBulkNorm(self_), plane_flatWeightNorm(self_));
}

fn sphere_flatNorm(self_: Sphere) -> DualNum {
    return scalar_add_antiScalar(sphere_flatBulkNorm(self_), sphere_flatWeightNorm(self_));
}

fn circle_unitizedFlatNormSquared(self_: Circle) -> f32 {
    return circle_flatBulkNormSquared(self_).g0_ / circle_flatWeightNormSquared(self_).g0_;
}

fn dipole_unitizedFlatNormSquared(self_: Dipole) -> f32 {
    return dipole_flatBulkNormSquared(self_).g0_ / dipole_flatWeightNormSquared(self_).g0_;
}

fn flatPoint_unitizedFlatNormSquared(self_: FlatPoint) -> f32 {
    return flatPoint_flatBulkNormSquared(self_).g0_ / flatPoint_flatWeightNormSquared(self_).g0_;
}

fn flector_unitizedFlatNormSquared(self_: Flector) -> f32 {
    return flector_flatBulkNormSquared(self_).g0_ / flector_flatWeightNormSquared(self_).g0_;
}

fn line_unitizedFlatNormSquared(self_: Line) -> f32 {
    return line_flatBulkNormSquared(self_).g0_ / line_flatWeightNormSquared(self_).g0_;
}

fn motor_unitizedFlatNormSquared(self_: Motor) -> f32 {
    return motor_flatBulkNormSquared(self_).g0_ / motor_flatWeightNormSquared(self_).g0_;
}

fn multiVector_unitizedFlatNormSquared(self_: MultiVector) -> f32 {
    return multiVector_flatBulkNormSquared(self_).g0_ / multiVector_flatWeightNormSquared(self_).g0_;
}

fn plane_unitizedFlatNormSquared(self_: Plane) -> f32 {
    return plane_flatBulkNormSquared(self_).g0_ / plane_flatWeightNormSquared(self_).g0_;
}

fn sphere_unitizedFlatNormSquared(self_: Sphere) -> f32 {
    return sphere_flatBulkNormSquared(self_).g0_ / sphere_flatWeightNormSquared(self_).g0_;
}

fn circle_unitizedFlatNorm(self_: Circle) -> f32 {
    return sqrt(circle_unitizedFlatNormSquared(self_));
}

fn dipole_unitizedFlatNorm(self_: Dipole) -> f32 {
    return sqrt(dipole_unitizedFlatNormSquared(self_));
}

fn flatPoint_unitizedFlatNorm(self_: FlatPoint) -> f32 {
    return sqrt(flatPoint_unitizedFlatNormSquared(self_));
}

fn flector_unitizedFlatNorm(self_: Flector) -> f32 {
    return sqrt(flector_unitizedFlatNormSquared(self_));
}

fn line_unitizedFlatNorm(self_: Line) -> f32 {
    return sqrt(line_unitizedFlatNormSquared(self_));
}

fn motor_unitizedFlatNorm(self_: Motor) -> f32 {
    return sqrt(motor_unitizedFlatNormSquared(self_));
}

fn multiVector_unitizedFlatNorm(self_: MultiVector) -> f32 {
    return sqrt(multiVector_unitizedFlatNormSquared(self_));
}

fn plane_unitizedFlatNorm(self_: Plane) -> f32 {
    return sqrt(plane_unitizedFlatNormSquared(self_));
}

fn sphere_unitizedFlatNorm(self_: Sphere) -> f32 {
    return sqrt(sphere_unitizedFlatNormSquared(self_));
}

fn circle_centerNormSquared(self_: Circle) -> Scalar {
    return scalar_add_scalar(circle_roundBulkNormSquared(self_), antiScalar_antiDual(circle_flatWeightNormSquared(self_)));
}

fn dipole_centerNormSquared(self_: Dipole) -> Scalar {
    return scalar_add_scalar(dipole_roundBulkNormSquared(self_), antiScalar_antiDual(dipole_flatWeightNormSquared(self_)));
}

fn dualNum_centerNormSquared(self_: DualNum) -> Scalar {
    return scalar_add_scalar(dualNum_roundBulkNormSquared(self_), antiScalar_antiDual(dualNum_flatWeightNormSquared(self_)));
}

fn multiVector_centerNormSquared(self_: MultiVector) -> Scalar {
    return scalar_add_scalar(multiVector_roundBulkNormSquared(self_), antiScalar_antiDual(multiVector_flatWeightNormSquared(self_)));
}

fn circle_centerNorm(self_: Circle) -> Scalar {
    return scalar_sqrt(circle_centerNormSquared(self_));
}

fn dipole_centerNorm(self_: Dipole) -> Scalar {
    return scalar_sqrt(dipole_centerNormSquared(self_));
}

fn dualNum_centerNorm(self_: DualNum) -> Scalar {
    return scalar_sqrt(dualNum_centerNormSquared(self_));
}

fn multiVector_centerNorm(self_: MultiVector) -> Scalar {
    return scalar_sqrt(multiVector_centerNormSquared(self_));
}

fn circle_unitizedCenterNormSquared(self_: Circle) -> f32 {
    return circle_centerNormSquared(self_).g0_ / circle_roundWeightNormSquared(self_).g0_;
}

fn dipole_unitizedCenterNormSquared(self_: Dipole) -> f32 {
    return dipole_centerNormSquared(self_).g0_ / dipole_roundWeightNormSquared(self_).g0_;
}

fn multiVector_unitizedCenterNormSquared(self_: MultiVector) -> f32 {
    return multiVector_centerNormSquared(self_).g0_ / multiVector_roundWeightNormSquared(self_).g0_;
}

fn circle_unitizedCenterNorm(self_: Circle) -> f32 {
    return sqrt(circle_unitizedCenterNormSquared(self_));
}

fn dipole_unitizedCenterNorm(self_: Dipole) -> f32 {
    return sqrt(dipole_unitizedCenterNormSquared(self_));
}

fn multiVector_unitizedCenterNorm(self_: MultiVector) -> f32 {
    return sqrt(multiVector_unitizedCenterNormSquared(self_));
}

fn circle_radiusNormSquared(self_: Circle) -> Scalar {
    return antiScalar_antiDual(circle_antiDot_circle(self_, self_));
}

fn dipole_radiusNormSquared(self_: Dipole) -> Scalar {
    return antiScalar_antiDual(dipole_antiDot_dipole(self_, self_));
}

fn dualNum_radiusNormSquared(self_: DualNum) -> Scalar {
    return antiScalar_antiDual(dualNum_antiDot_dualNum(self_, self_));
}

fn multiVector_radiusNormSquared(self_: MultiVector) -> Scalar {
    return antiScalar_antiDual(multiVector_antiDot_multiVector(self_, self_));
}

fn roundPoint_radiusNormSquared(self_: RoundPoint) -> Scalar {
    return antiScalar_antiDual(roundPoint_antiDot_roundPoint(self_, self_));
}

fn sphere_radiusNormSquared(self_: Sphere) -> Scalar {
    return antiScalar_antiDual(sphere_antiDot_sphere(self_, self_));
}

fn circle_radiusNorm(self_: Circle) -> Scalar {
    return scalar_sqrt(circle_radiusNormSquared(self_));
}

fn dipole_radiusNorm(self_: Dipole) -> Scalar {
    return scalar_sqrt(dipole_radiusNormSquared(self_));
}

fn dualNum_radiusNorm(self_: DualNum) -> Scalar {
    return scalar_sqrt(dualNum_radiusNormSquared(self_));
}

fn multiVector_radiusNorm(self_: MultiVector) -> Scalar {
    return scalar_sqrt(multiVector_radiusNormSquared(self_));
}

fn roundPoint_radiusNorm(self_: RoundPoint) -> Scalar {
    return scalar_sqrt(roundPoint_radiusNormSquared(self_));
}

fn sphere_radiusNorm(self_: Sphere) -> Scalar {
    return scalar_sqrt(sphere_radiusNormSquared(self_));
}

fn circle_unitizedRadiusNormSquared(self_: Circle) -> f32 {
    return circle_radiusNormSquared(self_).g0_ / circle_roundWeightNormSquared(self_).g0_;
}

fn dipole_unitizedRadiusNormSquared(self_: Dipole) -> f32 {
    return dipole_radiusNormSquared(self_).g0_ / dipole_roundWeightNormSquared(self_).g0_;
}

fn multiVector_unitizedRadiusNormSquared(self_: MultiVector) -> f32 {
    return multiVector_radiusNormSquared(self_).g0_ / multiVector_roundWeightNormSquared(self_).g0_;
}

fn roundPoint_unitizedRadiusNormSquared(self_: RoundPoint) -> f32 {
    return roundPoint_radiusNormSquared(self_).g0_ / roundPoint_roundWeightNormSquared(self_).g0_;
}

fn sphere_unitizedRadiusNormSquared(self_: Sphere) -> f32 {
    return sphere_radiusNormSquared(self_).g0_ / sphere_roundWeightNormSquared(self_).g0_;
}

fn circle_unitizedRadiusNorm(self_: Circle) -> f32 {
    return sqrt(circle_unitizedRadiusNormSquared(self_));
}

fn dipole_unitizedRadiusNorm(self_: Dipole) -> f32 {
    return sqrt(dipole_unitizedRadiusNormSquared(self_));
}

fn multiVector_unitizedRadiusNorm(self_: MultiVector) -> f32 {
    return sqrt(multiVector_unitizedRadiusNormSquared(self_));
}

fn roundPoint_unitizedRadiusNorm(self_: RoundPoint) -> f32 {
    return sqrt(roundPoint_unitizedRadiusNormSquared(self_));
}

fn sphere_unitizedRadiusNorm(self_: Sphere) -> f32 {
    return sqrt(sphere_unitizedRadiusNormSquared(self_));
}

fn circle_unitize(self_: Circle) -> Circle {
    return circle_wedgeDot_scalar(self_, Scalar(1.0 / circle_roundWeightNorm(self_).g0_));
}

fn dipole_unitize(self_: Dipole) -> Dipole {
    return dipole_wedgeDot_scalar(self_, Scalar(1.0 / dipole_roundWeightNorm(self_).g0_));
}

fn multiVector_unitize(self_: MultiVector) -> MultiVector {
    return multiVector_wedgeDot_scalar(self_, Scalar(1.0 / multiVector_roundWeightNorm(self_).g0_));
}

fn roundPoint_unitize(self_: RoundPoint) -> RoundPoint {
    return roundPoint_wedgeDot_scalar(self_, Scalar(1.0 / roundPoint_roundWeightNorm(self_).g0_));
}

fn sphere_unitize(self_: Sphere) -> Sphere {
    return sphere_wedgeDot_scalar(self_, Scalar(1.0 / sphere_roundWeightNorm(self_).g0_));
}

fn antiScalar_sandwich_circle(self_: AntiScalar, other: Circle) -> Circle {
    return circle_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_circle(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return dipole_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_dipole(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_flatPoint(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_flatPoint(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_flector(self_: AntiScalar, other: Flector) -> Flector {
    return flector_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_flector(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_line(self_: AntiScalar, other: Line) -> Line {
    return line_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_line(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_motor(self_: AntiScalar, other: Motor) -> Motor {
    return motor_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_motor(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_multiVector(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_plane(self_: AntiScalar, other: Plane) -> Plane {
    return plane_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_plane(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_roundPoint(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return roundPoint_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_roundPoint(self_, other), antiScalar_antiReversal(self_));
}

fn antiScalar_sandwich_sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return sphere_antiWedgeDot_antiScalar(antiScalar_antiWedgeDot_sphere(self_, other), antiScalar_antiReversal(self_));
}

fn circle_sandwich_circle(self_: Circle, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_circle(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_dipole(self_: Circle, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_dipole(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_flatPoint(self_: Circle, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_flatPoint(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_flector(self_: Circle, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_flector(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_line(self_: Circle, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_line(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_motor(self_: Circle, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_motor(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_circle(circle_antiWedgeDot_multiVector(self_, other), circle_antiReversal(self_));
}

fn circle_sandwich_plane(self_: Circle, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_plane(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_roundPoint(self_: Circle, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_roundPoint(self_, other), circle_antiReversal(self_)));
}

fn circle_sandwich_sphere(self_: Circle, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_circle(circle_antiWedgeDot_sphere(self_, other), circle_antiReversal(self_)));
}

fn dipole_sandwich_circle(self_: Dipole, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_circle(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_dipole(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_flatPoint(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_flatPoint(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_flector(self_: Dipole, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_flector(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_line(self_: Dipole, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_line(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_motor(self_: Dipole, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_motor(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_multiVector(self_, other), dipole_antiReversal(self_));
}

fn dipole_sandwich_plane(self_: Dipole, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_plane(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_roundPoint(self_: Dipole, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_roundPoint(self_, other), dipole_antiReversal(self_)));
}

fn dipole_sandwich_sphere(self_: Dipole, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_dipole(dipole_antiWedgeDot_sphere(self_, other), dipole_antiReversal(self_)));
}

fn dualNum_sandwich_circle(self_: DualNum, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_circle(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_dipole(self_: DualNum, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_dipole(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_flatPoint(self_: DualNum, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_flatPoint(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_flector(self_: DualNum, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_flector(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_line(self_: DualNum, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_line(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_motor(self_: DualNum, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_motor(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_multiVector(self_, other), dualNum_antiReversal(self_));
}

fn dualNum_sandwich_plane(self_: DualNum, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_plane(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_roundPoint(self_: DualNum, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_roundPoint(self_, other), dualNum_antiReversal(self_)));
}

fn dualNum_sandwich_sphere(self_: DualNum, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_dualNum(dualNum_antiWedgeDot_sphere(self_, other), dualNum_antiReversal(self_)));
}

fn flatPoint_sandwich_circle(self_: FlatPoint, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_circle(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_dipole(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flector_into_flatPoint(motor_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_flatPoint(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_flector(self_: FlatPoint, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_flector(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_line(self_: FlatPoint, other: Line) -> Line {
    return multiVector_into_line(flector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_line(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_motor(self_: FlatPoint, other: Motor) -> Motor {
    return multiVector_into_motor(flector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_motor(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_multiVector(self_, other), flatPoint_antiReversal(self_));
}

fn flatPoint_sandwich_plane(self_: FlatPoint, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_plane(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_roundPoint(self_: FlatPoint, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_roundPoint(self_, other), flatPoint_antiReversal(self_)));
}

fn flatPoint_sandwich_sphere(self_: FlatPoint, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_flatPoint(flatPoint_antiWedgeDot_sphere(self_, other), flatPoint_antiReversal(self_)));
}

fn flector_sandwich_circle(self_: Flector, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_flector(flector_antiWedgeDot_circle(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_dipole(self_: Flector, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_flector(flector_antiWedgeDot_dipole(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_flatPoint(self_: Flector, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_flector(flector_antiWedgeDot_flatPoint(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_flector(self_: Flector, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_flector(flector_antiWedgeDot_flector(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_line(self_: Flector, other: Line) -> Line {
    return multiVector_into_line(flector_antiWedgeDot_flector(flector_antiWedgeDot_line(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_motor(self_: Flector, other: Motor) -> Motor {
    return multiVector_into_motor(flector_antiWedgeDot_flector(flector_antiWedgeDot_motor(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_flector(flector_antiWedgeDot_multiVector(self_, other), flector_antiReversal(self_));
}

fn flector_sandwich_plane(self_: Flector, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_flector(flector_antiWedgeDot_plane(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_roundPoint(self_: Flector, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_flector(flector_antiWedgeDot_roundPoint(self_, other), flector_antiReversal(self_)));
}

fn flector_sandwich_sphere(self_: Flector, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_flector(flector_antiWedgeDot_sphere(self_, other), flector_antiReversal(self_)));
}

fn line_sandwich_circle(self_: Line, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_line(line_antiWedgeDot_circle(self_, other), line_antiReversal(self_)));
}

fn line_sandwich_dipole(self_: Line, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_line(line_antiWedgeDot_dipole(self_, other), line_antiReversal(self_)));
}

fn line_sandwich_flatPoint(self_: Line, other: FlatPoint) -> FlatPoint {
    return flector_into_flatPoint(flector_antiWedgeDot_line(line_antiWedgeDot_flatPoint(self_, other), line_antiReversal(self_)));
}

fn line_sandwich_flector(self_: Line, other: Flector) -> Flector {
    return flector_antiWedgeDot_line(line_antiWedgeDot_flector(self_, other), line_antiReversal(self_));
}

fn line_sandwich_line(self_: Line, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_line(line_antiWedgeDot_line(self_, other), line_antiReversal(self_)));
}

fn line_sandwich_motor(self_: Line, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_line(line_antiWedgeDot_motor(self_, other), line_antiReversal(self_)));
}

fn line_sandwich_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_line(line_antiWedgeDot_multiVector(self_, other), line_antiReversal(self_));
}

fn line_sandwich_plane(self_: Line, other: Plane) -> Plane {
    return flector_into_plane(flector_antiWedgeDot_line(line_antiWedgeDot_plane(self_, other), line_antiReversal(self_)));
}

fn line_sandwich_roundPoint(self_: Line, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_line(line_antiWedgeDot_roundPoint(self_, other), line_antiReversal(self_)));
}

fn line_sandwich_sphere(self_: Line, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_line(line_antiWedgeDot_sphere(self_, other), line_antiReversal(self_)));
}

fn motor_sandwich_circle(self_: Motor, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_motor(motor_antiWedgeDot_circle(self_, other), motor_antiReversal(self_)));
}

fn motor_sandwich_dipole(self_: Motor, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_motor(motor_antiWedgeDot_dipole(self_, other), motor_antiReversal(self_)));
}

fn motor_sandwich_flatPoint(self_: Motor, other: FlatPoint) -> FlatPoint {
    return flector_into_flatPoint(flector_antiWedgeDot_motor(motor_antiWedgeDot_flatPoint(self_, other), motor_antiReversal(self_)));
}

fn motor_sandwich_flector(self_: Motor, other: Flector) -> Flector {
    return flector_antiWedgeDot_motor(motor_antiWedgeDot_flector(self_, other), motor_antiReversal(self_));
}

fn motor_sandwich_line(self_: Motor, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_motor(motor_antiWedgeDot_line(self_, other), motor_antiReversal(self_)));
}

fn motor_sandwich_motor(self_: Motor, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_motor(motor_antiWedgeDot_motor(self_, other), motor_antiReversal(self_)));
}

fn motor_sandwich_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_motor(motor_antiWedgeDot_multiVector(self_, other), motor_antiReversal(self_));
}

fn motor_sandwich_plane(self_: Motor, other: Plane) -> Plane {
    return flector_into_plane(flector_antiWedgeDot_motor(motor_antiWedgeDot_plane(self_, other), motor_antiReversal(self_)));
}

fn motor_sandwich_roundPoint(self_: Motor, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_motor(motor_antiWedgeDot_roundPoint(self_, other), motor_antiReversal(self_)));
}

fn motor_sandwich_sphere(self_: Motor, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_motor(motor_antiWedgeDot_sphere(self_, other), motor_antiReversal(self_)));
}

fn multiVector_sandwich_circle(self_: MultiVector, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_circle(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_dipole(self_: MultiVector, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_dipole(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_flatPoint(self_: MultiVector, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_flatPoint(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_flector(self_: MultiVector, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_flector(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_line(self_: MultiVector, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_line(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_motor(self_: MultiVector, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_motor(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_multiVector(self_, other), multiVector_antiReversal(self_));
}

fn multiVector_sandwich_plane(self_: MultiVector, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_plane(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_roundPoint(self_: MultiVector, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_roundPoint(self_, other), multiVector_antiReversal(self_)));
}

fn multiVector_sandwich_sphere(self_: MultiVector, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_multiVector(multiVector_antiWedgeDot_sphere(self_, other), multiVector_antiReversal(self_)));
}

fn plane_sandwich_circle(self_: Plane, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_plane(plane_antiWedgeDot_circle(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_dipole(self_: Plane, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_plane(plane_antiWedgeDot_dipole(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_flatPoint(self_: Plane, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_plane(plane_antiWedgeDot_flatPoint(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_flector(self_: Plane, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_plane(plane_antiWedgeDot_flector(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_line(self_: Plane, other: Line) -> Line {
    return multiVector_into_line(flector_antiWedgeDot_plane(plane_antiWedgeDot_line(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_motor(self_: Plane, other: Motor) -> Motor {
    return multiVector_into_motor(flector_antiWedgeDot_plane(plane_antiWedgeDot_motor(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_plane(plane_antiWedgeDot_multiVector(self_, other), plane_antiReversal(self_));
}

fn plane_sandwich_plane(self_: Plane, other: Plane) -> Plane {
    return flector_into_plane(motor_antiWedgeDot_plane(plane_antiWedgeDot_plane(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_roundPoint(self_: Plane, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_plane(plane_antiWedgeDot_roundPoint(self_, other), plane_antiReversal(self_)));
}

fn plane_sandwich_sphere(self_: Plane, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_plane(plane_antiWedgeDot_sphere(self_, other), plane_antiReversal(self_)));
}

fn roundPoint_sandwich_circle(self_: RoundPoint, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_circle(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_dipole(self_: RoundPoint, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_dipole(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_flatPoint(self_: RoundPoint, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_flatPoint(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_flector(self_: RoundPoint, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_flector(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_line(self_: RoundPoint, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_line(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_motor(self_: RoundPoint, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_motor(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_multiVector(self_, other), roundPoint_antiReversal(self_));
}

fn roundPoint_sandwich_plane(self_: RoundPoint, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_plane(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_roundPoint(self_, other), roundPoint_antiReversal(self_)));
}

fn roundPoint_sandwich_sphere(self_: RoundPoint, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_roundPoint(roundPoint_antiWedgeDot_sphere(self_, other), roundPoint_antiReversal(self_)));
}

fn scalar_sandwich_circle(self_: Scalar, other: Circle) -> Circle {
    return dipole_antiWedgeDot_scalar(scalar_antiWedgeDot_circle(self_, other), scalar_antiReversal(self_));
}

fn scalar_sandwich_dipole(self_: Scalar, other: Dipole) -> Dipole {
    return circle_antiWedgeDot_scalar(scalar_antiWedgeDot_dipole(self_, other), scalar_antiReversal(self_));
}

fn scalar_sandwich_flatPoint(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return dipole_into_flatPoint(circle_antiWedgeDot_scalar(scalar_antiWedgeDot_flatPoint(self_, other), scalar_antiReversal(self_)));
}

fn scalar_sandwich_flector(self_: Scalar, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_scalar(scalar_antiWedgeDot_flector(self_, other), scalar_antiReversal(self_)));
}

fn scalar_sandwich_line(self_: Scalar, other: Line) -> Line {
    return circle_into_line(dipole_antiWedgeDot_scalar(scalar_antiWedgeDot_line(self_, other), scalar_antiReversal(self_)));
}

fn scalar_sandwich_motor(self_: Scalar, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_scalar(scalar_antiWedgeDot_motor(self_, other), scalar_antiReversal(self_)));
}

fn scalar_sandwich_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_scalar(scalar_antiWedgeDot_multiVector(self_, other), scalar_antiReversal(self_));
}

fn scalar_sandwich_plane(self_: Scalar, other: Plane) -> Plane {
    return sphere_into_plane(roundPoint_antiWedgeDot_scalar(scalar_antiWedgeDot_plane(self_, other), scalar_antiReversal(self_)));
}

fn scalar_sandwich_roundPoint(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return sphere_antiWedgeDot_scalar(scalar_antiWedgeDot_roundPoint(self_, other), scalar_antiReversal(self_));
}

fn scalar_sandwich_sphere(self_: Scalar, other: Sphere) -> Sphere {
    return roundPoint_antiWedgeDot_scalar(scalar_antiWedgeDot_sphere(self_, other), scalar_antiReversal(self_));
}

fn sphere_sandwich_circle(self_: Sphere, other: Circle) -> Circle {
    return multiVector_into_circle(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_circle(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_dipole(self_: Sphere, other: Dipole) -> Dipole {
    return multiVector_into_dipole(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_dipole(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_flatPoint(self_: Sphere, other: FlatPoint) -> FlatPoint {
    return multiVector_into_flatPoint(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_flatPoint(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_flector(self_: Sphere, other: Flector) -> Flector {
    return multiVector_into_flector(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_flector(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_line(self_: Sphere, other: Line) -> Line {
    return multiVector_into_line(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_line(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_motor(self_: Sphere, other: Motor) -> Motor {
    return multiVector_into_motor(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_motor(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_multiVector(self_, other), sphere_antiReversal(self_));
}

fn sphere_sandwich_plane(self_: Sphere, other: Plane) -> Plane {
    return multiVector_into_plane(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_plane(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_roundPoint(self_: Sphere, other: RoundPoint) -> RoundPoint {
    return multiVector_into_roundPoint(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_roundPoint(self_, other), sphere_antiReversal(self_)));
}

fn sphere_sandwich_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return multiVector_into_sphere(multiVector_antiWedgeDot_sphere(sphere_antiWedgeDot_sphere(self_, other), sphere_antiReversal(self_)));
}

fn antiScalar_geometricAntiQuotient_antiScalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return antiScalar_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_circle(self_: AntiScalar, other: Circle) -> Circle {
    return antiScalar_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return antiScalar_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_dualNum(self_: AntiScalar, other: DualNum) -> DualNum {
    return antiScalar_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_flatPoint(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return antiScalar_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_flector(self_: AntiScalar, other: Flector) -> Flector {
    return antiScalar_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_line(self_: AntiScalar, other: Line) -> Line {
    return antiScalar_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_motor(self_: AntiScalar, other: Motor) -> Motor {
    return antiScalar_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return antiScalar_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_plane(self_: AntiScalar, other: Plane) -> Plane {
    return antiScalar_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_roundPoint(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return antiScalar_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return antiScalar_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn antiScalar_geometricAntiQuotient_sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return antiScalar_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn circle_geometricAntiQuotient_antiScalar(self_: Circle, other: AntiScalar) -> Circle {
    return circle_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn circle_geometricAntiQuotient_circle(self_: Circle, other: Circle) -> MultiVector {
    return circle_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn circle_geometricAntiQuotient_dipole(self_: Circle, other: Dipole) -> MultiVector {
    return circle_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn circle_geometricAntiQuotient_dualNum(self_: Circle, other: DualNum) -> MultiVector {
    return circle_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn circle_geometricAntiQuotient_flatPoint(self_: Circle, other: FlatPoint) -> MultiVector {
    return circle_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn circle_geometricAntiQuotient_flector(self_: Circle, other: Flector) -> MultiVector {
    return circle_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn circle_geometricAntiQuotient_line(self_: Circle, other: Line) -> MultiVector {
    return circle_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn circle_geometricAntiQuotient_motor(self_: Circle, other: Motor) -> MultiVector {
    return circle_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn circle_geometricAntiQuotient_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn circle_geometricAntiQuotient_plane(self_: Circle, other: Plane) -> MultiVector {
    return circle_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn circle_geometricAntiQuotient_roundPoint(self_: Circle, other: RoundPoint) -> MultiVector {
    return circle_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn circle_geometricAntiQuotient_scalar(self_: Circle, other: Scalar) -> Dipole {
    return circle_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn circle_geometricAntiQuotient_sphere(self_: Circle, other: Sphere) -> MultiVector {
    return circle_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn dipole_geometricAntiQuotient_antiScalar(self_: Dipole, other: AntiScalar) -> Dipole {
    return dipole_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn dipole_geometricAntiQuotient_circle(self_: Dipole, other: Circle) -> MultiVector {
    return dipole_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn dipole_geometricAntiQuotient_dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return dipole_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn dipole_geometricAntiQuotient_dualNum(self_: Dipole, other: DualNum) -> MultiVector {
    return dipole_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn dipole_geometricAntiQuotient_flatPoint(self_: Dipole, other: FlatPoint) -> MultiVector {
    return dipole_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn dipole_geometricAntiQuotient_flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn dipole_geometricAntiQuotient_line(self_: Dipole, other: Line) -> MultiVector {
    return dipole_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn dipole_geometricAntiQuotient_motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn dipole_geometricAntiQuotient_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn dipole_geometricAntiQuotient_plane(self_: Dipole, other: Plane) -> MultiVector {
    return dipole_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn dipole_geometricAntiQuotient_roundPoint(self_: Dipole, other: RoundPoint) -> MultiVector {
    return dipole_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn dipole_geometricAntiQuotient_scalar(self_: Dipole, other: Scalar) -> Circle {
    return dipole_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn dipole_geometricAntiQuotient_sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return dipole_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_antiScalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return dualNum_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_circle(self_: DualNum, other: Circle) -> MultiVector {
    return dualNum_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return dualNum_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return dualNum_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_flatPoint(self_: DualNum, other: FlatPoint) -> MultiVector {
    return dualNum_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_flector(self_: DualNum, other: Flector) -> MultiVector {
    return dualNum_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_line(self_: DualNum, other: Line) -> MultiVector {
    return dualNum_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_motor(self_: DualNum, other: Motor) -> MultiVector {
    return dualNum_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return dualNum_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_plane(self_: DualNum, other: Plane) -> MultiVector {
    return dualNum_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_roundPoint(self_: DualNum, other: RoundPoint) -> MultiVector {
    return dualNum_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_scalar(self_: DualNum, other: Scalar) -> DualNum {
    return dualNum_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn dualNum_geometricAntiQuotient_sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return dualNum_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_antiScalar(self_: FlatPoint, other: AntiScalar) -> FlatPoint {
    return flatPoint_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return flatPoint_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return flatPoint_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_dualNum(self_: FlatPoint, other: DualNum) -> MultiVector {
    return flatPoint_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_flatPoint(self_: FlatPoint, other: FlatPoint) -> Motor {
    return flatPoint_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flatPoint_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_line(self_: FlatPoint, other: Line) -> Flector {
    return flatPoint_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_motor(self_: FlatPoint, other: Motor) -> Flector {
    return flatPoint_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flatPoint_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return flatPoint_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_roundPoint(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return flatPoint_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_scalar(self_: FlatPoint, other: Scalar) -> Circle {
    return flatPoint_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn flatPoint_geometricAntiQuotient_sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return flatPoint_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn flector_geometricAntiQuotient_antiScalar(self_: Flector, other: AntiScalar) -> Flector {
    return flector_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn flector_geometricAntiQuotient_circle(self_: Flector, other: Circle) -> MultiVector {
    return flector_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn flector_geometricAntiQuotient_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return flector_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn flector_geometricAntiQuotient_dualNum(self_: Flector, other: DualNum) -> MultiVector {
    return flector_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn flector_geometricAntiQuotient_flatPoint(self_: Flector, other: FlatPoint) -> MultiVector {
    return flector_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn flector_geometricAntiQuotient_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn flector_geometricAntiQuotient_line(self_: Flector, other: Line) -> Flector {
    return flector_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn flector_geometricAntiQuotient_motor(self_: Flector, other: Motor) -> Flector {
    return flector_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn flector_geometricAntiQuotient_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn flector_geometricAntiQuotient_plane(self_: Flector, other: Plane) -> MultiVector {
    return flector_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn flector_geometricAntiQuotient_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return flector_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn flector_geometricAntiQuotient_scalar(self_: Flector, other: Scalar) -> MultiVector {
    return flector_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn flector_geometricAntiQuotient_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return flector_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn line_geometricAntiQuotient_antiScalar(self_: Line, other: AntiScalar) -> Line {
    return line_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn line_geometricAntiQuotient_circle(self_: Line, other: Circle) -> MultiVector {
    return line_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn line_geometricAntiQuotient_dipole(self_: Line, other: Dipole) -> MultiVector {
    return line_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn line_geometricAntiQuotient_dualNum(self_: Line, other: DualNum) -> MultiVector {
    return line_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn line_geometricAntiQuotient_flatPoint(self_: Line, other: FlatPoint) -> Flector {
    return line_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn line_geometricAntiQuotient_flector(self_: Line, other: Flector) -> Flector {
    return line_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn line_geometricAntiQuotient_line(self_: Line, other: Line) -> MultiVector {
    return line_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn line_geometricAntiQuotient_motor(self_: Line, other: Motor) -> MultiVector {
    return line_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn line_geometricAntiQuotient_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return line_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn line_geometricAntiQuotient_plane(self_: Line, other: Plane) -> Flector {
    return line_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn line_geometricAntiQuotient_roundPoint(self_: Line, other: RoundPoint) -> MultiVector {
    return line_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn line_geometricAntiQuotient_scalar(self_: Line, other: Scalar) -> Dipole {
    return line_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn line_geometricAntiQuotient_sphere(self_: Line, other: Sphere) -> MultiVector {
    return line_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn motor_geometricAntiQuotient_antiScalar(self_: Motor, other: AntiScalar) -> Motor {
    return motor_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn motor_geometricAntiQuotient_circle(self_: Motor, other: Circle) -> MultiVector {
    return motor_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn motor_geometricAntiQuotient_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return motor_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn motor_geometricAntiQuotient_dualNum(self_: Motor, other: DualNum) -> MultiVector {
    return motor_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn motor_geometricAntiQuotient_flatPoint(self_: Motor, other: FlatPoint) -> Flector {
    return motor_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn motor_geometricAntiQuotient_flector(self_: Motor, other: Flector) -> Flector {
    return motor_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn motor_geometricAntiQuotient_line(self_: Motor, other: Line) -> MultiVector {
    return motor_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn motor_geometricAntiQuotient_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn motor_geometricAntiQuotient_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn motor_geometricAntiQuotient_plane(self_: Motor, other: Plane) -> Flector {
    return motor_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn motor_geometricAntiQuotient_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return motor_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn motor_geometricAntiQuotient_scalar(self_: Motor, other: Scalar) -> MultiVector {
    return motor_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn motor_geometricAntiQuotient_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return motor_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_antiScalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return multiVector_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return multiVector_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return multiVector_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn multiVector_geometricAntiQuotient_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn plane_geometricAntiQuotient_antiScalar(self_: Plane, other: AntiScalar) -> Plane {
    return plane_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn plane_geometricAntiQuotient_circle(self_: Plane, other: Circle) -> MultiVector {
    return plane_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn plane_geometricAntiQuotient_dipole(self_: Plane, other: Dipole) -> MultiVector {
    return plane_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn plane_geometricAntiQuotient_dualNum(self_: Plane, other: DualNum) -> MultiVector {
    return plane_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn plane_geometricAntiQuotient_flatPoint(self_: Plane, other: FlatPoint) -> MultiVector {
    return plane_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn plane_geometricAntiQuotient_flector(self_: Plane, other: Flector) -> MultiVector {
    return plane_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn plane_geometricAntiQuotient_line(self_: Plane, other: Line) -> Flector {
    return plane_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn plane_geometricAntiQuotient_motor(self_: Plane, other: Motor) -> Flector {
    return plane_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn plane_geometricAntiQuotient_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn plane_geometricAntiQuotient_plane(self_: Plane, other: Plane) -> Motor {
    return plane_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn plane_geometricAntiQuotient_roundPoint(self_: Plane, other: RoundPoint) -> MultiVector {
    return plane_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn plane_geometricAntiQuotient_scalar(self_: Plane, other: Scalar) -> RoundPoint {
    return plane_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn plane_geometricAntiQuotient_sphere(self_: Plane, other: Sphere) -> MultiVector {
    return plane_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_antiScalar(self_: RoundPoint, other: AntiScalar) -> RoundPoint {
    return roundPoint_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return roundPoint_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return roundPoint_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_dualNum(self_: RoundPoint, other: DualNum) -> MultiVector {
    return roundPoint_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_flatPoint(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return roundPoint_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return roundPoint_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_line(self_: RoundPoint, other: Line) -> MultiVector {
    return roundPoint_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return roundPoint_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return roundPoint_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return roundPoint_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_roundPoint(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return roundPoint_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_scalar(self_: RoundPoint, other: Scalar) -> Sphere {
    return roundPoint_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn roundPoint_geometricAntiQuotient_sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return roundPoint_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn scalar_geometricAntiQuotient_antiScalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return scalar_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn scalar_geometricAntiQuotient_circle(self_: Scalar, other: Circle) -> Dipole {
    return scalar_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn scalar_geometricAntiQuotient_dipole(self_: Scalar, other: Dipole) -> Circle {
    return scalar_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn scalar_geometricAntiQuotient_dualNum(self_: Scalar, other: DualNum) -> DualNum {
    return scalar_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn scalar_geometricAntiQuotient_flatPoint(self_: Scalar, other: FlatPoint) -> Circle {
    return scalar_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn scalar_geometricAntiQuotient_flector(self_: Scalar, other: Flector) -> MultiVector {
    return scalar_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn scalar_geometricAntiQuotient_line(self_: Scalar, other: Line) -> Dipole {
    return scalar_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn scalar_geometricAntiQuotient_motor(self_: Scalar, other: Motor) -> MultiVector {
    return scalar_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn scalar_geometricAntiQuotient_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return scalar_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn scalar_geometricAntiQuotient_plane(self_: Scalar, other: Plane) -> RoundPoint {
    return scalar_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn scalar_geometricAntiQuotient_roundPoint(self_: Scalar, other: RoundPoint) -> Sphere {
    return scalar_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn scalar_geometricAntiQuotient_scalar(self_: Scalar, other: Scalar) -> AntiScalar {
    return scalar_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn scalar_geometricAntiQuotient_sphere(self_: Scalar, other: Sphere) -> RoundPoint {
    return scalar_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn sphere_geometricAntiQuotient_antiScalar(self_: Sphere, other: AntiScalar) -> Sphere {
    return sphere_antiWedgeDot_antiScalar(self_, antiScalar_antiInverse(other));
}

fn sphere_geometricAntiQuotient_circle(self_: Sphere, other: Circle) -> MultiVector {
    return sphere_antiWedgeDot_circle(self_, circle_antiInverse(other));
}

fn sphere_geometricAntiQuotient_dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return sphere_antiWedgeDot_dipole(self_, dipole_antiInverse(other));
}

fn sphere_geometricAntiQuotient_dualNum(self_: Sphere, other: DualNum) -> MultiVector {
    return sphere_antiWedgeDot_dualNum(self_, dualNum_antiInverse(other));
}

fn sphere_geometricAntiQuotient_flatPoint(self_: Sphere, other: FlatPoint) -> MultiVector {
    return sphere_antiWedgeDot_flatPoint(self_, flatPoint_antiInverse(other));
}

fn sphere_geometricAntiQuotient_flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere_antiWedgeDot_flector(self_, flector_antiInverse(other));
}

fn sphere_geometricAntiQuotient_line(self_: Sphere, other: Line) -> MultiVector {
    return sphere_antiWedgeDot_line(self_, line_antiInverse(other));
}

fn sphere_geometricAntiQuotient_motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere_antiWedgeDot_motor(self_, motor_antiInverse(other));
}

fn sphere_geometricAntiQuotient_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere_antiWedgeDot_multiVector(self_, multiVector_antiInverse(other));
}

fn sphere_geometricAntiQuotient_plane(self_: Sphere, other: Plane) -> MultiVector {
    return sphere_antiWedgeDot_plane(self_, plane_antiInverse(other));
}

fn sphere_geometricAntiQuotient_roundPoint(self_: Sphere, other: RoundPoint) -> MultiVector {
    return sphere_antiWedgeDot_roundPoint(self_, roundPoint_antiInverse(other));
}

fn sphere_geometricAntiQuotient_scalar(self_: Sphere, other: Scalar) -> RoundPoint {
    return sphere_antiWedgeDot_scalar(self_, scalar_antiInverse(other));
}

fn sphere_geometricAntiQuotient_sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return sphere_antiWedgeDot_sphere(self_, sphere_antiInverse(other));
}

fn antiScalar_geometricQuotient_antiScalar(self_: AntiScalar, other: AntiScalar) -> Scalar {
    return antiScalar_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn antiScalar_geometricQuotient_circle(self_: AntiScalar, other: Circle) -> Dipole {
    return antiScalar_wedgeDot_circle(self_, circle_inverse(other));
}

fn antiScalar_geometricQuotient_dipole(self_: AntiScalar, other: Dipole) -> Circle {
    return antiScalar_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn antiScalar_geometricQuotient_dualNum(self_: AntiScalar, other: DualNum) -> DualNum {
    return antiScalar_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn antiScalar_geometricQuotient_flatPoint(self_: AntiScalar, other: FlatPoint) -> Circle {
    return antiScalar_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn antiScalar_geometricQuotient_flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return antiScalar_wedgeDot_flector(self_, flector_inverse(other));
}

fn antiScalar_geometricQuotient_line(self_: AntiScalar, other: Line) -> Dipole {
    return antiScalar_wedgeDot_line(self_, line_inverse(other));
}

fn antiScalar_geometricQuotient_motor(self_: AntiScalar, other: Motor) -> MultiVector {
    return antiScalar_wedgeDot_motor(self_, motor_inverse(other));
}

fn antiScalar_geometricQuotient_multiVector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return antiScalar_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn antiScalar_geometricQuotient_plane(self_: AntiScalar, other: Plane) -> RoundPoint {
    return antiScalar_wedgeDot_plane(self_, plane_inverse(other));
}

fn antiScalar_geometricQuotient_roundPoint(self_: AntiScalar, other: RoundPoint) -> Sphere {
    return antiScalar_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn antiScalar_geometricQuotient_scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return antiScalar_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn antiScalar_geometricQuotient_sphere(self_: AntiScalar, other: Sphere) -> RoundPoint {
    return antiScalar_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn circle_geometricQuotient_antiScalar(self_: Circle, other: AntiScalar) -> Dipole {
    return circle_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn circle_geometricQuotient_circle(self_: Circle, other: Circle) -> MultiVector {
    return circle_wedgeDot_circle(self_, circle_inverse(other));
}

fn circle_geometricQuotient_dipole(self_: Circle, other: Dipole) -> MultiVector {
    return circle_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn circle_geometricQuotient_dualNum(self_: Circle, other: DualNum) -> MultiVector {
    return circle_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn circle_geometricQuotient_flatPoint(self_: Circle, other: FlatPoint) -> MultiVector {
    return circle_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn circle_geometricQuotient_flector(self_: Circle, other: Flector) -> MultiVector {
    return circle_wedgeDot_flector(self_, flector_inverse(other));
}

fn circle_geometricQuotient_line(self_: Circle, other: Line) -> MultiVector {
    return circle_wedgeDot_line(self_, line_inverse(other));
}

fn circle_geometricQuotient_motor(self_: Circle, other: Motor) -> MultiVector {
    return circle_wedgeDot_motor(self_, motor_inverse(other));
}

fn circle_geometricQuotient_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn circle_geometricQuotient_plane(self_: Circle, other: Plane) -> MultiVector {
    return circle_wedgeDot_plane(self_, plane_inverse(other));
}

fn circle_geometricQuotient_roundPoint(self_: Circle, other: RoundPoint) -> MultiVector {
    return circle_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn circle_geometricQuotient_scalar(self_: Circle, other: Scalar) -> Circle {
    return circle_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn circle_geometricQuotient_sphere(self_: Circle, other: Sphere) -> MultiVector {
    return circle_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn dipole_geometricQuotient_antiScalar(self_: Dipole, other: AntiScalar) -> Circle {
    return dipole_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn dipole_geometricQuotient_circle(self_: Dipole, other: Circle) -> MultiVector {
    return dipole_wedgeDot_circle(self_, circle_inverse(other));
}

fn dipole_geometricQuotient_dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return dipole_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn dipole_geometricQuotient_dualNum(self_: Dipole, other: DualNum) -> MultiVector {
    return dipole_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn dipole_geometricQuotient_flatPoint(self_: Dipole, other: FlatPoint) -> MultiVector {
    return dipole_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn dipole_geometricQuotient_flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole_wedgeDot_flector(self_, flector_inverse(other));
}

fn dipole_geometricQuotient_line(self_: Dipole, other: Line) -> MultiVector {
    return dipole_wedgeDot_line(self_, line_inverse(other));
}

fn dipole_geometricQuotient_motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole_wedgeDot_motor(self_, motor_inverse(other));
}

fn dipole_geometricQuotient_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn dipole_geometricQuotient_plane(self_: Dipole, other: Plane) -> MultiVector {
    return dipole_wedgeDot_plane(self_, plane_inverse(other));
}

fn dipole_geometricQuotient_roundPoint(self_: Dipole, other: RoundPoint) -> MultiVector {
    return dipole_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn dipole_geometricQuotient_scalar(self_: Dipole, other: Scalar) -> Dipole {
    return dipole_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn dipole_geometricQuotient_sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return dipole_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn dualNum_geometricQuotient_antiScalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return dualNum_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn dualNum_geometricQuotient_circle(self_: DualNum, other: Circle) -> MultiVector {
    return dualNum_wedgeDot_circle(self_, circle_inverse(other));
}

fn dualNum_geometricQuotient_dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return dualNum_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn dualNum_geometricQuotient_dualNum(self_: DualNum, other: DualNum) -> DualNum {
    return dualNum_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn dualNum_geometricQuotient_flatPoint(self_: DualNum, other: FlatPoint) -> MultiVector {
    return dualNum_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn dualNum_geometricQuotient_flector(self_: DualNum, other: Flector) -> MultiVector {
    return dualNum_wedgeDot_flector(self_, flector_inverse(other));
}

fn dualNum_geometricQuotient_line(self_: DualNum, other: Line) -> MultiVector {
    return dualNum_wedgeDot_line(self_, line_inverse(other));
}

fn dualNum_geometricQuotient_motor(self_: DualNum, other: Motor) -> MultiVector {
    return dualNum_wedgeDot_motor(self_, motor_inverse(other));
}

fn dualNum_geometricQuotient_multiVector(self_: DualNum, other: MultiVector) -> MultiVector {
    return dualNum_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn dualNum_geometricQuotient_plane(self_: DualNum, other: Plane) -> MultiVector {
    return dualNum_wedgeDot_plane(self_, plane_inverse(other));
}

fn dualNum_geometricQuotient_roundPoint(self_: DualNum, other: RoundPoint) -> MultiVector {
    return dualNum_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn dualNum_geometricQuotient_scalar(self_: DualNum, other: Scalar) -> DualNum {
    return dualNum_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn dualNum_geometricQuotient_sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return dualNum_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn flatPoint_geometricQuotient_antiScalar(self_: FlatPoint, other: AntiScalar) -> Circle {
    return flatPoint_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn flatPoint_geometricQuotient_circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return flatPoint_wedgeDot_circle(self_, circle_inverse(other));
}

fn flatPoint_geometricQuotient_dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return flatPoint_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn flatPoint_geometricQuotient_dualNum(self_: FlatPoint, other: DualNum) -> MultiVector {
    return flatPoint_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn flatPoint_geometricQuotient_flatPoint(self_: FlatPoint, other: FlatPoint) -> MultiVector {
    return flatPoint_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn flatPoint_geometricQuotient_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flatPoint_wedgeDot_flector(self_, flector_inverse(other));
}

fn flatPoint_geometricQuotient_line(self_: FlatPoint, other: Line) -> MultiVector {
    return flatPoint_wedgeDot_line(self_, line_inverse(other));
}

fn flatPoint_geometricQuotient_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flatPoint_wedgeDot_motor(self_, motor_inverse(other));
}

fn flatPoint_geometricQuotient_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flatPoint_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn flatPoint_geometricQuotient_plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return flatPoint_wedgeDot_plane(self_, plane_inverse(other));
}

fn flatPoint_geometricQuotient_roundPoint(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return flatPoint_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn flatPoint_geometricQuotient_scalar(self_: FlatPoint, other: Scalar) -> FlatPoint {
    return flatPoint_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn flatPoint_geometricQuotient_sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return flatPoint_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn flector_geometricQuotient_antiScalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return flector_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn flector_geometricQuotient_circle(self_: Flector, other: Circle) -> MultiVector {
    return flector_wedgeDot_circle(self_, circle_inverse(other));
}

fn flector_geometricQuotient_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return flector_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn flector_geometricQuotient_dualNum(self_: Flector, other: DualNum) -> MultiVector {
    return flector_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn flector_geometricQuotient_flatPoint(self_: Flector, other: FlatPoint) -> MultiVector {
    return flector_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn flector_geometricQuotient_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_wedgeDot_flector(self_, flector_inverse(other));
}

fn flector_geometricQuotient_line(self_: Flector, other: Line) -> MultiVector {
    return flector_wedgeDot_line(self_, line_inverse(other));
}

fn flector_geometricQuotient_motor(self_: Flector, other: Motor) -> MultiVector {
    return flector_wedgeDot_motor(self_, motor_inverse(other));
}

fn flector_geometricQuotient_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn flector_geometricQuotient_plane(self_: Flector, other: Plane) -> MultiVector {
    return flector_wedgeDot_plane(self_, plane_inverse(other));
}

fn flector_geometricQuotient_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return flector_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn flector_geometricQuotient_scalar(self_: Flector, other: Scalar) -> Flector {
    return flector_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn flector_geometricQuotient_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return flector_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn line_geometricQuotient_antiScalar(self_: Line, other: AntiScalar) -> Dipole {
    return line_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn line_geometricQuotient_circle(self_: Line, other: Circle) -> MultiVector {
    return line_wedgeDot_circle(self_, circle_inverse(other));
}

fn line_geometricQuotient_dipole(self_: Line, other: Dipole) -> MultiVector {
    return line_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn line_geometricQuotient_dualNum(self_: Line, other: DualNum) -> MultiVector {
    return line_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn line_geometricQuotient_flatPoint(self_: Line, other: FlatPoint) -> MultiVector {
    return line_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn line_geometricQuotient_flector(self_: Line, other: Flector) -> MultiVector {
    return line_wedgeDot_flector(self_, flector_inverse(other));
}

fn line_geometricQuotient_line(self_: Line, other: Line) -> MultiVector {
    return line_wedgeDot_line(self_, line_inverse(other));
}

fn line_geometricQuotient_motor(self_: Line, other: Motor) -> MultiVector {
    return line_wedgeDot_motor(self_, motor_inverse(other));
}

fn line_geometricQuotient_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return line_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn line_geometricQuotient_plane(self_: Line, other: Plane) -> MultiVector {
    return line_wedgeDot_plane(self_, plane_inverse(other));
}

fn line_geometricQuotient_roundPoint(self_: Line, other: RoundPoint) -> MultiVector {
    return line_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn line_geometricQuotient_scalar(self_: Line, other: Scalar) -> Line {
    return line_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn line_geometricQuotient_sphere(self_: Line, other: Sphere) -> MultiVector {
    return line_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn motor_geometricQuotient_antiScalar(self_: Motor, other: AntiScalar) -> MultiVector {
    return motor_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn motor_geometricQuotient_circle(self_: Motor, other: Circle) -> MultiVector {
    return motor_wedgeDot_circle(self_, circle_inverse(other));
}

fn motor_geometricQuotient_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return motor_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn motor_geometricQuotient_dualNum(self_: Motor, other: DualNum) -> MultiVector {
    return motor_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn motor_geometricQuotient_flatPoint(self_: Motor, other: FlatPoint) -> MultiVector {
    return motor_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn motor_geometricQuotient_flector(self_: Motor, other: Flector) -> MultiVector {
    return motor_wedgeDot_flector(self_, flector_inverse(other));
}

fn motor_geometricQuotient_line(self_: Motor, other: Line) -> MultiVector {
    return motor_wedgeDot_line(self_, line_inverse(other));
}

fn motor_geometricQuotient_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_wedgeDot_motor(self_, motor_inverse(other));
}

fn motor_geometricQuotient_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn motor_geometricQuotient_plane(self_: Motor, other: Plane) -> MultiVector {
    return motor_wedgeDot_plane(self_, plane_inverse(other));
}

fn motor_geometricQuotient_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return motor_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn motor_geometricQuotient_scalar(self_: Motor, other: Scalar) -> Motor {
    return motor_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn motor_geometricQuotient_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return motor_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn multiVector_geometricQuotient_antiScalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return multiVector_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn multiVector_geometricQuotient_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_wedgeDot_circle(self_, circle_inverse(other));
}

fn multiVector_geometricQuotient_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn multiVector_geometricQuotient_dualNum(self_: MultiVector, other: DualNum) -> MultiVector {
    return multiVector_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn multiVector_geometricQuotient_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn multiVector_geometricQuotient_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_wedgeDot_flector(self_, flector_inverse(other));
}

fn multiVector_geometricQuotient_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_wedgeDot_line(self_, line_inverse(other));
}

fn multiVector_geometricQuotient_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_wedgeDot_motor(self_, motor_inverse(other));
}

fn multiVector_geometricQuotient_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn multiVector_geometricQuotient_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_wedgeDot_plane(self_, plane_inverse(other));
}

fn multiVector_geometricQuotient_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn multiVector_geometricQuotient_scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return multiVector_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn multiVector_geometricQuotient_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn plane_geometricQuotient_antiScalar(self_: Plane, other: AntiScalar) -> RoundPoint {
    return plane_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn plane_geometricQuotient_circle(self_: Plane, other: Circle) -> MultiVector {
    return plane_wedgeDot_circle(self_, circle_inverse(other));
}

fn plane_geometricQuotient_dipole(self_: Plane, other: Dipole) -> MultiVector {
    return plane_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn plane_geometricQuotient_dualNum(self_: Plane, other: DualNum) -> MultiVector {
    return plane_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn plane_geometricQuotient_flatPoint(self_: Plane, other: FlatPoint) -> MultiVector {
    return plane_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn plane_geometricQuotient_flector(self_: Plane, other: Flector) -> MultiVector {
    return plane_wedgeDot_flector(self_, flector_inverse(other));
}

fn plane_geometricQuotient_line(self_: Plane, other: Line) -> MultiVector {
    return plane_wedgeDot_line(self_, line_inverse(other));
}

fn plane_geometricQuotient_motor(self_: Plane, other: Motor) -> MultiVector {
    return plane_wedgeDot_motor(self_, motor_inverse(other));
}

fn plane_geometricQuotient_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn plane_geometricQuotient_plane(self_: Plane, other: Plane) -> MultiVector {
    return plane_wedgeDot_plane(self_, plane_inverse(other));
}

fn plane_geometricQuotient_roundPoint(self_: Plane, other: RoundPoint) -> MultiVector {
    return plane_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn plane_geometricQuotient_scalar(self_: Plane, other: Scalar) -> Plane {
    return plane_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn plane_geometricQuotient_sphere(self_: Plane, other: Sphere) -> MultiVector {
    return plane_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn roundPoint_geometricQuotient_antiScalar(self_: RoundPoint, other: AntiScalar) -> Sphere {
    return roundPoint_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn roundPoint_geometricQuotient_circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return roundPoint_wedgeDot_circle(self_, circle_inverse(other));
}

fn roundPoint_geometricQuotient_dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return roundPoint_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn roundPoint_geometricQuotient_dualNum(self_: RoundPoint, other: DualNum) -> MultiVector {
    return roundPoint_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn roundPoint_geometricQuotient_flatPoint(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return roundPoint_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn roundPoint_geometricQuotient_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return roundPoint_wedgeDot_flector(self_, flector_inverse(other));
}

fn roundPoint_geometricQuotient_line(self_: RoundPoint, other: Line) -> MultiVector {
    return roundPoint_wedgeDot_line(self_, line_inverse(other));
}

fn roundPoint_geometricQuotient_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return roundPoint_wedgeDot_motor(self_, motor_inverse(other));
}

fn roundPoint_geometricQuotient_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return roundPoint_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn roundPoint_geometricQuotient_plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return roundPoint_wedgeDot_plane(self_, plane_inverse(other));
}

fn roundPoint_geometricQuotient_roundPoint(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return roundPoint_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn roundPoint_geometricQuotient_scalar(self_: RoundPoint, other: Scalar) -> RoundPoint {
    return roundPoint_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn roundPoint_geometricQuotient_sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return roundPoint_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn scalar_geometricQuotient_antiScalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return scalar_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn scalar_geometricQuotient_circle(self_: Scalar, other: Circle) -> Circle {
    return scalar_wedgeDot_circle(self_, circle_inverse(other));
}

fn scalar_geometricQuotient_dipole(self_: Scalar, other: Dipole) -> Dipole {
    return scalar_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn scalar_geometricQuotient_dualNum(self_: Scalar, other: DualNum) -> DualNum {
    return scalar_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn scalar_geometricQuotient_flatPoint(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return scalar_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn scalar_geometricQuotient_flector(self_: Scalar, other: Flector) -> Flector {
    return scalar_wedgeDot_flector(self_, flector_inverse(other));
}

fn scalar_geometricQuotient_line(self_: Scalar, other: Line) -> Line {
    return scalar_wedgeDot_line(self_, line_inverse(other));
}

fn scalar_geometricQuotient_motor(self_: Scalar, other: Motor) -> Motor {
    return scalar_wedgeDot_motor(self_, motor_inverse(other));
}

fn scalar_geometricQuotient_multiVector(self_: Scalar, other: MultiVector) -> MultiVector {
    return scalar_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn scalar_geometricQuotient_plane(self_: Scalar, other: Plane) -> Plane {
    return scalar_wedgeDot_plane(self_, plane_inverse(other));
}

fn scalar_geometricQuotient_roundPoint(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return scalar_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn scalar_geometricQuotient_scalar(self_: Scalar, other: Scalar) -> Scalar {
    return scalar_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn scalar_geometricQuotient_sphere(self_: Scalar, other: Sphere) -> Sphere {
    return scalar_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn sphere_geometricQuotient_antiScalar(self_: Sphere, other: AntiScalar) -> RoundPoint {
    return sphere_wedgeDot_antiScalar(self_, antiScalar_inverse(other));
}

fn sphere_geometricQuotient_circle(self_: Sphere, other: Circle) -> MultiVector {
    return sphere_wedgeDot_circle(self_, circle_inverse(other));
}

fn sphere_geometricQuotient_dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return sphere_wedgeDot_dipole(self_, dipole_inverse(other));
}

fn sphere_geometricQuotient_dualNum(self_: Sphere, other: DualNum) -> MultiVector {
    return sphere_wedgeDot_dualNum(self_, dualNum_inverse(other));
}

fn sphere_geometricQuotient_flatPoint(self_: Sphere, other: FlatPoint) -> MultiVector {
    return sphere_wedgeDot_flatPoint(self_, flatPoint_inverse(other));
}

fn sphere_geometricQuotient_flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere_wedgeDot_flector(self_, flector_inverse(other));
}

fn sphere_geometricQuotient_line(self_: Sphere, other: Line) -> MultiVector {
    return sphere_wedgeDot_line(self_, line_inverse(other));
}

fn sphere_geometricQuotient_motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere_wedgeDot_motor(self_, motor_inverse(other));
}

fn sphere_geometricQuotient_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere_wedgeDot_multiVector(self_, multiVector_inverse(other));
}

fn sphere_geometricQuotient_plane(self_: Sphere, other: Plane) -> MultiVector {
    return sphere_wedgeDot_plane(self_, plane_inverse(other));
}

fn sphere_geometricQuotient_roundPoint(self_: Sphere, other: RoundPoint) -> MultiVector {
    return sphere_wedgeDot_roundPoint(self_, roundPoint_inverse(other));
}

fn sphere_geometricQuotient_scalar(self_: Sphere, other: Scalar) -> Sphere {
    return sphere_wedgeDot_scalar(self_, scalar_inverse(other));
}

fn sphere_geometricQuotient_sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return sphere_wedgeDot_sphere(self_, sphere_inverse(other));
}

fn circle_contraction_circle(self_: Circle, other: Circle) -> Scalar {
    return circle_antiWedge_dipole(self_, circle_antiDual(other));
}

fn circle_contraction_dipole(self_: Circle, other: Dipole) -> RoundPoint {
    return circle_antiWedge_circle(self_, dipole_antiDual(other));
}

fn circle_contraction_flatPoint(self_: Circle, other: FlatPoint) -> RoundPoint {
    return circle_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn circle_contraction_flector(self_: Circle, other: Flector) -> MultiVector {
    return circle_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn circle_contraction_line(self_: Circle, other: Line) -> Scalar {
    return circle_antiWedge_dipole(self_, line_antiDual(other));
}

fn circle_contraction_motor(self_: Circle, other: Motor) -> MultiVector {
    return circle_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn circle_contraction_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn circle_contraction_roundPoint(self_: Circle, other: RoundPoint) -> Dipole {
    return circle_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn dipole_contraction_dipole(self_: Dipole, other: Dipole) -> Scalar {
    return dipole_antiWedge_circle(self_, dipole_antiDual(other));
}

fn dipole_contraction_flatPoint(self_: Dipole, other: FlatPoint) -> Scalar {
    return dipole_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn dipole_contraction_flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn dipole_contraction_motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn dipole_contraction_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn dipole_contraction_roundPoint(self_: Dipole, other: RoundPoint) -> RoundPoint {
    return dipole_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn flatPoint_contraction_dipole(self_: FlatPoint, other: Dipole) -> Scalar {
    return flatPoint_antiWedge_circle(self_, dipole_antiDual(other));
}

fn flatPoint_contraction_flatPoint(self_: FlatPoint, other: FlatPoint) -> Scalar {
    return flatPoint_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn flatPoint_contraction_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flatPoint_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn flatPoint_contraction_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flatPoint_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn flatPoint_contraction_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flatPoint_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn flatPoint_contraction_roundPoint(self_: FlatPoint, other: RoundPoint) -> RoundPoint {
    return flatPoint_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn flector_contraction_circle(self_: Flector, other: Circle) -> RoundPoint {
    return flector_antiWedge_dipole(self_, circle_antiDual(other));
}

fn flector_contraction_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return flector_antiWedge_circle(self_, dipole_antiDual(other));
}

fn flector_contraction_flatPoint(self_: Flector, other: FlatPoint) -> MultiVector {
    return flector_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn flector_contraction_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn flector_contraction_line(self_: Flector, other: Line) -> RoundPoint {
    return flector_antiWedge_dipole(self_, line_antiDual(other));
}

fn flector_contraction_motor(self_: Flector, other: Motor) -> MultiVector {
    return flector_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn flector_contraction_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn flector_contraction_plane(self_: Flector, other: Plane) -> Scalar {
    return flector_antiWedge_roundPoint(self_, plane_antiDual(other));
}

fn flector_contraction_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return flector_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn flector_contraction_sphere(self_: Flector, other: Sphere) -> Scalar {
    return flector_antiWedge_roundPoint(self_, sphere_antiDual(other));
}

fn line_contraction_circle(self_: Line, other: Circle) -> Scalar {
    return line_antiWedge_dipole(self_, circle_antiDual(other));
}

fn line_contraction_dipole(self_: Line, other: Dipole) -> RoundPoint {
    return line_antiWedge_circle(self_, dipole_antiDual(other));
}

fn line_contraction_flatPoint(self_: Line, other: FlatPoint) -> RoundPoint {
    return line_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn line_contraction_flector(self_: Line, other: Flector) -> MultiVector {
    return line_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn line_contraction_line(self_: Line, other: Line) -> Scalar {
    return line_antiWedge_dipole(self_, line_antiDual(other));
}

fn line_contraction_motor(self_: Line, other: Motor) -> MultiVector {
    return line_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn line_contraction_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return line_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn line_contraction_roundPoint(self_: Line, other: RoundPoint) -> Dipole {
    return line_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn motor_contraction_circle(self_: Motor, other: Circle) -> MultiVector {
    return motor_antiWedge_dipole(self_, circle_antiDual(other));
}

fn motor_contraction_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return motor_antiWedge_circle(self_, dipole_antiDual(other));
}

fn motor_contraction_flatPoint(self_: Motor, other: FlatPoint) -> MultiVector {
    return motor_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn motor_contraction_flector(self_: Motor, other: Flector) -> MultiVector {
    return motor_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn motor_contraction_line(self_: Motor, other: Line) -> MultiVector {
    return motor_antiWedge_dipole(self_, line_antiDual(other));
}

fn motor_contraction_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn motor_contraction_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn motor_contraction_plane(self_: Motor, other: Plane) -> RoundPoint {
    return motor_antiWedge_roundPoint(self_, plane_antiDual(other));
}

fn motor_contraction_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return motor_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn motor_contraction_sphere(self_: Motor, other: Sphere) -> RoundPoint {
    return motor_antiWedge_roundPoint(self_, sphere_antiDual(other));
}

fn multiVector_contraction_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_antiWedge_dipole(self_, circle_antiDual(other));
}

fn multiVector_contraction_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_antiWedge_circle(self_, dipole_antiDual(other));
}

fn multiVector_contraction_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn multiVector_contraction_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn multiVector_contraction_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_antiWedge_dipole(self_, line_antiDual(other));
}

fn multiVector_contraction_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn multiVector_contraction_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn multiVector_contraction_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_antiWedge_roundPoint(self_, plane_antiDual(other));
}

fn multiVector_contraction_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn multiVector_contraction_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_antiWedge_roundPoint(self_, sphere_antiDual(other));
}

fn plane_contraction_circle(self_: Plane, other: Circle) -> RoundPoint {
    return plane_antiWedge_dipole(self_, circle_antiDual(other));
}

fn plane_contraction_dipole(self_: Plane, other: Dipole) -> Dipole {
    return plane_antiWedge_circle(self_, dipole_antiDual(other));
}

fn plane_contraction_flatPoint(self_: Plane, other: FlatPoint) -> Dipole {
    return plane_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn plane_contraction_flector(self_: Plane, other: Flector) -> MultiVector {
    return plane_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn plane_contraction_line(self_: Plane, other: Line) -> RoundPoint {
    return plane_antiWedge_dipole(self_, line_antiDual(other));
}

fn plane_contraction_motor(self_: Plane, other: Motor) -> MultiVector {
    return plane_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn plane_contraction_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn plane_contraction_plane(self_: Plane, other: Plane) -> Scalar {
    return plane_antiWedge_roundPoint(self_, plane_antiDual(other));
}

fn plane_contraction_roundPoint(self_: Plane, other: RoundPoint) -> Circle {
    return plane_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn plane_contraction_sphere(self_: Plane, other: Sphere) -> Scalar {
    return plane_antiWedge_roundPoint(self_, sphere_antiDual(other));
}

fn roundPoint_contraction_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return roundPoint_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn roundPoint_contraction_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return roundPoint_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn roundPoint_contraction_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return roundPoint_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn roundPoint_contraction_roundPoint(self_: RoundPoint, other: RoundPoint) -> Scalar {
    return roundPoint_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn sphere_contraction_circle(self_: Sphere, other: Circle) -> RoundPoint {
    return sphere_antiWedge_dipole(self_, circle_antiDual(other));
}

fn sphere_contraction_dipole(self_: Sphere, other: Dipole) -> Dipole {
    return sphere_antiWedge_circle(self_, dipole_antiDual(other));
}

fn sphere_contraction_flatPoint(self_: Sphere, other: FlatPoint) -> Dipole {
    return sphere_antiWedge_circle(self_, flatPoint_antiDual(other));
}

fn sphere_contraction_flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere_antiWedge_multiVector(self_, flector_antiDual(other));
}

fn sphere_contraction_line(self_: Sphere, other: Line) -> RoundPoint {
    return sphere_antiWedge_dipole(self_, line_antiDual(other));
}

fn sphere_contraction_motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere_antiWedge_multiVector(self_, motor_antiDual(other));
}

fn sphere_contraction_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere_antiWedge_multiVector(self_, multiVector_antiDual(other));
}

fn sphere_contraction_plane(self_: Sphere, other: Plane) -> Scalar {
    return sphere_antiWedge_roundPoint(self_, plane_antiDual(other));
}

fn sphere_contraction_roundPoint(self_: Sphere, other: RoundPoint) -> Circle {
    return sphere_antiWedge_sphere(self_, roundPoint_antiDual(other));
}

fn sphere_contraction_sphere(self_: Sphere, other: Sphere) -> Scalar {
    return sphere_antiWedge_roundPoint(self_, sphere_antiDual(other));
}

fn circle_expansion_circle(self_: Circle, other: Circle) -> AntiScalar {
    return circle_wedge_dipole(self_, circle_antiDual(other));
}

fn circle_expansion_flector(self_: Circle, other: Flector) -> MultiVector {
    return circle_wedge_multiVector(self_, flector_antiDual(other));
}

fn circle_expansion_line(self_: Circle, other: Line) -> AntiScalar {
    return circle_wedge_dipole(self_, line_antiDual(other));
}

fn circle_expansion_motor(self_: Circle, other: Motor) -> MultiVector {
    return circle_wedge_multiVector(self_, motor_antiDual(other));
}

fn circle_expansion_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn circle_expansion_plane(self_: Circle, other: Plane) -> Sphere {
    return circle_wedge_roundPoint(self_, plane_antiDual(other));
}

fn circle_expansion_sphere(self_: Circle, other: Sphere) -> Sphere {
    return circle_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn dipole_expansion_circle(self_: Dipole, other: Circle) -> Sphere {
    return dipole_wedge_dipole(self_, circle_antiDual(other));
}

fn dipole_expansion_dipole(self_: Dipole, other: Dipole) -> AntiScalar {
    return dipole_wedge_circle(self_, dipole_antiDual(other));
}

fn dipole_expansion_flatPoint(self_: Dipole, other: FlatPoint) -> AntiScalar {
    return dipole_wedge_circle(self_, flatPoint_antiDual(other));
}

fn dipole_expansion_flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole_wedge_multiVector(self_, flector_antiDual(other));
}

fn dipole_expansion_line(self_: Dipole, other: Line) -> Sphere {
    return dipole_wedge_dipole(self_, line_antiDual(other));
}

fn dipole_expansion_motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole_wedge_multiVector(self_, motor_antiDual(other));
}

fn dipole_expansion_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn dipole_expansion_plane(self_: Dipole, other: Plane) -> Circle {
    return dipole_wedge_roundPoint(self_, plane_antiDual(other));
}

fn dipole_expansion_sphere(self_: Dipole, other: Sphere) -> Circle {
    return dipole_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn flatPoint_expansion_circle(self_: FlatPoint, other: Circle) -> Plane {
    return flatPoint_wedge_dipole(self_, circle_antiDual(other));
}

fn flatPoint_expansion_dipole(self_: FlatPoint, other: Dipole) -> AntiScalar {
    return flatPoint_wedge_circle(self_, dipole_antiDual(other));
}

fn flatPoint_expansion_flatPoint(self_: FlatPoint, other: FlatPoint) -> AntiScalar {
    return flatPoint_wedge_circle(self_, flatPoint_antiDual(other));
}

fn flatPoint_expansion_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flatPoint_wedge_multiVector(self_, flector_antiDual(other));
}

fn flatPoint_expansion_line(self_: FlatPoint, other: Line) -> Plane {
    return flatPoint_wedge_dipole(self_, line_antiDual(other));
}

fn flatPoint_expansion_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flatPoint_wedge_multiVector(self_, motor_antiDual(other));
}

fn flatPoint_expansion_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flatPoint_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn flatPoint_expansion_plane(self_: FlatPoint, other: Plane) -> Line {
    return flatPoint_wedge_roundPoint(self_, plane_antiDual(other));
}

fn flatPoint_expansion_sphere(self_: FlatPoint, other: Sphere) -> Line {
    return flatPoint_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn flector_expansion_circle(self_: Flector, other: Circle) -> Plane {
    return flector_wedge_dipole(self_, circle_antiDual(other));
}

fn flector_expansion_dipole(self_: Flector, other: Dipole) -> AntiScalar {
    return flector_wedge_circle(self_, dipole_antiDual(other));
}

fn flector_expansion_flatPoint(self_: Flector, other: FlatPoint) -> AntiScalar {
    return flector_wedge_circle(self_, flatPoint_antiDual(other));
}

fn flector_expansion_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(self_, flector_antiDual(other));
}

fn flector_expansion_line(self_: Flector, other: Line) -> Plane {
    return flector_wedge_dipole(self_, line_antiDual(other));
}

fn flector_expansion_motor(self_: Flector, other: Motor) -> MultiVector {
    return flector_wedge_multiVector(self_, motor_antiDual(other));
}

fn flector_expansion_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn flector_expansion_plane(self_: Flector, other: Plane) -> Motor {
    return flector_wedge_roundPoint(self_, plane_antiDual(other));
}

fn flector_expansion_sphere(self_: Flector, other: Sphere) -> Motor {
    return flector_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn line_expansion_circle(self_: Line, other: Circle) -> AntiScalar {
    return line_wedge_dipole(self_, circle_antiDual(other));
}

fn line_expansion_flector(self_: Line, other: Flector) -> MultiVector {
    return line_wedge_multiVector(self_, flector_antiDual(other));
}

fn line_expansion_line(self_: Line, other: Line) -> AntiScalar {
    return line_wedge_dipole(self_, line_antiDual(other));
}

fn line_expansion_motor(self_: Line, other: Motor) -> MultiVector {
    return line_wedge_multiVector(self_, motor_antiDual(other));
}

fn line_expansion_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return line_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn line_expansion_plane(self_: Line, other: Plane) -> Plane {
    return line_wedge_roundPoint(self_, plane_antiDual(other));
}

fn line_expansion_sphere(self_: Line, other: Sphere) -> Plane {
    return line_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn motor_expansion_circle(self_: Motor, other: Circle) -> AntiScalar {
    return motor_wedge_dipole(self_, circle_antiDual(other));
}

fn motor_expansion_flector(self_: Motor, other: Flector) -> MultiVector {
    return motor_wedge_multiVector(self_, flector_antiDual(other));
}

fn motor_expansion_line(self_: Motor, other: Line) -> AntiScalar {
    return motor_wedge_dipole(self_, line_antiDual(other));
}

fn motor_expansion_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(self_, motor_antiDual(other));
}

fn motor_expansion_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn motor_expansion_plane(self_: Motor, other: Plane) -> Plane {
    return motor_wedge_roundPoint(self_, plane_antiDual(other));
}

fn motor_expansion_sphere(self_: Motor, other: Sphere) -> Plane {
    return motor_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn multiVector_expansion_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_wedge_dipole(self_, circle_antiDual(other));
}

fn multiVector_expansion_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_wedge_circle(self_, dipole_antiDual(other));
}

fn multiVector_expansion_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_wedge_circle(self_, flatPoint_antiDual(other));
}

fn multiVector_expansion_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(self_, flector_antiDual(other));
}

fn multiVector_expansion_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_wedge_dipole(self_, line_antiDual(other));
}

fn multiVector_expansion_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(self_, motor_antiDual(other));
}

fn multiVector_expansion_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn multiVector_expansion_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_wedge_roundPoint(self_, plane_antiDual(other));
}

fn multiVector_expansion_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_wedge_sphere(self_, roundPoint_antiDual(other));
}

fn multiVector_expansion_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn plane_expansion_flector(self_: Plane, other: Flector) -> MultiVector {
    return plane_wedge_multiVector(self_, flector_antiDual(other));
}

fn plane_expansion_motor(self_: Plane, other: Motor) -> MultiVector {
    return plane_wedge_multiVector(self_, motor_antiDual(other));
}

fn plane_expansion_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn plane_expansion_plane(self_: Plane, other: Plane) -> AntiScalar {
    return plane_wedge_roundPoint(self_, plane_antiDual(other));
}

fn plane_expansion_sphere(self_: Plane, other: Sphere) -> AntiScalar {
    return plane_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn roundPoint_expansion_circle(self_: RoundPoint, other: Circle) -> Circle {
    return roundPoint_wedge_dipole(self_, circle_antiDual(other));
}

fn roundPoint_expansion_dipole(self_: RoundPoint, other: Dipole) -> Sphere {
    return roundPoint_wedge_circle(self_, dipole_antiDual(other));
}

fn roundPoint_expansion_flatPoint(self_: RoundPoint, other: FlatPoint) -> Sphere {
    return roundPoint_wedge_circle(self_, flatPoint_antiDual(other));
}

fn roundPoint_expansion_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return roundPoint_wedge_multiVector(self_, flector_antiDual(other));
}

fn roundPoint_expansion_line(self_: RoundPoint, other: Line) -> Circle {
    return roundPoint_wedge_dipole(self_, line_antiDual(other));
}

fn roundPoint_expansion_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return roundPoint_wedge_multiVector(self_, motor_antiDual(other));
}

fn roundPoint_expansion_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return roundPoint_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn roundPoint_expansion_plane(self_: RoundPoint, other: Plane) -> Dipole {
    return roundPoint_wedge_roundPoint(self_, plane_antiDual(other));
}

fn roundPoint_expansion_roundPoint(self_: RoundPoint, other: RoundPoint) -> AntiScalar {
    return roundPoint_wedge_sphere(self_, roundPoint_antiDual(other));
}

fn roundPoint_expansion_sphere(self_: RoundPoint, other: Sphere) -> Dipole {
    return roundPoint_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn sphere_expansion_flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere_wedge_multiVector(self_, flector_antiDual(other));
}

fn sphere_expansion_motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere_wedge_multiVector(self_, motor_antiDual(other));
}

fn sphere_expansion_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere_wedge_multiVector(self_, multiVector_antiDual(other));
}

fn sphere_expansion_plane(self_: Sphere, other: Plane) -> AntiScalar {
    return sphere_wedge_roundPoint(self_, plane_antiDual(other));
}

fn sphere_expansion_sphere(self_: Sphere, other: Sphere) -> AntiScalar {
    return sphere_wedge_roundPoint(self_, sphere_antiDual(other));
}

fn circle_antiProjectOrthogonallyOnto_circle(self_: Circle, other: Circle) -> Circle {
    return circle_wedge_scalar(other, circle_antiWedge_dipole(self_, circle_antiDual(other)));
}

fn circle_antiProjectOrthogonallyOnto_dipole(self_: Circle, other: Dipole) -> Circle {
    return dipole_wedge_roundPoint(other, circle_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn circle_antiProjectOrthogonallyOnto_flatPoint(self_: Circle, other: FlatPoint) -> Line {
    return flatPoint_wedge_roundPoint(other, circle_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn circle_antiProjectOrthogonallyOnto_flector(self_: Circle, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, circle_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn circle_antiProjectOrthogonallyOnto_line(self_: Circle, other: Line) -> Line {
    return line_wedge_scalar(other, circle_antiWedge_dipole(self_, line_antiDual(other)));
}

fn circle_antiProjectOrthogonallyOnto_motor(self_: Circle, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, circle_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn circle_antiProjectOrthogonallyOnto_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, circle_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn circle_antiProjectOrthogonallyOnto_roundPoint(self_: Circle, other: RoundPoint) -> Circle {
    return roundPoint_wedge_dipole(other, circle_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn dipole_antiProjectOrthogonallyOnto_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole_wedge_scalar(other, dipole_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn dipole_antiProjectOrthogonallyOnto_flatPoint(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flatPoint_wedge_scalar(other, dipole_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn dipole_antiProjectOrthogonallyOnto_flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, dipole_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn dipole_antiProjectOrthogonallyOnto_motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, dipole_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn dipole_antiProjectOrthogonallyOnto_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, dipole_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn dipole_antiProjectOrthogonallyOnto_roundPoint(self_: Dipole, other: RoundPoint) -> Dipole {
    return roundPoint_wedge_roundPoint(other, dipole_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn flatPoint_antiProjectOrthogonallyOnto_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole_wedge_scalar(other, flatPoint_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn flatPoint_antiProjectOrthogonallyOnto_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flatPoint_wedge_scalar(other, flatPoint_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn flatPoint_antiProjectOrthogonallyOnto_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, flatPoint_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn flatPoint_antiProjectOrthogonallyOnto_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, flatPoint_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn flatPoint_antiProjectOrthogonallyOnto_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, flatPoint_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn flatPoint_antiProjectOrthogonallyOnto_roundPoint(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return roundPoint_wedge_roundPoint(other, flatPoint_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_circle(self_: Flector, other: Circle) -> Sphere {
    return circle_wedge_roundPoint(other, flector_antiWedge_dipole(self_, circle_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return dipole_wedge_multiVector(other, flector_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_flatPoint(self_: Flector, other: FlatPoint) -> MultiVector {
    return flatPoint_wedge_multiVector(other, flector_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, flector_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_line(self_: Flector, other: Line) -> Plane {
    return line_wedge_roundPoint(other, flector_antiWedge_dipole(self_, line_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_motor(self_: Flector, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, flector_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, flector_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_plane(self_: Flector, other: Plane) -> Plane {
    return plane_wedge_scalar(other, flector_antiWedge_roundPoint(self_, plane_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return roundPoint_wedge_multiVector(other, flector_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn flector_antiProjectOrthogonallyOnto_sphere(self_: Flector, other: Sphere) -> Sphere {
    return sphere_wedge_scalar(other, flector_antiWedge_roundPoint(self_, sphere_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_circle(self_: Line, other: Circle) -> Circle {
    return circle_wedge_scalar(other, line_antiWedge_dipole(self_, circle_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_dipole(self_: Line, other: Dipole) -> Circle {
    return dipole_wedge_roundPoint(other, line_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_flatPoint(self_: Line, other: FlatPoint) -> Line {
    return flatPoint_wedge_roundPoint(other, line_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_flector(self_: Line, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, line_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_line(self_: Line, other: Line) -> Line {
    return line_wedge_scalar(other, line_antiWedge_dipole(self_, line_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_motor(self_: Line, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, line_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, line_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn line_antiProjectOrthogonallyOnto_roundPoint(self_: Line, other: RoundPoint) -> Circle {
    return roundPoint_wedge_dipole(other, line_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_circle(self_: Motor, other: Circle) -> MultiVector {
    return circle_wedge_multiVector(other, motor_antiWedge_dipole(self_, circle_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return dipole_wedge_multiVector(other, motor_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_flatPoint(self_: Motor, other: FlatPoint) -> MultiVector {
    return flatPoint_wedge_multiVector(other, motor_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_flector(self_: Motor, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, motor_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_line(self_: Motor, other: Line) -> MultiVector {
    return line_wedge_multiVector(other, motor_antiWedge_dipole(self_, line_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, motor_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, motor_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_plane(self_: Motor, other: Plane) -> AntiScalar {
    return plane_wedge_roundPoint(other, motor_antiWedge_roundPoint(self_, plane_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return roundPoint_wedge_multiVector(other, motor_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn motor_antiProjectOrthogonallyOnto_sphere(self_: Motor, other: Sphere) -> AntiScalar {
    return sphere_wedge_roundPoint(other, motor_antiWedge_roundPoint(self_, sphere_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle_wedge_multiVector(other, multiVector_antiWedge_dipole(self_, circle_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole_wedge_multiVector(other, multiVector_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flatPoint_wedge_multiVector(other, multiVector_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, multiVector_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_line(self_: MultiVector, other: Line) -> MultiVector {
    return line_wedge_multiVector(other, multiVector_antiWedge_dipole(self_, line_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, multiVector_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, multiVector_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane_wedge_multiVector(other, multiVector_antiWedge_roundPoint(self_, plane_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return roundPoint_wedge_multiVector(other, multiVector_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn multiVector_antiProjectOrthogonallyOnto_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere_wedge_multiVector(other, multiVector_antiWedge_roundPoint(self_, sphere_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_circle(self_: Plane, other: Circle) -> Sphere {
    return circle_wedge_roundPoint(other, plane_antiWedge_dipole(self_, circle_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_dipole(self_: Plane, other: Dipole) -> Sphere {
    return dipole_wedge_dipole(other, plane_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_flatPoint(self_: Plane, other: FlatPoint) -> Plane {
    return flatPoint_wedge_dipole(other, plane_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_flector(self_: Plane, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, plane_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_line(self_: Plane, other: Line) -> Plane {
    return line_wedge_roundPoint(other, plane_antiWedge_dipole(self_, line_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_motor(self_: Plane, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, plane_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, plane_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_plane(self_: Plane, other: Plane) -> Plane {
    return plane_wedge_scalar(other, plane_antiWedge_roundPoint(self_, plane_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_roundPoint(self_: Plane, other: RoundPoint) -> Sphere {
    return roundPoint_wedge_circle(other, plane_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn plane_antiProjectOrthogonallyOnto_sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere_wedge_scalar(other, plane_antiWedge_roundPoint(self_, sphere_antiDual(other)));
}

fn roundPoint_antiProjectOrthogonallyOnto_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, roundPoint_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn roundPoint_antiProjectOrthogonallyOnto_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, roundPoint_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn roundPoint_antiProjectOrthogonallyOnto_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, roundPoint_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn roundPoint_antiProjectOrthogonallyOnto_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return roundPoint_wedge_scalar(other, roundPoint_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_circle(self_: Sphere, other: Circle) -> Sphere {
    return circle_wedge_roundPoint(other, sphere_antiWedge_dipole(self_, circle_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_dipole(self_: Sphere, other: Dipole) -> Sphere {
    return dipole_wedge_dipole(other, sphere_antiWedge_circle(self_, dipole_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_flatPoint(self_: Sphere, other: FlatPoint) -> Plane {
    return flatPoint_wedge_dipole(other, sphere_antiWedge_circle(self_, flatPoint_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, sphere_antiWedge_multiVector(self_, flector_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_line(self_: Sphere, other: Line) -> Plane {
    return line_wedge_roundPoint(other, sphere_antiWedge_dipole(self_, line_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, sphere_antiWedge_multiVector(self_, motor_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, sphere_antiWedge_multiVector(self_, multiVector_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_plane(self_: Sphere, other: Plane) -> Plane {
    return plane_wedge_scalar(other, sphere_antiWedge_roundPoint(self_, plane_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_roundPoint(self_: Sphere, other: RoundPoint) -> Sphere {
    return roundPoint_wedge_circle(other, sphere_antiWedge_sphere(self_, roundPoint_antiDual(other)));
}

fn sphere_antiProjectOrthogonallyOnto_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere_wedge_scalar(other, sphere_antiWedge_roundPoint(self_, sphere_antiDual(other)));
}

fn circle_antiProjectViaHorizonOnto_circle(self_: Circle, other: Circle) -> Circle {
    return circle_wedge_scalar(other, circle_antiWedge_dipole(self_, circle_dual(other)));
}

fn circle_antiProjectViaHorizonOnto_dipole(self_: Circle, other: Dipole) -> Circle {
    return dipole_wedge_roundPoint(other, circle_antiWedge_circle(self_, dipole_dual(other)));
}

fn circle_antiProjectViaHorizonOnto_flatPoint(self_: Circle, other: FlatPoint) -> Line {
    return flatPoint_wedge_roundPoint(other, circle_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn circle_antiProjectViaHorizonOnto_flector(self_: Circle, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, circle_antiWedge_multiVector(self_, flector_dual(other)));
}

fn circle_antiProjectViaHorizonOnto_line(self_: Circle, other: Line) -> Line {
    return line_wedge_scalar(other, circle_antiWedge_dipole(self_, line_dual(other)));
}

fn circle_antiProjectViaHorizonOnto_motor(self_: Circle, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, circle_antiWedge_multiVector(self_, motor_dual(other)));
}

fn circle_antiProjectViaHorizonOnto_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, circle_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn circle_antiProjectViaHorizonOnto_roundPoint(self_: Circle, other: RoundPoint) -> Circle {
    return roundPoint_wedge_dipole(other, circle_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn dipole_antiProjectViaHorizonOnto_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole_wedge_scalar(other, dipole_antiWedge_circle(self_, dipole_dual(other)));
}

fn dipole_antiProjectViaHorizonOnto_flatPoint(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flatPoint_wedge_scalar(other, dipole_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn dipole_antiProjectViaHorizonOnto_flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, dipole_antiWedge_multiVector(self_, flector_dual(other)));
}

fn dipole_antiProjectViaHorizonOnto_motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, dipole_antiWedge_multiVector(self_, motor_dual(other)));
}

fn dipole_antiProjectViaHorizonOnto_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, dipole_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn dipole_antiProjectViaHorizonOnto_roundPoint(self_: Dipole, other: RoundPoint) -> Dipole {
    return roundPoint_wedge_roundPoint(other, dipole_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn flatPoint_antiProjectViaHorizonOnto_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole_wedge_scalar(other, flatPoint_antiWedge_circle(self_, dipole_dual(other)));
}

fn flatPoint_antiProjectViaHorizonOnto_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flatPoint_wedge_scalar(other, flatPoint_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn flatPoint_antiProjectViaHorizonOnto_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, flatPoint_antiWedge_multiVector(self_, flector_dual(other)));
}

fn flatPoint_antiProjectViaHorizonOnto_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, flatPoint_antiWedge_multiVector(self_, motor_dual(other)));
}

fn flatPoint_antiProjectViaHorizonOnto_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, flatPoint_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn flatPoint_antiProjectViaHorizonOnto_roundPoint(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return roundPoint_wedge_roundPoint(other, flatPoint_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_circle(self_: Flector, other: Circle) -> Sphere {
    return circle_wedge_roundPoint(other, flector_antiWedge_dipole(self_, circle_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_dipole(self_: Flector, other: Dipole) -> MultiVector {
    return dipole_wedge_multiVector(other, flector_antiWedge_circle(self_, dipole_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_flatPoint(self_: Flector, other: FlatPoint) -> MultiVector {
    return flatPoint_wedge_multiVector(other, flector_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, flector_antiWedge_multiVector(self_, flector_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_line(self_: Flector, other: Line) -> Plane {
    return line_wedge_roundPoint(other, flector_antiWedge_dipole(self_, line_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_motor(self_: Flector, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, flector_antiWedge_multiVector(self_, motor_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, flector_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_plane(self_: Flector, other: Plane) -> Plane {
    return plane_wedge_scalar(other, flector_antiWedge_roundPoint(self_, plane_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return roundPoint_wedge_multiVector(other, flector_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn flector_antiProjectViaHorizonOnto_sphere(self_: Flector, other: Sphere) -> Sphere {
    return sphere_wedge_scalar(other, flector_antiWedge_roundPoint(self_, sphere_dual(other)));
}

fn line_antiProjectViaHorizonOnto_circle(self_: Line, other: Circle) -> Circle {
    return circle_wedge_scalar(other, line_antiWedge_dipole(self_, circle_dual(other)));
}

fn line_antiProjectViaHorizonOnto_dipole(self_: Line, other: Dipole) -> Circle {
    return dipole_wedge_roundPoint(other, line_antiWedge_circle(self_, dipole_dual(other)));
}

fn line_antiProjectViaHorizonOnto_flatPoint(self_: Line, other: FlatPoint) -> Line {
    return flatPoint_wedge_roundPoint(other, line_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn line_antiProjectViaHorizonOnto_flector(self_: Line, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, line_antiWedge_multiVector(self_, flector_dual(other)));
}

fn line_antiProjectViaHorizonOnto_line(self_: Line, other: Line) -> Line {
    return line_wedge_scalar(other, line_antiWedge_dipole(self_, line_dual(other)));
}

fn line_antiProjectViaHorizonOnto_motor(self_: Line, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, line_antiWedge_multiVector(self_, motor_dual(other)));
}

fn line_antiProjectViaHorizonOnto_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, line_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn line_antiProjectViaHorizonOnto_roundPoint(self_: Line, other: RoundPoint) -> Circle {
    return roundPoint_wedge_dipole(other, line_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_circle(self_: Motor, other: Circle) -> MultiVector {
    return circle_wedge_multiVector(other, motor_antiWedge_dipole(self_, circle_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return dipole_wedge_multiVector(other, motor_antiWedge_circle(self_, dipole_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_flatPoint(self_: Motor, other: FlatPoint) -> MultiVector {
    return flatPoint_wedge_multiVector(other, motor_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_flector(self_: Motor, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, motor_antiWedge_multiVector(self_, flector_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_line(self_: Motor, other: Line) -> MultiVector {
    return line_wedge_multiVector(other, motor_antiWedge_dipole(self_, line_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, motor_antiWedge_multiVector(self_, motor_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, motor_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_plane(self_: Motor, other: Plane) -> AntiScalar {
    return plane_wedge_roundPoint(other, motor_antiWedge_roundPoint(self_, plane_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_roundPoint(self_: Motor, other: RoundPoint) -> MultiVector {
    return roundPoint_wedge_multiVector(other, motor_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn motor_antiProjectViaHorizonOnto_sphere(self_: Motor, other: Sphere) -> AntiScalar {
    return sphere_wedge_roundPoint(other, motor_antiWedge_roundPoint(self_, sphere_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle_wedge_multiVector(other, multiVector_antiWedge_dipole(self_, circle_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole_wedge_multiVector(other, multiVector_antiWedge_circle(self_, dipole_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flatPoint_wedge_multiVector(other, multiVector_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, multiVector_antiWedge_multiVector(self_, flector_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_line(self_: MultiVector, other: Line) -> MultiVector {
    return line_wedge_multiVector(other, multiVector_antiWedge_dipole(self_, line_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, multiVector_antiWedge_multiVector(self_, motor_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, multiVector_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane_wedge_multiVector(other, multiVector_antiWedge_roundPoint(self_, plane_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return roundPoint_wedge_multiVector(other, multiVector_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn multiVector_antiProjectViaHorizonOnto_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere_wedge_multiVector(other, multiVector_antiWedge_roundPoint(self_, sphere_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_circle(self_: Plane, other: Circle) -> Sphere {
    return circle_wedge_roundPoint(other, plane_antiWedge_dipole(self_, circle_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_dipole(self_: Plane, other: Dipole) -> Sphere {
    return dipole_wedge_dipole(other, plane_antiWedge_circle(self_, dipole_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_flatPoint(self_: Plane, other: FlatPoint) -> Plane {
    return flatPoint_wedge_dipole(other, plane_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_flector(self_: Plane, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, plane_antiWedge_multiVector(self_, flector_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_line(self_: Plane, other: Line) -> Plane {
    return line_wedge_roundPoint(other, plane_antiWedge_dipole(self_, line_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_motor(self_: Plane, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, plane_antiWedge_multiVector(self_, motor_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, plane_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_plane(self_: Plane, other: Plane) -> Plane {
    return plane_wedge_scalar(other, plane_antiWedge_roundPoint(self_, plane_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_roundPoint(self_: Plane, other: RoundPoint) -> Sphere {
    return roundPoint_wedge_circle(other, plane_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn plane_antiProjectViaHorizonOnto_sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere_wedge_scalar(other, plane_antiWedge_roundPoint(self_, sphere_dual(other)));
}

fn roundPoint_antiProjectViaHorizonOnto_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, roundPoint_antiWedge_multiVector(self_, flector_dual(other)));
}

fn roundPoint_antiProjectViaHorizonOnto_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, roundPoint_antiWedge_multiVector(self_, motor_dual(other)));
}

fn roundPoint_antiProjectViaHorizonOnto_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, roundPoint_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn roundPoint_antiProjectViaHorizonOnto_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return roundPoint_wedge_scalar(other, roundPoint_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_circle(self_: Sphere, other: Circle) -> Sphere {
    return circle_wedge_roundPoint(other, sphere_antiWedge_dipole(self_, circle_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_dipole(self_: Sphere, other: Dipole) -> Sphere {
    return dipole_wedge_dipole(other, sphere_antiWedge_circle(self_, dipole_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_flatPoint(self_: Sphere, other: FlatPoint) -> Plane {
    return flatPoint_wedge_dipole(other, sphere_antiWedge_circle(self_, flatPoint_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(other, sphere_antiWedge_multiVector(self_, flector_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_line(self_: Sphere, other: Line) -> Plane {
    return line_wedge_roundPoint(other, sphere_antiWedge_dipole(self_, line_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor_wedge_multiVector(other, sphere_antiWedge_multiVector(self_, motor_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(other, sphere_antiWedge_multiVector(self_, multiVector_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_plane(self_: Sphere, other: Plane) -> Plane {
    return plane_wedge_scalar(other, sphere_antiWedge_roundPoint(self_, plane_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_roundPoint(self_: Sphere, other: RoundPoint) -> Sphere {
    return roundPoint_wedge_circle(other, sphere_antiWedge_sphere(self_, roundPoint_dual(other)));
}

fn sphere_antiProjectViaHorizonOnto_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere_wedge_scalar(other, sphere_antiWedge_roundPoint(self_, sphere_dual(other)));
}

fn circle_projectOrthogonallyOnto_circle(self_: Circle, other: Circle) -> Circle {
    return circle_antiWedge_antiScalar(other, circle_wedge_dipole(self_, circle_antiDual(other)));
}

fn circle_projectOrthogonallyOnto_flector(self_: Circle, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, circle_wedge_multiVector(self_, flector_antiDual(other)));
}

fn circle_projectOrthogonallyOnto_line(self_: Circle, other: Line) -> Line {
    return line_antiWedge_antiScalar(other, circle_wedge_dipole(self_, line_antiDual(other)));
}

fn circle_projectOrthogonallyOnto_motor(self_: Circle, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, circle_wedge_multiVector(self_, motor_antiDual(other)));
}

fn circle_projectOrthogonallyOnto_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, circle_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn circle_projectOrthogonallyOnto_plane(self_: Circle, other: Plane) -> Circle {
    return plane_antiWedge_sphere(other, circle_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn circle_projectOrthogonallyOnto_sphere(self_: Circle, other: Sphere) -> Circle {
    return sphere_antiWedge_sphere(other, circle_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_circle(self_: Dipole, other: Circle) -> Dipole {
    return circle_antiWedge_sphere(other, dipole_wedge_dipole(self_, circle_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole_antiWedge_antiScalar(other, dipole_wedge_circle(self_, dipole_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_flatPoint(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedge_antiScalar(other, dipole_wedge_circle(self_, flatPoint_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, dipole_wedge_multiVector(self_, flector_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_line(self_: Dipole, other: Line) -> Dipole {
    return line_antiWedge_sphere(other, dipole_wedge_dipole(self_, line_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, dipole_wedge_multiVector(self_, motor_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, dipole_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_plane(self_: Dipole, other: Plane) -> Dipole {
    return plane_antiWedge_circle(other, dipole_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn dipole_projectOrthogonallyOnto_sphere(self_: Dipole, other: Sphere) -> Dipole {
    return sphere_antiWedge_circle(other, dipole_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_circle(self_: FlatPoint, other: Circle) -> Dipole {
    return circle_antiWedge_plane(other, flatPoint_wedge_dipole(self_, circle_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole_antiWedge_antiScalar(other, flatPoint_wedge_circle(self_, dipole_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedge_antiScalar(other, flatPoint_wedge_circle(self_, flatPoint_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, flatPoint_wedge_multiVector(self_, flector_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_line(self_: FlatPoint, other: Line) -> FlatPoint {
    return line_antiWedge_plane(other, flatPoint_wedge_dipole(self_, line_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, flatPoint_wedge_multiVector(self_, motor_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, flatPoint_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_plane(self_: FlatPoint, other: Plane) -> FlatPoint {
    return plane_antiWedge_line(other, flatPoint_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn flatPoint_projectOrthogonallyOnto_sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return sphere_antiWedge_line(other, flatPoint_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_circle(self_: Flector, other: Circle) -> Dipole {
    return circle_antiWedge_plane(other, flector_wedge_dipole(self_, circle_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_dipole(self_: Flector, other: Dipole) -> Dipole {
    return dipole_antiWedge_antiScalar(other, flector_wedge_circle(self_, dipole_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_flatPoint(self_: Flector, other: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedge_antiScalar(other, flector_wedge_circle(self_, flatPoint_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, flector_wedge_multiVector(self_, flector_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_line(self_: Flector, other: Line) -> FlatPoint {
    return line_antiWedge_plane(other, flector_wedge_dipole(self_, line_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_motor(self_: Flector, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, flector_wedge_multiVector(self_, motor_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, flector_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_plane(self_: Flector, other: Plane) -> Flector {
    return plane_antiWedge_motor(other, flector_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn flector_projectOrthogonallyOnto_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return sphere_antiWedge_motor(other, flector_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn line_projectOrthogonallyOnto_circle(self_: Line, other: Circle) -> Circle {
    return circle_antiWedge_antiScalar(other, line_wedge_dipole(self_, circle_antiDual(other)));
}

fn line_projectOrthogonallyOnto_flector(self_: Line, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, line_wedge_multiVector(self_, flector_antiDual(other)));
}

fn line_projectOrthogonallyOnto_line(self_: Line, other: Line) -> Line {
    return line_antiWedge_antiScalar(other, line_wedge_dipole(self_, line_antiDual(other)));
}

fn line_projectOrthogonallyOnto_motor(self_: Line, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, line_wedge_multiVector(self_, motor_antiDual(other)));
}

fn line_projectOrthogonallyOnto_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, line_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn line_projectOrthogonallyOnto_plane(self_: Line, other: Plane) -> Line {
    return plane_antiWedge_plane(other, line_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn line_projectOrthogonallyOnto_sphere(self_: Line, other: Sphere) -> Circle {
    return sphere_antiWedge_plane(other, line_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn motor_projectOrthogonallyOnto_circle(self_: Motor, other: Circle) -> Circle {
    return circle_antiWedge_antiScalar(other, motor_wedge_dipole(self_, circle_antiDual(other)));
}

fn motor_projectOrthogonallyOnto_flector(self_: Motor, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, motor_wedge_multiVector(self_, flector_antiDual(other)));
}

fn motor_projectOrthogonallyOnto_line(self_: Motor, other: Line) -> Line {
    return line_antiWedge_antiScalar(other, motor_wedge_dipole(self_, line_antiDual(other)));
}

fn motor_projectOrthogonallyOnto_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, motor_wedge_multiVector(self_, motor_antiDual(other)));
}

fn motor_projectOrthogonallyOnto_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, motor_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn motor_projectOrthogonallyOnto_plane(self_: Motor, other: Plane) -> Line {
    return plane_antiWedge_plane(other, motor_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn motor_projectOrthogonallyOnto_sphere(self_: Motor, other: Sphere) -> Circle {
    return sphere_antiWedge_plane(other, motor_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle_antiWedge_multiVector(other, multiVector_wedge_dipole(self_, circle_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole_antiWedge_multiVector(other, multiVector_wedge_circle(self_, dipole_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flatPoint_antiWedge_multiVector(other, multiVector_wedge_circle(self_, flatPoint_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, multiVector_wedge_multiVector(self_, flector_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_line(self_: MultiVector, other: Line) -> MultiVector {
    return line_antiWedge_multiVector(other, multiVector_wedge_dipole(self_, line_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, multiVector_wedge_multiVector(self_, motor_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, multiVector_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane_antiWedge_multiVector(other, multiVector_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return roundPoint_antiWedge_multiVector(other, multiVector_wedge_sphere(self_, roundPoint_antiDual(other)));
}

fn multiVector_projectOrthogonallyOnto_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere_antiWedge_multiVector(other, multiVector_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn plane_projectOrthogonallyOnto_flector(self_: Plane, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, plane_wedge_multiVector(self_, flector_antiDual(other)));
}

fn plane_projectOrthogonallyOnto_motor(self_: Plane, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, plane_wedge_multiVector(self_, motor_antiDual(other)));
}

fn plane_projectOrthogonallyOnto_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, plane_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn plane_projectOrthogonallyOnto_plane(self_: Plane, other: Plane) -> Plane {
    return plane_antiWedge_antiScalar(other, plane_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn plane_projectOrthogonallyOnto_sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere_antiWedge_antiScalar(other, plane_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return circle_antiWedge_circle(other, roundPoint_wedge_dipole(self_, circle_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return dipole_antiWedge_sphere(other, roundPoint_wedge_circle(self_, dipole_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_flatPoint(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return flatPoint_antiWedge_sphere(other, roundPoint_wedge_circle(self_, flatPoint_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, roundPoint_wedge_multiVector(self_, flector_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_line(self_: RoundPoint, other: Line) -> RoundPoint {
    return line_antiWedge_circle(other, roundPoint_wedge_dipole(self_, line_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, roundPoint_wedge_multiVector(self_, motor_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, roundPoint_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return plane_antiWedge_dipole(other, roundPoint_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return roundPoint_antiWedge_antiScalar(other, roundPoint_wedge_sphere(self_, roundPoint_antiDual(other)));
}

fn roundPoint_projectOrthogonallyOnto_sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return sphere_antiWedge_dipole(other, roundPoint_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn sphere_projectOrthogonallyOnto_flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, sphere_wedge_multiVector(self_, flector_antiDual(other)));
}

fn sphere_projectOrthogonallyOnto_motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, sphere_wedge_multiVector(self_, motor_antiDual(other)));
}

fn sphere_projectOrthogonallyOnto_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, sphere_wedge_multiVector(self_, multiVector_antiDual(other)));
}

fn sphere_projectOrthogonallyOnto_plane(self_: Sphere, other: Plane) -> Plane {
    return plane_antiWedge_antiScalar(other, sphere_wedge_roundPoint(self_, plane_antiDual(other)));
}

fn sphere_projectOrthogonallyOnto_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere_antiWedge_antiScalar(other, sphere_wedge_roundPoint(self_, sphere_antiDual(other)));
}

fn circle_projectViaOriginOnto_circle(self_: Circle, other: Circle) -> Circle {
    return circle_antiWedge_antiScalar(other, circle_wedge_dipole(self_, circle_dual(other)));
}

fn circle_projectViaOriginOnto_flector(self_: Circle, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, circle_wedge_multiVector(self_, flector_dual(other)));
}

fn circle_projectViaOriginOnto_line(self_: Circle, other: Line) -> Line {
    return line_antiWedge_antiScalar(other, circle_wedge_dipole(self_, line_dual(other)));
}

fn circle_projectViaOriginOnto_motor(self_: Circle, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, circle_wedge_multiVector(self_, motor_dual(other)));
}

fn circle_projectViaOriginOnto_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, circle_wedge_multiVector(self_, multiVector_dual(other)));
}

fn circle_projectViaOriginOnto_plane(self_: Circle, other: Plane) -> Circle {
    return plane_antiWedge_sphere(other, circle_wedge_roundPoint(self_, plane_dual(other)));
}

fn circle_projectViaOriginOnto_sphere(self_: Circle, other: Sphere) -> Circle {
    return sphere_antiWedge_sphere(other, circle_wedge_roundPoint(self_, sphere_dual(other)));
}

fn dipole_projectViaOriginOnto_circle(self_: Dipole, other: Circle) -> Dipole {
    return circle_antiWedge_sphere(other, dipole_wedge_dipole(self_, circle_dual(other)));
}

fn dipole_projectViaOriginOnto_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole_antiWedge_antiScalar(other, dipole_wedge_circle(self_, dipole_dual(other)));
}

fn dipole_projectViaOriginOnto_flatPoint(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedge_antiScalar(other, dipole_wedge_circle(self_, flatPoint_dual(other)));
}

fn dipole_projectViaOriginOnto_flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, dipole_wedge_multiVector(self_, flector_dual(other)));
}

fn dipole_projectViaOriginOnto_line(self_: Dipole, other: Line) -> Dipole {
    return line_antiWedge_sphere(other, dipole_wedge_dipole(self_, line_dual(other)));
}

fn dipole_projectViaOriginOnto_motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, dipole_wedge_multiVector(self_, motor_dual(other)));
}

fn dipole_projectViaOriginOnto_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, dipole_wedge_multiVector(self_, multiVector_dual(other)));
}

fn dipole_projectViaOriginOnto_plane(self_: Dipole, other: Plane) -> Dipole {
    return plane_antiWedge_circle(other, dipole_wedge_roundPoint(self_, plane_dual(other)));
}

fn dipole_projectViaOriginOnto_sphere(self_: Dipole, other: Sphere) -> Dipole {
    return sphere_antiWedge_circle(other, dipole_wedge_roundPoint(self_, sphere_dual(other)));
}

fn flatPoint_projectViaOriginOnto_circle(self_: FlatPoint, other: Circle) -> Dipole {
    return circle_antiWedge_plane(other, flatPoint_wedge_dipole(self_, circle_dual(other)));
}

fn flatPoint_projectViaOriginOnto_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole_antiWedge_antiScalar(other, flatPoint_wedge_circle(self_, dipole_dual(other)));
}

fn flatPoint_projectViaOriginOnto_flatPoint(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedge_antiScalar(other, flatPoint_wedge_circle(self_, flatPoint_dual(other)));
}

fn flatPoint_projectViaOriginOnto_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, flatPoint_wedge_multiVector(self_, flector_dual(other)));
}

fn flatPoint_projectViaOriginOnto_line(self_: FlatPoint, other: Line) -> FlatPoint {
    return line_antiWedge_plane(other, flatPoint_wedge_dipole(self_, line_dual(other)));
}

fn flatPoint_projectViaOriginOnto_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, flatPoint_wedge_multiVector(self_, motor_dual(other)));
}

fn flatPoint_projectViaOriginOnto_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, flatPoint_wedge_multiVector(self_, multiVector_dual(other)));
}

fn flatPoint_projectViaOriginOnto_plane(self_: FlatPoint, other: Plane) -> FlatPoint {
    return plane_antiWedge_line(other, flatPoint_wedge_roundPoint(self_, plane_dual(other)));
}

fn flatPoint_projectViaOriginOnto_sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return sphere_antiWedge_line(other, flatPoint_wedge_roundPoint(self_, sphere_dual(other)));
}

fn flector_projectViaOriginOnto_circle(self_: Flector, other: Circle) -> Dipole {
    return circle_antiWedge_plane(other, flector_wedge_dipole(self_, circle_dual(other)));
}

fn flector_projectViaOriginOnto_dipole(self_: Flector, other: Dipole) -> Dipole {
    return dipole_antiWedge_antiScalar(other, flector_wedge_circle(self_, dipole_dual(other)));
}

fn flector_projectViaOriginOnto_flatPoint(self_: Flector, other: FlatPoint) -> FlatPoint {
    return flatPoint_antiWedge_antiScalar(other, flector_wedge_circle(self_, flatPoint_dual(other)));
}

fn flector_projectViaOriginOnto_flector(self_: Flector, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, flector_wedge_multiVector(self_, flector_dual(other)));
}

fn flector_projectViaOriginOnto_line(self_: Flector, other: Line) -> FlatPoint {
    return line_antiWedge_plane(other, flector_wedge_dipole(self_, line_dual(other)));
}

fn flector_projectViaOriginOnto_motor(self_: Flector, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, flector_wedge_multiVector(self_, motor_dual(other)));
}

fn flector_projectViaOriginOnto_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, flector_wedge_multiVector(self_, multiVector_dual(other)));
}

fn flector_projectViaOriginOnto_plane(self_: Flector, other: Plane) -> Flector {
    return plane_antiWedge_motor(other, flector_wedge_roundPoint(self_, plane_dual(other)));
}

fn flector_projectViaOriginOnto_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return sphere_antiWedge_motor(other, flector_wedge_roundPoint(self_, sphere_dual(other)));
}

fn line_projectViaOriginOnto_circle(self_: Line, other: Circle) -> Circle {
    return circle_antiWedge_antiScalar(other, line_wedge_dipole(self_, circle_dual(other)));
}

fn line_projectViaOriginOnto_flector(self_: Line, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, line_wedge_multiVector(self_, flector_dual(other)));
}

fn line_projectViaOriginOnto_line(self_: Line, other: Line) -> Line {
    return line_antiWedge_antiScalar(other, line_wedge_dipole(self_, line_dual(other)));
}

fn line_projectViaOriginOnto_motor(self_: Line, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, line_wedge_multiVector(self_, motor_dual(other)));
}

fn line_projectViaOriginOnto_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, line_wedge_multiVector(self_, multiVector_dual(other)));
}

fn line_projectViaOriginOnto_plane(self_: Line, other: Plane) -> Line {
    return plane_antiWedge_plane(other, line_wedge_roundPoint(self_, plane_dual(other)));
}

fn line_projectViaOriginOnto_sphere(self_: Line, other: Sphere) -> Circle {
    return sphere_antiWedge_plane(other, line_wedge_roundPoint(self_, sphere_dual(other)));
}

fn motor_projectViaOriginOnto_circle(self_: Motor, other: Circle) -> Circle {
    return circle_antiWedge_antiScalar(other, motor_wedge_dipole(self_, circle_dual(other)));
}

fn motor_projectViaOriginOnto_flector(self_: Motor, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, motor_wedge_multiVector(self_, flector_dual(other)));
}

fn motor_projectViaOriginOnto_line(self_: Motor, other: Line) -> Line {
    return line_antiWedge_antiScalar(other, motor_wedge_dipole(self_, line_dual(other)));
}

fn motor_projectViaOriginOnto_motor(self_: Motor, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, motor_wedge_multiVector(self_, motor_dual(other)));
}

fn motor_projectViaOriginOnto_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, motor_wedge_multiVector(self_, multiVector_dual(other)));
}

fn motor_projectViaOriginOnto_plane(self_: Motor, other: Plane) -> Line {
    return plane_antiWedge_plane(other, motor_wedge_roundPoint(self_, plane_dual(other)));
}

fn motor_projectViaOriginOnto_sphere(self_: Motor, other: Sphere) -> Circle {
    return sphere_antiWedge_plane(other, motor_wedge_roundPoint(self_, sphere_dual(other)));
}

fn multiVector_projectViaOriginOnto_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle_antiWedge_multiVector(other, multiVector_wedge_dipole(self_, circle_dual(other)));
}

fn multiVector_projectViaOriginOnto_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole_antiWedge_multiVector(other, multiVector_wedge_circle(self_, dipole_dual(other)));
}

fn multiVector_projectViaOriginOnto_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flatPoint_antiWedge_multiVector(other, multiVector_wedge_circle(self_, flatPoint_dual(other)));
}

fn multiVector_projectViaOriginOnto_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, multiVector_wedge_multiVector(self_, flector_dual(other)));
}

fn multiVector_projectViaOriginOnto_line(self_: MultiVector, other: Line) -> MultiVector {
    return line_antiWedge_multiVector(other, multiVector_wedge_dipole(self_, line_dual(other)));
}

fn multiVector_projectViaOriginOnto_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, multiVector_wedge_multiVector(self_, motor_dual(other)));
}

fn multiVector_projectViaOriginOnto_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, multiVector_wedge_multiVector(self_, multiVector_dual(other)));
}

fn multiVector_projectViaOriginOnto_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane_antiWedge_multiVector(other, multiVector_wedge_roundPoint(self_, plane_dual(other)));
}

fn multiVector_projectViaOriginOnto_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return roundPoint_antiWedge_multiVector(other, multiVector_wedge_sphere(self_, roundPoint_dual(other)));
}

fn multiVector_projectViaOriginOnto_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere_antiWedge_multiVector(other, multiVector_wedge_roundPoint(self_, sphere_dual(other)));
}

fn plane_projectViaOriginOnto_flector(self_: Plane, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, plane_wedge_multiVector(self_, flector_dual(other)));
}

fn plane_projectViaOriginOnto_motor(self_: Plane, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, plane_wedge_multiVector(self_, motor_dual(other)));
}

fn plane_projectViaOriginOnto_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, plane_wedge_multiVector(self_, multiVector_dual(other)));
}

fn plane_projectViaOriginOnto_plane(self_: Plane, other: Plane) -> Plane {
    return plane_antiWedge_antiScalar(other, plane_wedge_roundPoint(self_, plane_dual(other)));
}

fn plane_projectViaOriginOnto_sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere_antiWedge_antiScalar(other, plane_wedge_roundPoint(self_, sphere_dual(other)));
}

fn roundPoint_projectViaOriginOnto_circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return circle_antiWedge_circle(other, roundPoint_wedge_dipole(self_, circle_dual(other)));
}

fn roundPoint_projectViaOriginOnto_dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return dipole_antiWedge_sphere(other, roundPoint_wedge_circle(self_, dipole_dual(other)));
}

fn roundPoint_projectViaOriginOnto_flatPoint(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return flatPoint_antiWedge_sphere(other, roundPoint_wedge_circle(self_, flatPoint_dual(other)));
}

fn roundPoint_projectViaOriginOnto_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, roundPoint_wedge_multiVector(self_, flector_dual(other)));
}

fn roundPoint_projectViaOriginOnto_line(self_: RoundPoint, other: Line) -> RoundPoint {
    return line_antiWedge_circle(other, roundPoint_wedge_dipole(self_, line_dual(other)));
}

fn roundPoint_projectViaOriginOnto_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, roundPoint_wedge_multiVector(self_, motor_dual(other)));
}

fn roundPoint_projectViaOriginOnto_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, roundPoint_wedge_multiVector(self_, multiVector_dual(other)));
}

fn roundPoint_projectViaOriginOnto_plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return plane_antiWedge_dipole(other, roundPoint_wedge_roundPoint(self_, plane_dual(other)));
}

fn roundPoint_projectViaOriginOnto_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return roundPoint_antiWedge_antiScalar(other, roundPoint_wedge_sphere(self_, roundPoint_dual(other)));
}

fn roundPoint_projectViaOriginOnto_sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return sphere_antiWedge_dipole(other, roundPoint_wedge_roundPoint(self_, sphere_dual(other)));
}

fn sphere_projectViaOriginOnto_flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(other, sphere_wedge_multiVector(self_, flector_dual(other)));
}

fn sphere_projectViaOriginOnto_motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(other, sphere_wedge_multiVector(self_, motor_dual(other)));
}

fn sphere_projectViaOriginOnto_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(other, sphere_wedge_multiVector(self_, multiVector_dual(other)));
}

fn sphere_projectViaOriginOnto_plane(self_: Sphere, other: Plane) -> Plane {
    return plane_antiWedge_antiScalar(other, sphere_wedge_roundPoint(self_, plane_dual(other)));
}

fn sphere_projectViaOriginOnto_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere_antiWedge_antiScalar(other, sphere_wedge_roundPoint(self_, sphere_dual(other)));
}

fn circle_antiRejectOrthogonallyFrom_dipole(self_: Circle, other: Dipole) -> Circle {
    return antiScalar_antiWedge_circle(circle_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn circle_antiRejectOrthogonallyFrom_flatPoint(self_: Circle, other: FlatPoint) -> Circle {
    return antiScalar_antiWedge_circle(circle_wedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn circle_antiRejectOrthogonallyFrom_flector(self_: Circle, other: Flector) -> MultiVector {
    return antiScalar_antiWedge_multiVector(circle_wedge_flector(self_, other), flector_antiDual(other));
}

fn circle_antiRejectOrthogonallyFrom_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(circle_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn circle_antiRejectOrthogonallyFrom_roundPoint(self_: Circle, other: RoundPoint) -> Circle {
    return sphere_antiWedge_sphere(circle_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_circle(self_: Dipole, other: Circle) -> Dipole {
    return antiScalar_antiWedge_dipole(dipole_wedge_circle(self_, other), circle_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return sphere_antiWedge_circle(dipole_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_flatPoint(self_: Dipole, other: FlatPoint) -> Dipole {
    return plane_antiWedge_circle(dipole_wedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_flector(self_: Dipole, other: Flector) -> MultiVector {
    return plane_antiWedge_multiVector(dipole_wedge_flector(self_, other), flector_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_line(self_: Dipole, other: Line) -> Dipole {
    return antiScalar_antiWedge_dipole(dipole_wedge_line(self_, other), line_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_motor(self_: Dipole, other: Motor) -> MultiVector {
    return antiScalar_antiWedge_multiVector(dipole_wedge_motor(self_, other), motor_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(dipole_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn dipole_antiRejectOrthogonallyFrom_roundPoint(self_: Dipole, other: RoundPoint) -> Dipole {
    return circle_antiWedge_sphere(dipole_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn flatPoint_antiRejectOrthogonallyFrom_circle(self_: FlatPoint, other: Circle) -> Dipole {
    return antiScalar_antiWedge_dipole(flatPoint_wedge_circle(self_, other), circle_antiDual(other));
}

fn flatPoint_antiRejectOrthogonallyFrom_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return plane_antiWedge_circle(flatPoint_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn flatPoint_antiRejectOrthogonallyFrom_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(flatPoint_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn flatPoint_antiRejectOrthogonallyFrom_roundPoint(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return line_antiWedge_sphere(flatPoint_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn flector_antiRejectOrthogonallyFrom_circle(self_: Flector, other: Circle) -> Dipole {
    return antiScalar_antiWedge_dipole(flector_wedge_circle(self_, other), circle_antiDual(other));
}

fn flector_antiRejectOrthogonallyFrom_dipole(self_: Flector, other: Dipole) -> Dipole {
    return plane_antiWedge_circle(flector_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn flector_antiRejectOrthogonallyFrom_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(flector_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn flector_antiRejectOrthogonallyFrom_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return motor_antiWedge_sphere(flector_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn line_antiRejectOrthogonallyFrom_dipole(self_: Line, other: Dipole) -> Circle {
    return antiScalar_antiWedge_circle(line_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn line_antiRejectOrthogonallyFrom_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(line_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn line_antiRejectOrthogonallyFrom_roundPoint(self_: Line, other: RoundPoint) -> Circle {
    return plane_antiWedge_sphere(line_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn motor_antiRejectOrthogonallyFrom_dipole(self_: Motor, other: Dipole) -> Circle {
    return antiScalar_antiWedge_circle(motor_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn motor_antiRejectOrthogonallyFrom_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(motor_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn motor_antiRejectOrthogonallyFrom_roundPoint(self_: Motor, other: RoundPoint) -> Circle {
    return plane_antiWedge_sphere(motor_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_antiWedge_dipole(multiVector_wedge_circle(self_, other), circle_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_antiWedge_circle(multiVector_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_antiWedge_circle(multiVector_wedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_wedge_flector(self_, other), flector_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_antiWedge_dipole(multiVector_wedge_line(self_, other), line_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_wedge_motor(self_, other), motor_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_antiWedge_roundPoint(multiVector_wedge_plane(self_, other), plane_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_antiWedge_sphere(multiVector_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn multiVector_antiRejectOrthogonallyFrom_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_antiWedge_roundPoint(multiVector_wedge_sphere(self_, other), sphere_antiDual(other));
}

fn plane_antiRejectOrthogonallyFrom_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(plane_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn plane_antiRejectOrthogonallyFrom_roundPoint(self_: Plane, other: RoundPoint) -> Sphere {
    return antiScalar_antiWedge_sphere(plane_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return sphere_antiWedge_dipole(roundPoint_wedge_circle(self_, other), circle_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return circle_antiWedge_circle(roundPoint_wedge_dipole(self_, other), dipole_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_flatPoint(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return line_antiWedge_circle(roundPoint_wedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return motor_antiWedge_multiVector(roundPoint_wedge_flector(self_, other), flector_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_line(self_: RoundPoint, other: Line) -> RoundPoint {
    return plane_antiWedge_dipole(roundPoint_wedge_line(self_, other), line_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return plane_antiWedge_multiVector(roundPoint_wedge_motor(self_, other), motor_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(roundPoint_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return antiScalar_antiWedge_roundPoint(roundPoint_wedge_plane(self_, other), plane_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return dipole_antiWedge_sphere(roundPoint_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn roundPoint_antiRejectOrthogonallyFrom_sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return antiScalar_antiWedge_roundPoint(roundPoint_wedge_sphere(self_, other), sphere_antiDual(other));
}

fn sphere_antiRejectOrthogonallyFrom_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(sphere_wedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn sphere_antiRejectOrthogonallyFrom_roundPoint(self_: Sphere, other: RoundPoint) -> Sphere {
    return antiScalar_antiWedge_sphere(sphere_wedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn circle_antiRejectViaHorizonFrom_dipole(self_: Circle, other: Dipole) -> Circle {
    return antiScalar_antiWedge_circle(circle_wedge_dipole(self_, other), dipole_dual(other));
}

fn circle_antiRejectViaHorizonFrom_flatPoint(self_: Circle, other: FlatPoint) -> Circle {
    return antiScalar_antiWedge_circle(circle_wedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn circle_antiRejectViaHorizonFrom_flector(self_: Circle, other: Flector) -> MultiVector {
    return antiScalar_antiWedge_multiVector(circle_wedge_flector(self_, other), flector_dual(other));
}

fn circle_antiRejectViaHorizonFrom_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(circle_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn circle_antiRejectViaHorizonFrom_roundPoint(self_: Circle, other: RoundPoint) -> Circle {
    return sphere_antiWedge_sphere(circle_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_circle(self_: Dipole, other: Circle) -> Dipole {
    return antiScalar_antiWedge_dipole(dipole_wedge_circle(self_, other), circle_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_dipole(self_: Dipole, other: Dipole) -> Dipole {
    return sphere_antiWedge_circle(dipole_wedge_dipole(self_, other), dipole_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_flatPoint(self_: Dipole, other: FlatPoint) -> Dipole {
    return plane_antiWedge_circle(dipole_wedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_flector(self_: Dipole, other: Flector) -> MultiVector {
    return plane_antiWedge_multiVector(dipole_wedge_flector(self_, other), flector_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_line(self_: Dipole, other: Line) -> Dipole {
    return antiScalar_antiWedge_dipole(dipole_wedge_line(self_, other), line_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_motor(self_: Dipole, other: Motor) -> MultiVector {
    return antiScalar_antiWedge_multiVector(dipole_wedge_motor(self_, other), motor_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(dipole_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn dipole_antiRejectViaHorizonFrom_roundPoint(self_: Dipole, other: RoundPoint) -> Dipole {
    return circle_antiWedge_sphere(dipole_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn flatPoint_antiRejectViaHorizonFrom_circle(self_: FlatPoint, other: Circle) -> Dipole {
    return antiScalar_antiWedge_dipole(flatPoint_wedge_circle(self_, other), circle_dual(other));
}

fn flatPoint_antiRejectViaHorizonFrom_dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return plane_antiWedge_circle(flatPoint_wedge_dipole(self_, other), dipole_dual(other));
}

fn flatPoint_antiRejectViaHorizonFrom_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(flatPoint_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn flatPoint_antiRejectViaHorizonFrom_roundPoint(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return line_antiWedge_sphere(flatPoint_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn flector_antiRejectViaHorizonFrom_circle(self_: Flector, other: Circle) -> Dipole {
    return antiScalar_antiWedge_dipole(flector_wedge_circle(self_, other), circle_dual(other));
}

fn flector_antiRejectViaHorizonFrom_dipole(self_: Flector, other: Dipole) -> Dipole {
    return plane_antiWedge_circle(flector_wedge_dipole(self_, other), dipole_dual(other));
}

fn flector_antiRejectViaHorizonFrom_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(flector_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn flector_antiRejectViaHorizonFrom_roundPoint(self_: Flector, other: RoundPoint) -> MultiVector {
    return motor_antiWedge_sphere(flector_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn line_antiRejectViaHorizonFrom_dipole(self_: Line, other: Dipole) -> Circle {
    return antiScalar_antiWedge_circle(line_wedge_dipole(self_, other), dipole_dual(other));
}

fn line_antiRejectViaHorizonFrom_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(line_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn line_antiRejectViaHorizonFrom_roundPoint(self_: Line, other: RoundPoint) -> Circle {
    return plane_antiWedge_sphere(line_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn motor_antiRejectViaHorizonFrom_dipole(self_: Motor, other: Dipole) -> Circle {
    return antiScalar_antiWedge_circle(motor_wedge_dipole(self_, other), dipole_dual(other));
}

fn motor_antiRejectViaHorizonFrom_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(motor_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn motor_antiRejectViaHorizonFrom_roundPoint(self_: Motor, other: RoundPoint) -> Circle {
    return plane_antiWedge_sphere(motor_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_antiWedge_dipole(multiVector_wedge_circle(self_, other), circle_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_antiWedge_circle(multiVector_wedge_dipole(self_, other), dipole_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_antiWedge_circle(multiVector_wedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_wedge_flector(self_, other), flector_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_antiWedge_dipole(multiVector_wedge_line(self_, other), line_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_wedge_motor(self_, other), motor_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(multiVector_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_antiWedge_roundPoint(multiVector_wedge_plane(self_, other), plane_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_antiWedge_sphere(multiVector_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn multiVector_antiRejectViaHorizonFrom_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_antiWedge_roundPoint(multiVector_wedge_sphere(self_, other), sphere_dual(other));
}

fn plane_antiRejectViaHorizonFrom_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(plane_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn plane_antiRejectViaHorizonFrom_roundPoint(self_: Plane, other: RoundPoint) -> Sphere {
    return antiScalar_antiWedge_sphere(plane_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return sphere_antiWedge_dipole(roundPoint_wedge_circle(self_, other), circle_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return circle_antiWedge_circle(roundPoint_wedge_dipole(self_, other), dipole_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_flatPoint(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return line_antiWedge_circle(roundPoint_wedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return motor_antiWedge_multiVector(roundPoint_wedge_flector(self_, other), flector_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_line(self_: RoundPoint, other: Line) -> RoundPoint {
    return plane_antiWedge_dipole(roundPoint_wedge_line(self_, other), line_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return plane_antiWedge_multiVector(roundPoint_wedge_motor(self_, other), motor_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(roundPoint_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return antiScalar_antiWedge_roundPoint(roundPoint_wedge_plane(self_, other), plane_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_roundPoint(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return dipole_antiWedge_sphere(roundPoint_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn roundPoint_antiRejectViaHorizonFrom_sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return antiScalar_antiWedge_roundPoint(roundPoint_wedge_sphere(self_, other), sphere_dual(other));
}

fn sphere_antiRejectViaHorizonFrom_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(sphere_wedge_multiVector(self_, other), multiVector_dual(other));
}

fn sphere_antiRejectViaHorizonFrom_roundPoint(self_: Sphere, other: RoundPoint) -> Sphere {
    return antiScalar_antiWedge_sphere(sphere_wedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn circle_rejectOrthogonallyFrom_circle(self_: Circle, other: Circle) -> Circle {
    return roundPoint_wedge_dipole(circle_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_dipole(self_: Circle, other: Dipole) -> Circle {
    return scalar_wedge_circle(circle_antiWedge_dipole(self_, other), dipole_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_flatPoint(self_: Circle, other: FlatPoint) -> Circle {
    return scalar_wedge_circle(circle_antiWedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_flector(self_: Circle, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(circle_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_line(self_: Circle, other: Line) -> Circle {
    return roundPoint_wedge_dipole(circle_antiWedge_line(self_, other), line_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_motor(self_: Circle, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(circle_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(circle_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_plane(self_: Circle, other: Plane) -> Circle {
    return dipole_wedge_roundPoint(circle_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn circle_rejectOrthogonallyFrom_sphere(self_: Circle, other: Sphere) -> Circle {
    return dipole_wedge_roundPoint(circle_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn dipole_rejectOrthogonallyFrom_circle(self_: Dipole, other: Circle) -> Dipole {
    return scalar_wedge_dipole(dipole_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn dipole_rejectOrthogonallyFrom_flector(self_: Dipole, other: Flector) -> MultiVector {
    return roundPoint_wedge_multiVector(dipole_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn dipole_rejectOrthogonallyFrom_line(self_: Dipole, other: Line) -> Dipole {
    return scalar_wedge_dipole(dipole_antiWedge_line(self_, other), line_antiDual(other));
}

fn dipole_rejectOrthogonallyFrom_motor(self_: Dipole, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(dipole_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn dipole_rejectOrthogonallyFrom_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(dipole_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn dipole_rejectOrthogonallyFrom_plane(self_: Dipole, other: Plane) -> Dipole {
    return roundPoint_wedge_roundPoint(dipole_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn dipole_rejectOrthogonallyFrom_sphere(self_: Dipole, other: Sphere) -> Dipole {
    return roundPoint_wedge_roundPoint(dipole_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn flatPoint_rejectOrthogonallyFrom_circle(self_: FlatPoint, other: Circle) -> Dipole {
    return scalar_wedge_dipole(flatPoint_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn flatPoint_rejectOrthogonallyFrom_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return roundPoint_wedge_multiVector(flatPoint_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn flatPoint_rejectOrthogonallyFrom_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flatPoint_wedge_multiVector(flatPoint_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn flatPoint_rejectOrthogonallyFrom_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(flatPoint_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn flatPoint_rejectOrthogonallyFrom_plane(self_: FlatPoint, other: Plane) -> Dipole {
    return roundPoint_wedge_roundPoint(flatPoint_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn flatPoint_rejectOrthogonallyFrom_sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return roundPoint_wedge_roundPoint(flatPoint_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_circle(self_: Flector, other: Circle) -> MultiVector {
    return multiVector_wedge_dipole(flector_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_dipole(self_: Flector, other: Dipole) -> Sphere {
    return roundPoint_wedge_circle(flector_antiWedge_dipole(self_, other), dipole_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_flatPoint(self_: Flector, other: FlatPoint) -> Sphere {
    return roundPoint_wedge_circle(flector_antiWedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_flector(self_: Flector, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(flector_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_line(self_: Flector, other: Line) -> Plane {
    return flatPoint_wedge_dipole(flector_antiWedge_line(self_, other), line_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_motor(self_: Flector, other: Motor) -> MultiVector {
    return flector_wedge_multiVector(flector_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(flector_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_plane(self_: Flector, other: Plane) -> MultiVector {
    return multiVector_wedge_roundPoint(flector_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_roundPoint(self_: Flector, other: RoundPoint) -> Sphere {
    return scalar_wedge_sphere(flector_antiWedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn flector_rejectOrthogonallyFrom_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return multiVector_wedge_roundPoint(flector_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn line_rejectOrthogonallyFrom_circle(self_: Line, other: Circle) -> Circle {
    return roundPoint_wedge_dipole(line_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn line_rejectOrthogonallyFrom_dipole(self_: Line, other: Dipole) -> Circle {
    return scalar_wedge_circle(line_antiWedge_dipole(self_, other), dipole_antiDual(other));
}

fn line_rejectOrthogonallyFrom_flector(self_: Line, other: Flector) -> MultiVector {
    return flatPoint_wedge_multiVector(line_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn line_rejectOrthogonallyFrom_line(self_: Line, other: Line) -> Circle {
    return roundPoint_wedge_dipole(line_antiWedge_line(self_, other), line_antiDual(other));
}

fn line_rejectOrthogonallyFrom_motor(self_: Line, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(line_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn line_rejectOrthogonallyFrom_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(line_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn line_rejectOrthogonallyFrom_plane(self_: Line, other: Plane) -> Line {
    return flatPoint_wedge_roundPoint(line_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn line_rejectOrthogonallyFrom_sphere(self_: Line, other: Sphere) -> Circle {
    return dipole_wedge_roundPoint(line_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_circle(self_: Motor, other: Circle) -> MultiVector {
    return multiVector_wedge_dipole(motor_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return multiVector_wedge_circle(motor_antiWedge_dipole(self_, other), dipole_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_flatPoint(self_: Motor, other: FlatPoint) -> AntiScalar {
    return flatPoint_wedge_circle(motor_antiWedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_flector(self_: Motor, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(motor_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_line(self_: Motor, other: Line) -> MultiVector {
    return multiVector_wedge_dipole(motor_antiWedge_line(self_, other), line_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_motor(self_: Motor, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(motor_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(motor_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_plane(self_: Motor, other: Plane) -> Motor {
    return flector_wedge_roundPoint(motor_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_roundPoint(self_: Motor, other: RoundPoint) -> AntiScalar {
    return roundPoint_wedge_sphere(motor_antiWedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn motor_rejectOrthogonallyFrom_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return multiVector_wedge_roundPoint(motor_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_wedge_dipole(multiVector_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_wedge_circle(multiVector_antiWedge_dipole(self_, other), dipole_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_wedge_circle(multiVector_antiWedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(multiVector_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_wedge_dipole(multiVector_antiWedge_line(self_, other), line_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(multiVector_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(multiVector_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_wedge_roundPoint(multiVector_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_wedge_sphere(multiVector_antiWedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn multiVector_rejectOrthogonallyFrom_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_wedge_roundPoint(multiVector_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_circle(self_: Plane, other: Circle) -> Sphere {
    return dipole_wedge_dipole(plane_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_dipole(self_: Plane, other: Dipole) -> Sphere {
    return roundPoint_wedge_circle(plane_antiWedge_dipole(self_, other), dipole_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_flatPoint(self_: Plane, other: FlatPoint) -> Sphere {
    return roundPoint_wedge_circle(plane_antiWedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_flector(self_: Plane, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(plane_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_line(self_: Plane, other: Line) -> Plane {
    return flatPoint_wedge_dipole(plane_antiWedge_line(self_, other), line_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_motor(self_: Plane, other: Motor) -> MultiVector {
    return flector_wedge_multiVector(plane_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(plane_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_plane(self_: Plane, other: Plane) -> Plane {
    return line_wedge_roundPoint(plane_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_roundPoint(self_: Plane, other: RoundPoint) -> Sphere {
    return scalar_wedge_sphere(plane_antiWedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn plane_rejectOrthogonallyFrom_sphere(self_: Plane, other: Sphere) -> Sphere {
    return circle_wedge_roundPoint(plane_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn roundPoint_rejectOrthogonallyFrom_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return scalar_wedge_multiVector(roundPoint_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn roundPoint_rejectOrthogonallyFrom_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return roundPoint_wedge_multiVector(roundPoint_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn roundPoint_rejectOrthogonallyFrom_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(roundPoint_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn roundPoint_rejectOrthogonallyFrom_plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return scalar_wedge_roundPoint(roundPoint_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn roundPoint_rejectOrthogonallyFrom_sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return scalar_wedge_roundPoint(roundPoint_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_circle(self_: Sphere, other: Circle) -> Sphere {
    return dipole_wedge_dipole(sphere_antiWedge_circle(self_, other), circle_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_dipole(self_: Sphere, other: Dipole) -> Sphere {
    return roundPoint_wedge_circle(sphere_antiWedge_dipole(self_, other), dipole_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_flatPoint(self_: Sphere, other: FlatPoint) -> Sphere {
    return roundPoint_wedge_circle(sphere_antiWedge_flatPoint(self_, other), flatPoint_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_flector(self_: Sphere, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(sphere_antiWedge_flector(self_, other), flector_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_line(self_: Sphere, other: Line) -> Sphere {
    return dipole_wedge_dipole(sphere_antiWedge_line(self_, other), line_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_motor(self_: Sphere, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(sphere_antiWedge_motor(self_, other), motor_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(sphere_antiWedge_multiVector(self_, other), multiVector_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_plane(self_: Sphere, other: Plane) -> Sphere {
    return circle_wedge_roundPoint(sphere_antiWedge_plane(self_, other), plane_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_roundPoint(self_: Sphere, other: RoundPoint) -> Sphere {
    return scalar_wedge_sphere(sphere_antiWedge_roundPoint(self_, other), roundPoint_antiDual(other));
}

fn sphere_rejectOrthogonallyFrom_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return circle_wedge_roundPoint(sphere_antiWedge_sphere(self_, other), sphere_antiDual(other));
}

fn circle_rejectViaOriginFrom_circle(self_: Circle, other: Circle) -> Circle {
    return roundPoint_wedge_dipole(circle_antiWedge_circle(self_, other), circle_dual(other));
}

fn circle_rejectViaOriginFrom_dipole(self_: Circle, other: Dipole) -> Circle {
    return scalar_wedge_circle(circle_antiWedge_dipole(self_, other), dipole_dual(other));
}

fn circle_rejectViaOriginFrom_flatPoint(self_: Circle, other: FlatPoint) -> Circle {
    return scalar_wedge_circle(circle_antiWedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn circle_rejectViaOriginFrom_flector(self_: Circle, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(circle_antiWedge_flector(self_, other), flector_dual(other));
}

fn circle_rejectViaOriginFrom_line(self_: Circle, other: Line) -> Circle {
    return roundPoint_wedge_dipole(circle_antiWedge_line(self_, other), line_dual(other));
}

fn circle_rejectViaOriginFrom_motor(self_: Circle, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(circle_antiWedge_motor(self_, other), motor_dual(other));
}

fn circle_rejectViaOriginFrom_multiVector(self_: Circle, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(circle_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn circle_rejectViaOriginFrom_plane(self_: Circle, other: Plane) -> Circle {
    return dipole_wedge_roundPoint(circle_antiWedge_plane(self_, other), plane_dual(other));
}

fn circle_rejectViaOriginFrom_sphere(self_: Circle, other: Sphere) -> Circle {
    return dipole_wedge_roundPoint(circle_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn dipole_rejectViaOriginFrom_circle(self_: Dipole, other: Circle) -> Dipole {
    return scalar_wedge_dipole(dipole_antiWedge_circle(self_, other), circle_dual(other));
}

fn dipole_rejectViaOriginFrom_flector(self_: Dipole, other: Flector) -> MultiVector {
    return roundPoint_wedge_multiVector(dipole_antiWedge_flector(self_, other), flector_dual(other));
}

fn dipole_rejectViaOriginFrom_line(self_: Dipole, other: Line) -> Dipole {
    return scalar_wedge_dipole(dipole_antiWedge_line(self_, other), line_dual(other));
}

fn dipole_rejectViaOriginFrom_motor(self_: Dipole, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(dipole_antiWedge_motor(self_, other), motor_dual(other));
}

fn dipole_rejectViaOriginFrom_multiVector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(dipole_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn dipole_rejectViaOriginFrom_plane(self_: Dipole, other: Plane) -> Dipole {
    return roundPoint_wedge_roundPoint(dipole_antiWedge_plane(self_, other), plane_dual(other));
}

fn dipole_rejectViaOriginFrom_sphere(self_: Dipole, other: Sphere) -> Dipole {
    return roundPoint_wedge_roundPoint(dipole_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn flatPoint_rejectViaOriginFrom_circle(self_: FlatPoint, other: Circle) -> Dipole {
    return scalar_wedge_dipole(flatPoint_antiWedge_circle(self_, other), circle_dual(other));
}

fn flatPoint_rejectViaOriginFrom_flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return roundPoint_wedge_multiVector(flatPoint_antiWedge_flector(self_, other), flector_dual(other));
}

fn flatPoint_rejectViaOriginFrom_motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flatPoint_wedge_multiVector(flatPoint_antiWedge_motor(self_, other), motor_dual(other));
}

fn flatPoint_rejectViaOriginFrom_multiVector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(flatPoint_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn flatPoint_rejectViaOriginFrom_plane(self_: FlatPoint, other: Plane) -> Dipole {
    return roundPoint_wedge_roundPoint(flatPoint_antiWedge_plane(self_, other), plane_dual(other));
}

fn flatPoint_rejectViaOriginFrom_sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return roundPoint_wedge_roundPoint(flatPoint_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn flector_rejectViaOriginFrom_circle(self_: Flector, other: Circle) -> MultiVector {
    return multiVector_wedge_dipole(flector_antiWedge_circle(self_, other), circle_dual(other));
}

fn flector_rejectViaOriginFrom_dipole(self_: Flector, other: Dipole) -> Sphere {
    return roundPoint_wedge_circle(flector_antiWedge_dipole(self_, other), dipole_dual(other));
}

fn flector_rejectViaOriginFrom_flatPoint(self_: Flector, other: FlatPoint) -> Sphere {
    return roundPoint_wedge_circle(flector_antiWedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn flector_rejectViaOriginFrom_flector(self_: Flector, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(flector_antiWedge_flector(self_, other), flector_dual(other));
}

fn flector_rejectViaOriginFrom_line(self_: Flector, other: Line) -> Plane {
    return flatPoint_wedge_dipole(flector_antiWedge_line(self_, other), line_dual(other));
}

fn flector_rejectViaOriginFrom_motor(self_: Flector, other: Motor) -> MultiVector {
    return flector_wedge_multiVector(flector_antiWedge_motor(self_, other), motor_dual(other));
}

fn flector_rejectViaOriginFrom_multiVector(self_: Flector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(flector_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn flector_rejectViaOriginFrom_plane(self_: Flector, other: Plane) -> MultiVector {
    return multiVector_wedge_roundPoint(flector_antiWedge_plane(self_, other), plane_dual(other));
}

fn flector_rejectViaOriginFrom_roundPoint(self_: Flector, other: RoundPoint) -> Sphere {
    return scalar_wedge_sphere(flector_antiWedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn flector_rejectViaOriginFrom_sphere(self_: Flector, other: Sphere) -> MultiVector {
    return multiVector_wedge_roundPoint(flector_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn line_rejectViaOriginFrom_circle(self_: Line, other: Circle) -> Circle {
    return roundPoint_wedge_dipole(line_antiWedge_circle(self_, other), circle_dual(other));
}

fn line_rejectViaOriginFrom_dipole(self_: Line, other: Dipole) -> Circle {
    return scalar_wedge_circle(line_antiWedge_dipole(self_, other), dipole_dual(other));
}

fn line_rejectViaOriginFrom_flector(self_: Line, other: Flector) -> MultiVector {
    return flatPoint_wedge_multiVector(line_antiWedge_flector(self_, other), flector_dual(other));
}

fn line_rejectViaOriginFrom_line(self_: Line, other: Line) -> Circle {
    return roundPoint_wedge_dipole(line_antiWedge_line(self_, other), line_dual(other));
}

fn line_rejectViaOriginFrom_motor(self_: Line, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(line_antiWedge_motor(self_, other), motor_dual(other));
}

fn line_rejectViaOriginFrom_multiVector(self_: Line, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(line_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn line_rejectViaOriginFrom_plane(self_: Line, other: Plane) -> Line {
    return flatPoint_wedge_roundPoint(line_antiWedge_plane(self_, other), plane_dual(other));
}

fn line_rejectViaOriginFrom_sphere(self_: Line, other: Sphere) -> Circle {
    return dipole_wedge_roundPoint(line_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn motor_rejectViaOriginFrom_circle(self_: Motor, other: Circle) -> MultiVector {
    return multiVector_wedge_dipole(motor_antiWedge_circle(self_, other), circle_dual(other));
}

fn motor_rejectViaOriginFrom_dipole(self_: Motor, other: Dipole) -> MultiVector {
    return multiVector_wedge_circle(motor_antiWedge_dipole(self_, other), dipole_dual(other));
}

fn motor_rejectViaOriginFrom_flatPoint(self_: Motor, other: FlatPoint) -> AntiScalar {
    return flatPoint_wedge_circle(motor_antiWedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn motor_rejectViaOriginFrom_flector(self_: Motor, other: Flector) -> MultiVector {
    return flector_wedge_multiVector(motor_antiWedge_flector(self_, other), flector_dual(other));
}

fn motor_rejectViaOriginFrom_line(self_: Motor, other: Line) -> MultiVector {
    return multiVector_wedge_dipole(motor_antiWedge_line(self_, other), line_dual(other));
}

fn motor_rejectViaOriginFrom_motor(self_: Motor, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(motor_antiWedge_motor(self_, other), motor_dual(other));
}

fn motor_rejectViaOriginFrom_multiVector(self_: Motor, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(motor_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn motor_rejectViaOriginFrom_plane(self_: Motor, other: Plane) -> Motor {
    return flector_wedge_roundPoint(motor_antiWedge_plane(self_, other), plane_dual(other));
}

fn motor_rejectViaOriginFrom_roundPoint(self_: Motor, other: RoundPoint) -> AntiScalar {
    return roundPoint_wedge_sphere(motor_antiWedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn motor_rejectViaOriginFrom_sphere(self_: Motor, other: Sphere) -> MultiVector {
    return multiVector_wedge_roundPoint(motor_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn multiVector_rejectViaOriginFrom_circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multiVector_wedge_dipole(multiVector_antiWedge_circle(self_, other), circle_dual(other));
}

fn multiVector_rejectViaOriginFrom_dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multiVector_wedge_circle(multiVector_antiWedge_dipole(self_, other), dipole_dual(other));
}

fn multiVector_rejectViaOriginFrom_flatPoint(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multiVector_wedge_circle(multiVector_antiWedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn multiVector_rejectViaOriginFrom_flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(multiVector_antiWedge_flector(self_, other), flector_dual(other));
}

fn multiVector_rejectViaOriginFrom_line(self_: MultiVector, other: Line) -> MultiVector {
    return multiVector_wedge_dipole(multiVector_antiWedge_line(self_, other), line_dual(other));
}

fn multiVector_rejectViaOriginFrom_motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(multiVector_antiWedge_motor(self_, other), motor_dual(other));
}

fn multiVector_rejectViaOriginFrom_multiVector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(multiVector_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn multiVector_rejectViaOriginFrom_plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multiVector_wedge_roundPoint(multiVector_antiWedge_plane(self_, other), plane_dual(other));
}

fn multiVector_rejectViaOriginFrom_roundPoint(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multiVector_wedge_sphere(multiVector_antiWedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn multiVector_rejectViaOriginFrom_sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multiVector_wedge_roundPoint(multiVector_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn plane_rejectViaOriginFrom_circle(self_: Plane, other: Circle) -> Sphere {
    return dipole_wedge_dipole(plane_antiWedge_circle(self_, other), circle_dual(other));
}

fn plane_rejectViaOriginFrom_dipole(self_: Plane, other: Dipole) -> Sphere {
    return roundPoint_wedge_circle(plane_antiWedge_dipole(self_, other), dipole_dual(other));
}

fn plane_rejectViaOriginFrom_flatPoint(self_: Plane, other: FlatPoint) -> Sphere {
    return roundPoint_wedge_circle(plane_antiWedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn plane_rejectViaOriginFrom_flector(self_: Plane, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(plane_antiWedge_flector(self_, other), flector_dual(other));
}

fn plane_rejectViaOriginFrom_line(self_: Plane, other: Line) -> Plane {
    return flatPoint_wedge_dipole(plane_antiWedge_line(self_, other), line_dual(other));
}

fn plane_rejectViaOriginFrom_motor(self_: Plane, other: Motor) -> MultiVector {
    return flector_wedge_multiVector(plane_antiWedge_motor(self_, other), motor_dual(other));
}

fn plane_rejectViaOriginFrom_multiVector(self_: Plane, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(plane_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn plane_rejectViaOriginFrom_plane(self_: Plane, other: Plane) -> Plane {
    return line_wedge_roundPoint(plane_antiWedge_plane(self_, other), plane_dual(other));
}

fn plane_rejectViaOriginFrom_roundPoint(self_: Plane, other: RoundPoint) -> Sphere {
    return scalar_wedge_sphere(plane_antiWedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn plane_rejectViaOriginFrom_sphere(self_: Plane, other: Sphere) -> Sphere {
    return circle_wedge_roundPoint(plane_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn roundPoint_rejectViaOriginFrom_flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return scalar_wedge_multiVector(roundPoint_antiWedge_flector(self_, other), flector_dual(other));
}

fn roundPoint_rejectViaOriginFrom_motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return roundPoint_wedge_multiVector(roundPoint_antiWedge_motor(self_, other), motor_dual(other));
}

fn roundPoint_rejectViaOriginFrom_multiVector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(roundPoint_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn roundPoint_rejectViaOriginFrom_plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return scalar_wedge_roundPoint(roundPoint_antiWedge_plane(self_, other), plane_dual(other));
}

fn roundPoint_rejectViaOriginFrom_sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return scalar_wedge_roundPoint(roundPoint_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn sphere_rejectViaOriginFrom_circle(self_: Sphere, other: Circle) -> Sphere {
    return dipole_wedge_dipole(sphere_antiWedge_circle(self_, other), circle_dual(other));
}

fn sphere_rejectViaOriginFrom_dipole(self_: Sphere, other: Dipole) -> Sphere {
    return roundPoint_wedge_circle(sphere_antiWedge_dipole(self_, other), dipole_dual(other));
}

fn sphere_rejectViaOriginFrom_flatPoint(self_: Sphere, other: FlatPoint) -> Sphere {
    return roundPoint_wedge_circle(sphere_antiWedge_flatPoint(self_, other), flatPoint_dual(other));
}

fn sphere_rejectViaOriginFrom_flector(self_: Sphere, other: Flector) -> MultiVector {
    return multiVector_wedge_multiVector(sphere_antiWedge_flector(self_, other), flector_dual(other));
}

fn sphere_rejectViaOriginFrom_line(self_: Sphere, other: Line) -> Sphere {
    return dipole_wedge_dipole(sphere_antiWedge_line(self_, other), line_dual(other));
}

fn sphere_rejectViaOriginFrom_motor(self_: Sphere, other: Motor) -> MultiVector {
    return multiVector_wedge_multiVector(sphere_antiWedge_motor(self_, other), motor_dual(other));
}

fn sphere_rejectViaOriginFrom_multiVector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(sphere_antiWedge_multiVector(self_, other), multiVector_dual(other));
}

fn sphere_rejectViaOriginFrom_plane(self_: Sphere, other: Plane) -> Sphere {
    return circle_wedge_roundPoint(sphere_antiWedge_plane(self_, other), plane_dual(other));
}

fn sphere_rejectViaOriginFrom_roundPoint(self_: Sphere, other: RoundPoint) -> Sphere {
    return scalar_wedge_sphere(sphere_antiWedge_roundPoint(self_, other), roundPoint_dual(other));
}

fn sphere_rejectViaOriginFrom_sphere(self_: Sphere, other: Sphere) -> Sphere {
    return circle_wedge_roundPoint(sphere_antiWedge_sphere(self_, other), sphere_dual(other));
}

fn circle_antiSupport(self_: Circle) -> Sphere {
    return circle_wedge_roundPoint(self_, sphere_antiWedge_dipole(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), circle_dual(self_)));
}

fn dipole_antiSupport(self_: Dipole) -> Sphere {
    return dipole_wedge_dipole(self_, sphere_antiWedge_circle(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), dipole_dual(self_)));
}

fn dualNum_antiSupport(self_: DualNum) -> Sphere {
    return dualNum_wedge_sphere(self_, sphere_antiWedge_dualNum(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), dualNum_dual(self_)));
}

fn flatPoint_antiSupport(self_: FlatPoint) -> Plane {
    return flatPoint_wedge_dipole(self_, sphere_antiWedge_circle(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), flatPoint_dual(self_)));
}

fn flector_antiSupport(self_: Flector) -> MultiVector {
    return flector_wedge_multiVector(self_, sphere_antiWedge_multiVector(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), flector_dual(self_)));
}

fn line_antiSupport(self_: Line) -> Plane {
    return line_wedge_roundPoint(self_, sphere_antiWedge_dipole(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), line_dual(self_)));
}

fn motor_antiSupport(self_: Motor) -> MultiVector {
    return motor_wedge_multiVector(self_, sphere_antiWedge_multiVector(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), motor_dual(self_)));
}

fn multiVector_antiSupport(self_: MultiVector) -> MultiVector {
    return multiVector_wedge_multiVector(self_, sphere_antiWedge_multiVector(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), multiVector_dual(self_)));
}

fn plane_antiSupport(self_: Plane) -> Plane {
    return plane_wedge_scalar(self_, sphere_antiWedge_roundPoint(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), plane_dual(self_)));
}

fn roundPoint_antiSupport(self_: RoundPoint) -> Sphere {
    return roundPoint_wedge_circle(self_, sphere_antiWedge_sphere(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), roundPoint_dual(self_)));
}

fn scalar_antiSupport(self_: Scalar) -> Sphere {
    return scalar_wedge_sphere(self_, sphere_antiWedge_antiScalar(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), scalar_dual(self_)));
}

fn sphere_antiSupport(self_: Sphere) -> Sphere {
    return sphere_wedge_scalar(self_, sphere_antiWedge_roundPoint(roundPoint_complement(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0))), sphere_dual(self_)));
}

fn antiScalar_support(self_: AntiScalar) -> RoundPoint {
    return antiScalar_antiWedge_roundPoint(self_, roundPoint_wedge_scalar(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), antiScalar_antiDual(self_)));
}

fn circle_support(self_: Circle) -> RoundPoint {
    return circle_antiWedge_circle(self_, roundPoint_wedge_dipole(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), circle_antiDual(self_)));
}

fn dipole_support(self_: Dipole) -> RoundPoint {
    return dipole_antiWedge_sphere(self_, roundPoint_wedge_circle(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), dipole_antiDual(self_)));
}

fn dualNum_support(self_: DualNum) -> RoundPoint {
    return dualNum_antiWedge_roundPoint(self_, roundPoint_wedge_dualNum(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), dualNum_antiDual(self_)));
}

fn flatPoint_support(self_: FlatPoint) -> RoundPoint {
    return flatPoint_antiWedge_sphere(self_, roundPoint_wedge_circle(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), flatPoint_antiDual(self_)));
}

fn flector_support(self_: Flector) -> MultiVector {
    return flector_antiWedge_multiVector(self_, roundPoint_wedge_multiVector(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), flector_antiDual(self_)));
}

fn line_support(self_: Line) -> RoundPoint {
    return line_antiWedge_circle(self_, roundPoint_wedge_dipole(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), line_antiDual(self_)));
}

fn motor_support(self_: Motor) -> MultiVector {
    return motor_antiWedge_multiVector(self_, roundPoint_wedge_multiVector(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), motor_antiDual(self_)));
}

fn multiVector_support(self_: MultiVector) -> MultiVector {
    return multiVector_antiWedge_multiVector(self_, roundPoint_wedge_multiVector(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), multiVector_antiDual(self_)));
}

fn plane_support(self_: Plane) -> RoundPoint {
    return plane_antiWedge_dipole(self_, roundPoint_wedge_roundPoint(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), plane_antiDual(self_)));
}

fn roundPoint_support(self_: RoundPoint) -> RoundPoint {
    return roundPoint_antiWedge_antiScalar(self_, roundPoint_wedge_sphere(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), roundPoint_antiDual(self_)));
}

fn sphere_support(self_: Sphere) -> RoundPoint {
    return sphere_antiWedge_dipole(self_, roundPoint_wedge_roundPoint(RoundPoint(vec3<f32>(0.0), vec2<f32>(1.0, 0.0)), sphere_antiDual(self_)));
}

