#define_import_path cga3d_min

//
// AUTO-GENERATED - DO NOT MODIFY
//
// To contribute to this file, see the adjacent codegen package.
// https://github.com/AndrewBrownK/projective_ga/
//

struct Scalar {
    // 1
     g0: f32,
}

struct AntiScalar {
    // e12345
     g0: f32,
}

struct DualNum {
    // 1, e12345
     g0: vec2<f32>,
}

struct FlatPoint {
    // e15, e25, e35, e45
     g0: vec4<f32>,
}

struct Line {
    // -e145, -e245, -e345
     g0: vec3<f32>,
    // e235, -e135, e125
     g1: vec3<f32>,
}

struct Plane {
    // e2345, -e1345, e1245, -e1235
     g0: vec4<f32>,
}

struct RoundPoint {
    // e1, e2, e3
     g0: vec3<f32>,
    // e4, e5
     g1: vec2<f32>,
}

struct Dipole {
    // -e14, -e24, -e34
     g0: vec3<f32>,
    // e23, -e13, e12
     g1: vec3<f32>,
    // e15, e25, e35, e45
     g2: vec4<f32>,
}

struct Circle {
    // e234, -e134, e124, -e123
     g0: vec4<f32>,
    // -e145, -e245, -e345
     g1: vec3<f32>,
    // e235, -e135, e125
     g2: vec3<f32>,
}

struct Sphere {
    // e2345, -e1345, e1245
     g0: vec3<f32>,
    // e1234, -e1235
     g1: vec2<f32>,
}

struct Motor {
    // -e145, -e245, -e345, e12345
     g0: vec4<f32>,
    // e235, -e135, e125
     g1: vec3<f32>,
}

struct Rotor {
    // -e145, -e245, -e345, e12345
     g0: vec4<f32>,
}

struct Translator {
    // e235, -e135, e125, e12345
     g0: vec4<f32>,
}

struct Flector {
    // e15, e25, e35, e45
     g0: vec4<f32>,
    // e2345, -e1345, e1245, -e1235
     g1: vec4<f32>,
}

struct Transflector {
    // e15, e25, e35
     g0: vec3<f32>,
    // e2345, -e1345, e1245, -e1235
     g1: vec4<f32>,
}

struct MultiVector {
    // 1, e12345
     g0: vec2<f32>,
    // e1, e2, e3
     g1: vec3<f32>,
    // e4, e5
     g2: vec2<f32>,
    // -e14, -e24, -e34
     g3: vec3<f32>,
    // e23, -e13, e12
     g4: vec3<f32>,
    // e15, e25, e35, e45
     g5: vec4<f32>,
    // e234, -e134, e124, -e123
     g6: vec4<f32>,
    // -e145, -e245, -e345
     g7: vec3<f32>,
    // e235, -e135, e125
     g8: vec3<f32>,
    // e2345, -e1345, e1245
     g9: vec3<f32>,
    // e1234, -e1235
     g10: vec2<f32>,
}

fn anti_scalar__one() -> AntiScalar {
    return AntiScalar(0.0);
}

fn circle__one() -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole__one() -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn dual_num__one() -> DualNum {
    return DualNum(vec2<f32>(1.0, 0.0));
}

fn flat_point__one() -> FlatPoint {
    return FlatPoint(vec4<f32>(0.0));
}

fn flector__one() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn line__one() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn motor__one() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn multi_vector__one() -> MultiVector {
    return MultiVector(vec2<f32>(1.0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__one() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn rotor__one() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn round_point__one() -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__one() -> Scalar {
    return Scalar(1.0);
}

fn sphere__one() -> Sphere {
    return Sphere(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__one() -> Transflector {
    return Transflector(vec3<f32>(0.0), vec4<f32>(0.0));
}

fn translator__one() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn anti_scalar__unit() -> AntiScalar {
    return AntiScalar(1.0);
}

fn circle__unit() -> Circle {
    return Circle(vec4<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0));
}

fn dipole__unit() -> Dipole {
    return Dipole(vec3<f32>(1.0), vec3<f32>(1.0), vec4<f32>(1.0));
}

fn dual_num__unit() -> DualNum {
    return DualNum(vec2<f32>(1.0));
}

fn flat_point__unit() -> FlatPoint {
    return FlatPoint(vec4<f32>(1.0));
}

fn flector__unit() -> Flector {
    return Flector(vec4<f32>(1.0), vec4<f32>(1.0));
}

fn line__unit() -> Line {
    return Line(vec3<f32>(1.0), vec3<f32>(1.0));
}

fn motor__unit() -> Motor {
    return Motor(vec4<f32>(1.0), vec3<f32>(1.0));
}

fn multi_vector__unit() -> MultiVector {
    return MultiVector(vec2<f32>(1.0), vec3<f32>(1.0), vec2<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0), vec4<f32>(1.0), vec4<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0), vec3<f32>(1.0), vec2<f32>(1.0));
}

fn plane__unit() -> Plane {
    return Plane(vec4<f32>(1.0));
}

fn rotor__unit() -> Rotor {
    return Rotor(vec4<f32>(1.0));
}

fn round_point__unit() -> RoundPoint {
    return RoundPoint(vec3<f32>(1.0), vec2<f32>(1.0));
}

fn scalar__unit() -> Scalar {
    return Scalar(1.0);
}

fn sphere__unit() -> Sphere {
    return Sphere(vec3<f32>(1.0), vec2<f32>(1.0));
}

fn transflector__unit() -> Transflector {
    return Transflector(vec3<f32>(1.0), vec4<f32>(1.0));
}

fn translator__unit() -> Translator {
    return Translator(vec4<f32>(1.0));
}

fn anti_scalar__zero() -> AntiScalar {
    return AntiScalar(0.0);
}

fn circle__zero() -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole__zero() -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn dual_num__zero() -> DualNum {
    return DualNum(vec2<f32>(0.0));
}

fn flat_point__zero() -> FlatPoint {
    return FlatPoint(vec4<f32>(0.0));
}

fn flector__zero() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn line__zero() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn motor__zero() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn multi_vector__zero() -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__zero() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn rotor__zero() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn round_point__zero() -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__zero() -> Scalar {
    return Scalar(0.0);
}

fn sphere__zero() -> Sphere {
    return Sphere(vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__zero() -> Transflector {
    return Transflector(vec3<f32>(0.0), vec4<f32>(0.0));
}

fn translator__zero() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn anti_scalar__neg(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0);
}

fn circle__neg(self_: Circle) -> Circle {
    return Circle(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn dipole__neg(self_: Dipole) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec4<f32>(-1.0));
}

fn dual_num__neg(self_: DualNum) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(-1.0));
}

fn flat_point__neg(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(-1.0));
}

fn flector__neg(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec4<f32>(-1.0));
}

fn line__neg(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn motor__neg(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__neg(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec2<f32>(-1.0), self_.g3 * vec3<f32>(-1.0), self_.g4 * vec3<f32>(-1.0), self_.g5 * vec4<f32>(-1.0), self_.g6 * vec4<f32>(-1.0), self_.g7 * vec3<f32>(-1.0), self_.g8 * vec3<f32>(-1.0), self_.g9 * vec3<f32>(-1.0), self_.g10 * vec2<f32>(-1.0));
}

fn plane__neg(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(-1.0));
}

fn rotor__neg(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0));
}

fn round_point__neg(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec2<f32>(-1.0));
}

fn scalar__neg(self_: Scalar) -> Scalar {
    return Scalar(-self_.g0);
}

fn sphere__neg(self_: Sphere) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec2<f32>(-1.0));
}

fn transflector__neg(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec4<f32>(-1.0));
}

fn translator__neg(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0));
}

fn anti_scalar__add__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 + other.g0);
}

fn anti_scalar__add__circle(self_: AntiScalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__add__dipole(self_: AntiScalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__add__dual_num(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0) + other.g0);
}

fn anti_scalar__add__flat_point(self_: AntiScalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__add__flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn anti_scalar__add__line(self_: AntiScalar, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), other.g1);
}

fn anti_scalar__add__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0, other.g1);
}

fn anti_scalar__add__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0) + other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, other.g7, other.g8, other.g9, other.g10);
}

fn anti_scalar__add__plane(self_: AntiScalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn anti_scalar__add__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0);
}

fn anti_scalar__add__round_point(self_: AntiScalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__add__scalar(self_: AntiScalar, other: Scalar) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0) + vec2<f32>(other.g0, 0.0));
}

fn anti_scalar__add__sphere(self_: AntiScalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, other.g1);
}

fn anti_scalar__add__transflector(self_: AntiScalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn anti_scalar__add__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0);
}

fn circle__add__anti_scalar(self_: Circle, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0 + other.g0, self_.g1 + other.g1, self_.g2 + other.g2);
}

fn circle__add__dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__dual_num(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__flat_point(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, self_.g0, self_.g1, self_.g2, vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn circle__add__line(self_: Circle, other: Line) -> Circle {
    return Circle(self_.g0, self_.g1 + other.g0, self_.g2 + other.g1);
}

fn circle__add__motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2 + other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, self_.g0 + other.g6, self_.g1 + other.g7, self_.g2 + other.g8, other.g9, other.g10);
}

fn circle__add__plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn circle__add__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__round_point(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__scalar(self_: Circle, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__add__sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, other.g0, other.g1);
}

fn circle__add__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn circle__add__translator(self_: Circle, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__anti_scalar(self_: Dipole, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, other.g0, other.g1, other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0 + other.g0, self_.g1 + other.g1, self_.g2 + other.g2);
}

fn dipole__add__dual_num(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__flat_point(self_: Dipole, other: FlatPoint) -> Dipole {
    return Dipole(self_.g0, self_.g1, self_.g2 + other.g0);
}

fn dipole__add__flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2 + other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn dipole__add__line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, self_.g0 + other.g3, self_.g1 + other.g4, self_.g2 + other.g5, other.g6, other.g7, other.g8, other.g9, other.g10);
}

fn dipole__add__plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn dipole__add__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__round_point(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__scalar(self_: Dipole, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__add__sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, other.g1);
}

fn dipole__add__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn dipole__add__translator(self_: Dipole, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__anti_scalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0 + vec2<f32>(0.0, other.g0));
}

fn dual_num__add__circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0 + other.g0);
}

fn dual_num__add__flat_point(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn dual_num__add__line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 + other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, other.g7, other.g8, other.g9, other.g10);
}

fn dual_num__add__plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn dual_num__add__rotor(self_: DualNum, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__round_point(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0, other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__add__scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0 + vec2<f32>(other.g0, 0.0));
}

fn dual_num__add__sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, other.g1);
}

fn dual_num__add__transflector(self_: DualNum, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn dual_num__add__translator(self_: DualNum, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__anti_scalar(self_: FlatPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, other.g0, other.g1, other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return Dipole(other.g0, other.g1, self_.g0 + other.g2);
}

fn flat_point__add__dual_num(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 + other.g0);
}

fn flat_point__add__flector(self_: FlatPoint, other: Flector) -> Flector {
    return Flector(self_.g0 + other.g0, other.g1);
}

fn flat_point__add__line(self_: FlatPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, other.g4, self_.g0 + other.g5, other.g6, other.g7, other.g8, other.g9, other.g10);
}

fn flat_point__add__plane(self_: FlatPoint, other: Plane) -> Flector {
    return Flector(self_.g0, other.g0);
}

fn flat_point__add__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__round_point(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__scalar(self_: FlatPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__add__sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, other.g1);
}

fn flat_point__add__transflector(self_: FlatPoint, other: Transflector) -> Flector {
    return Flector(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), other.g1);
}

fn flat_point__add__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__add__anti_scalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, other.g0, other.g1, other.g2, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, self_.g0 + other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__dual_num(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__flat_point(self_: Flector, other: FlatPoint) -> Flector {
    return Flector(self_.g0 + other.g0, self_.g1);
}

fn flector__add__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn flector__add__line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, other.g4, self_.g0 + other.g5, other.g6, other.g7, other.g8, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) + other.g9, vec2<f32>(0.0, self_.g1.w) + other.g10);
}

fn flector__add__plane(self_: Flector, other: Plane) -> Flector {
    return Flector(self_.g0, self_.g1 + other.g0);
}

fn flector__add__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__add__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) + other.g0, vec2<f32>(0.0, self_.g1.w) + other.g1);
}

fn flector__add__transflector(self_: Flector, other: Transflector) -> Flector {
    return Flector(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 + other.g1);
}

fn flector__add__translator(self_: Flector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn line__add__anti_scalar(self_: Line, other: AntiScalar) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn line__add__circle(self_: Line, other: Circle) -> Circle {
    return Circle(other.g0, self_.g0 + other.g1, self_.g1 + other.g2);
}

fn line__add__dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__add__dual_num(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__add__flat_point(self_: Line, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__add__flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn line__add__line(self_: Line, other: Line) -> Line {
    return Line(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn line__add__motor(self_: Line, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1 + other.g1);
}

fn line__add__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, self_.g0 + other.g7, self_.g1 + other.g8, other.g9, other.g10);
}

fn line__add__plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn line__add__rotor(self_: Line, other: Rotor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1);
}

fn line__add__round_point(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__add__scalar(self_: Line, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__add__sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, other.g0, other.g1);
}

fn line__add__transflector(self_: Line, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn line__add__translator(self_: Line, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn motor__add__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn motor__add__circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1, self_.g1 + other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__add__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__add__dual_num(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__add__flat_point(self_: Motor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__add__flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn motor__add__line(self_: Motor, other: Line) -> Motor {
    return Motor(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 + other.g1);
}

fn motor__add__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn motor__add__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g7, self_.g1 + other.g8, other.g9, other.g10);
}

fn motor__add__plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn motor__add__rotor(self_: Motor, other: Rotor) -> Motor {
    return Motor(self_.g0 + other.g0, self_.g1);
}

fn motor__add__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__add__scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__add__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, other.g0, other.g1);
}

fn motor__add__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn motor__add__translator(self_: Motor, other: Translator) -> Motor {
    return Motor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector__add__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__add__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6 + other.g0, self_.g7 + other.g1, self_.g8 + other.g2, self_.g9, self_.g10);
}

fn multi_vector__add__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3 + other.g0, self_.g4 + other.g1, self_.g5 + other.g2, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__add__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(self_.g0 + other.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__add__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5 + other.g0, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__add__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5 + other.g0, self_.g6, self_.g7, self_.g8, self_.g9 + vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g10 + vec2<f32>(0.0, other.g1.w));
}

fn multi_vector__add__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7 + other.g0, self_.g8 + other.g1, self_.g9, self_.g10);
}

fn multi_vector__add__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g8 + other.g1, self_.g9, self_.g10);
}

fn multi_vector__add__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 + other.g0, self_.g1 + other.g1, self_.g2 + other.g2, self_.g3 + other.g3, self_.g4 + other.g4, self_.g5 + other.g5, self_.g6 + other.g6, self_.g7 + other.g7, self_.g8 + other.g8, self_.g9 + other.g9, self_.g10 + other.g10);
}

fn multi_vector__add__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g10 + vec2<f32>(0.0, other.g0.w));
}

fn multi_vector__add__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g8, self_.g9, self_.g10);
}

fn multi_vector__add__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 + other.g0, self_.g2 + other.g1, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__add__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(other.g0, 0.0), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__add__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9 + other.g0, self_.g10 + other.g1);
}

fn multi_vector__add__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g6, self_.g7, self_.g8, self_.g9 + vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g10 + vec2<f32>(0.0, other.g1.w));
}

fn multi_vector__add__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g9, self_.g10);
}

fn plane__add__anti_scalar(self_: Plane, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, other.g2, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__dual_num(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__flat_point(self_: Plane, other: FlatPoint) -> Flector {
    return Flector(other.g0, self_.g0);
}

fn plane__add__flector(self_: Plane, other: Flector) -> Flector {
    return Flector(other.g0, self_.g0 + other.g1);
}

fn plane__add__line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, other.g7, other.g8, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g9, vec2<f32>(0.0, self_.g0.w) + other.g10);
}

fn plane__add__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0 + other.g0);
}

fn plane__add__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__round_point(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__scalar(self_: Plane, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__add__sphere(self_: Plane, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g0, vec2<f32>(0.0, self_.g0.w) + other.g1);
}

fn plane__add__transflector(self_: Plane, other: Transflector) -> Transflector {
    return Transflector(other.g0, self_.g0 + other.g1);
}

fn plane__add__translator(self_: Plane, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn rotor__add__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn rotor__add__circle(self_: Rotor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1, other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__add__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__add__dual_num(self_: Rotor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__add__flat_point(self_: Rotor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__add__flector(self_: Rotor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn rotor__add__line(self_: Rotor, other: Line) -> Motor {
    return Motor(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), other.g1);
}

fn rotor__add__motor(self_: Rotor, other: Motor) -> Motor {
    return Motor(self_.g0 + other.g0, other.g1);
}

fn rotor__add__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g7, other.g8, other.g9, other.g10);
}

fn rotor__add__plane(self_: Rotor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn rotor__add__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0 + other.g0);
}

fn rotor__add__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__add__scalar(self_: Rotor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__add__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), other.g0, other.g1);
}

fn rotor__add__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn rotor__add__translator(self_: Rotor, other: Translator) -> Motor {
    return Motor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn round_point__add__anti_scalar(self_: RoundPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__dual_num(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__flat_point(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn round_point__add__line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, self_.g0 + other.g1, self_.g1 + other.g2, other.g3, other.g4, other.g5, other.g6, other.g7, other.g8, other.g9, other.g10);
}

fn round_point__add__plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn round_point__add__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn round_point__add__scalar(self_: RoundPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__add__sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, other.g1);
}

fn round_point__add__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn round_point__add__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__anti_scalar(self_: Scalar, other: AntiScalar) -> DualNum {
    return DualNum(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0));
}

fn scalar__add__circle(self_: Scalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__dipole(self_: Scalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__dual_num(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0, 0.0) + other.g0);
}

fn scalar__add__flat_point(self_: Scalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn scalar__add__line(self_: Scalar, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, other.g7, other.g8, other.g9, other.g10);
}

fn scalar__add__plane(self_: Scalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn scalar__add__rotor(self_: Scalar, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__round_point(self_: Scalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__add__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 + other.g0);
}

fn scalar__add__sphere(self_: Scalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, other.g1);
}

fn scalar__add__transflector(self_: Scalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn scalar__add__translator(self_: Scalar, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__add__anti_scalar(self_: Sphere, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__add__circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, other.g2, self_.g0, self_.g1);
}

fn sphere__add__dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__add__dual_num(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__add__flat_point(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__add__flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 + vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g1 + vec2<f32>(0.0, other.g1.w));
}

fn sphere__add__line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, self_.g0, self_.g1);
}

fn sphere__add__motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, self_.g0, self_.g1);
}

fn sphere__add__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, other.g7, other.g8, self_.g0 + other.g9, self_.g1 + other.g10);
}

fn sphere__add__plane(self_: Sphere, other: Plane) -> Sphere {
    return Sphere(self_.g0 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 + vec2<f32>(0.0, other.g0.w));
}

fn sphere__add__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__add__round_point(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__add__scalar(self_: Sphere, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__add__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn sphere__add__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 + vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g1 + vec2<f32>(0.0, other.g1.w));
}

fn sphere__add__translator(self_: Sphere, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0, self_.g1);
}

fn transflector__add__anti_scalar(self_: Transflector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__circle(self_: Transflector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), other.g0, other.g1, other.g2, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__dual_num(self_: Transflector, other: DualNum) -> MultiVector {
    return MultiVector(other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__flat_point(self_: Transflector, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1);
}

fn transflector__add__flector(self_: Transflector, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1 + other.g1);
}

fn transflector__add__line(self_: Transflector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__motor(self_: Transflector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, other.g4, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g5, other.g6, other.g7, other.g8, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) + other.g9, vec2<f32>(0.0, self_.g1.w) + other.g10);
}

fn transflector__add__plane(self_: Transflector, other: Plane) -> Transflector {
    return Transflector(self_.g0, self_.g1 + other.g0);
}

fn transflector__add__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__scalar(self_: Transflector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__add__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) + other.g0, vec2<f32>(0.0, self_.g1.w) + other.g1);
}

fn transflector__add__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn transflector__add__translator(self_: Transflector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn translator__add__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn translator__add__circle(self_: Translator, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__add__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), other.g0, other.g1, other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__add__dual_num(self_: Translator, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__add__flat_point(self_: Translator, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__add__flector(self_: Translator, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn translator__add__line(self_: Translator, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1);
}

fn translator__add__motor(self_: Translator, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1);
}

fn translator__add__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, other.g1, other.g2, other.g3, other.g4, other.g5, other.g6, other.g7, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g8, other.g9, other.g10);
}

fn translator__add__plane(self_: Translator, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0, other.g0.w));
}

fn translator__add__rotor(self_: Translator, other: Rotor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn translator__add__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__add__scalar(self_: Translator, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__add__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), other.g0, other.g1);
}

fn translator__add__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0, other.g1.w));
}

fn translator__add__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0 + other.g0);
}

fn anti_scalar__div__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 / other.g0);
}

fn circle__div__circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0 / other.g0, self_.g1 / other.g1, self_.g2 / other.g2);
}

fn dipole__div__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0 / other.g0, self_.g1 / other.g1, self_.g2 / other.g2);
}

fn dual_num__div__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0 / other.g0);
}

fn flat_point__div__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 / other.g0);
}

fn flector__div__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0 / other.g0, self_.g1 / other.g1);
}

fn line__div__line(self_: Line, other: Line) -> Line {
    return Line(self_.g0 / other.g0, self_.g1 / other.g1);
}

fn motor__div__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0 / other.g0, self_.g1 / other.g1);
}

fn multi_vector__div__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 / other.g0, self_.g1 / other.g1, self_.g2 / other.g2, self_.g3 / other.g3, self_.g4 / other.g4, self_.g5 / other.g5, self_.g6 / other.g6, self_.g7 / other.g7, self_.g8 / other.g8, self_.g9 / other.g9, self_.g10 / other.g10);
}

fn plane__div__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0 / other.g0);
}

fn rotor__div__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0 / other.g0);
}

fn round_point__div__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0 / other.g0, self_.g1 / other.g1);
}

fn scalar__div__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 / other.g0);
}

fn sphere__div__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0 / other.g0, self_.g1 / other.g1);
}

fn transflector__div__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(self_.g0 / other.g0, self_.g1 / other.g1);
}

fn translator__div__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0 / other.g0);
}

fn circle__into__line(self_: Circle) -> Line {
    return Line(self_.g1, self_.g2);
}

fn dipole__into__flat_point(self_: Dipole) -> FlatPoint {
    return FlatPoint(self_.g2);
}

fn dual_num__into__anti_scalar(self_: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0.y);
}

fn dual_num__into__scalar(self_: DualNum) -> Scalar {
    return Scalar(self_.g0.x);
}

fn flector__into__flat_point(self_: Flector) -> FlatPoint {
    return FlatPoint(self_.g0);
}

fn flector__into__plane(self_: Flector) -> Plane {
    return Plane(self_.g1);
}

fn flector__into__transflector(self_: Flector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1);
}

fn motor__into__anti_scalar(self_: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.w);
}

fn motor__into__line(self_: Motor) -> Line {
    return Line(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1);
}

fn motor__into__rotor(self_: Motor) -> Rotor {
    return Rotor(self_.g0);
}

fn motor__into__translator(self_: Motor) -> Translator {
    return Translator(vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g0.w));
}

fn multi_vector__into__anti_scalar(self_: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.y);
}

fn multi_vector__into__circle(self_: MultiVector) -> Circle {
    return Circle(self_.g6, self_.g7, self_.g8);
}

fn multi_vector__into__dipole(self_: MultiVector) -> Dipole {
    return Dipole(self_.g3, self_.g4, self_.g5);
}

fn multi_vector__into__dual_num(self_: MultiVector) -> DualNum {
    return DualNum(self_.g0);
}

fn multi_vector__into__flat_point(self_: MultiVector) -> FlatPoint {
    return FlatPoint(self_.g5);
}

fn multi_vector__into__flector(self_: MultiVector) -> Flector {
    return Flector(self_.g5, vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g10.y));
}

fn multi_vector__into__line(self_: MultiVector) -> Line {
    return Line(self_.g7, self_.g8);
}

fn multi_vector__into__motor(self_: MultiVector) -> Motor {
    return Motor(vec4<f32>(self_.g7.x, self_.g7.y, self_.g7.z, self_.g0.y), self_.g8);
}

fn multi_vector__into__plane(self_: MultiVector) -> Plane {
    return Plane(vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g10.y));
}

fn multi_vector__into__rotor(self_: MultiVector) -> Rotor {
    return Rotor(vec4<f32>(self_.g7.x, self_.g7.y, self_.g7.z, self_.g0.y));
}

fn multi_vector__into__round_point(self_: MultiVector) -> RoundPoint {
    return RoundPoint(self_.g1, self_.g2);
}

fn multi_vector__into__scalar(self_: MultiVector) -> Scalar {
    return Scalar(self_.g0.x);
}

fn multi_vector__into__sphere(self_: MultiVector) -> Sphere {
    return Sphere(self_.g9, self_.g10);
}

fn multi_vector__into__transflector(self_: MultiVector) -> Transflector {
    return Transflector(vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z), vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g10.y));
}

fn multi_vector__into__translator(self_: MultiVector) -> Translator {
    return Translator(vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, self_.g0.y));
}

fn rotor__into__anti_scalar(self_: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.w);
}

fn sphere__into__plane(self_: Sphere) -> Plane {
    return Plane(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g1.y));
}

fn transflector__into__plane(self_: Transflector) -> Plane {
    return Plane(self_.g1);
}

fn translator__into__anti_scalar(self_: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w);
}

fn anti_scalar__mul__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn circle__mul__circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0 * other.g0, self_.g1 * other.g1, self_.g2 * other.g2);
}

fn dipole__mul__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0 * other.g0, self_.g1 * other.g1, self_.g2 * other.g2);
}

fn dual_num__mul__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0 * other.g0);
}

fn flat_point__mul__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * other.g0);
}

fn flector__mul__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn line__mul__line(self_: Line, other: Line) -> Line {
    return Line(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn motor__mul__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn multi_vector__mul__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * other.g0, self_.g1 * other.g1, self_.g2 * other.g2, self_.g3 * other.g3, self_.g4 * other.g4, self_.g5 * other.g5, self_.g6 * other.g6, self_.g7 * other.g7, self_.g8 * other.g8, self_.g9 * other.g9, self_.g10 * other.g10);
}

fn plane__mul__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0 * other.g0);
}

fn rotor__mul__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0 * other.g0);
}

fn round_point__mul__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn scalar__mul__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn sphere__mul__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn transflector__mul__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn translator__mul__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0 * other.g0);
}

fn anti_scalar__sub__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 - other.g0);
}

fn anti_scalar__sub__circle(self_: AntiScalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__sub__dipole(self_: AntiScalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__sub__dual_num(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0) - other.g0);
}

fn anti_scalar__sub__flat_point(self_: AntiScalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__sub__flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn anti_scalar__sub__line(self_: AntiScalar, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0) - other.g1);
}

fn anti_scalar__sub__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0, vec3<f32>(0.0) - other.g1);
}

fn anti_scalar__sub__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn anti_scalar__sub__plane(self_: AntiScalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn anti_scalar__sub__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0);
}

fn anti_scalar__sub__round_point(self_: AntiScalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__sub__scalar(self_: AntiScalar, other: Scalar) -> DualNum {
    return DualNum(vec2<f32>(0.0, self_.g0) - vec2<f32>(other.g0, 0.0));
}

fn anti_scalar__sub__sphere(self_: AntiScalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn anti_scalar__sub__transflector(self_: AntiScalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn anti_scalar__sub__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0);
}

fn circle__sub__anti_scalar(self_: Circle, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__circle(self_: Circle, other: Circle) -> Circle {
    return Circle(self_.g0 - other.g0, self_.g1 - other.g1, self_.g2 - other.g2);
}

fn circle__sub__dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__dual_num(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__flat_point(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, self_.g0, self_.g1, self_.g2, vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn circle__sub__line(self_: Circle, other: Line) -> Circle {
    return Circle(self_.g0, self_.g1 - other.g0, self_.g2 - other.g1);
}

fn circle__sub__motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2 - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, self_.g0 - other.g6, self_.g1 - other.g7, self_.g2 - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn circle__sub__plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn circle__sub__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__round_point(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__scalar(self_: Circle, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__sub__sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn circle__sub__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, self_.g2, vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn circle__sub__translator(self_: Circle, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, self_.g2 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__anti_scalar(self_: Dipole, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return Dipole(self_.g0 - other.g0, self_.g1 - other.g1, self_.g2 - other.g2);
}

fn dipole__sub__dual_num(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__flat_point(self_: Dipole, other: FlatPoint) -> Dipole {
    return Dipole(self_.g0, self_.g1, self_.g2 - other.g0);
}

fn dipole__sub__flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2 - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn dipole__sub__line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, self_.g0 - other.g3, self_.g1 - other.g4, self_.g2 - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn dipole__sub__plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn dipole__sub__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__round_point(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__scalar(self_: Dipole, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__sub__sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn dipole__sub__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn dipole__sub__translator(self_: Dipole, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0, self_.g1, self_.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__anti_scalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0 - vec2<f32>(0.0, other.g0));
}

fn dual_num__sub__circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(self_.g0 - other.g0);
}

fn dual_num__sub__flat_point(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn dual_num__sub__line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn dual_num__sub__plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn dual_num__sub__rotor(self_: DualNum, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__round_point(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__sub__scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0 - vec2<f32>(other.g0, 0.0));
}

fn dual_num__sub__sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn dual_num__sub__transflector(self_: DualNum, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn dual_num__sub__translator(self_: DualNum, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__anti_scalar(self_: FlatPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g0 - other.g2);
}

fn flat_point__sub__dual_num(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 - other.g0);
}

fn flat_point__sub__flector(self_: FlatPoint, other: Flector) -> Flector {
    return Flector(self_.g0 - other.g0, vec4<f32>(0.0) - other.g1);
}

fn flat_point__sub__line(self_: FlatPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, self_.g0 - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn flat_point__sub__plane(self_: FlatPoint, other: Plane) -> Flector {
    return Flector(self_.g0, vec4<f32>(0.0) - other.g0);
}

fn flat_point__sub__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__round_point(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__scalar(self_: FlatPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__sub__sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn flat_point__sub__transflector(self_: FlatPoint, other: Transflector) -> Flector {
    return Flector(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0) - other.g1);
}

fn flat_point__sub__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__sub__anti_scalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g0 - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__dual_num(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__flat_point(self_: Flector, other: FlatPoint) -> Flector {
    return Flector(self_.g0 - other.g0, self_.g1);
}

fn flector__sub__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn flector__sub__line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, self_.g0 - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) - other.g9, vec2<f32>(0.0, self_.g1.w) - other.g10);
}

fn flector__sub__plane(self_: Flector, other: Plane) -> Flector {
    return Flector(self_.g0, self_.g1 - other.g0);
}

fn flector__sub__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn flector__sub__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) - other.g0, vec2<f32>(0.0, self_.g1.w) - other.g1);
}

fn flector__sub__transflector(self_: Flector, other: Transflector) -> Flector {
    return Flector(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 - other.g1);
}

fn flector__sub__translator(self_: Flector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn line__sub__anti_scalar(self_: Line, other: AntiScalar) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn line__sub__circle(self_: Line, other: Circle) -> Circle {
    return Circle(vec4<f32>(0.0) - other.g0, self_.g0 - other.g1, self_.g1 - other.g2);
}

fn line__sub__dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__sub__dual_num(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__sub__flat_point(self_: Line, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__sub__flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn line__sub__line(self_: Line, other: Line) -> Line {
    return Line(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn line__sub__motor(self_: Line, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1 - other.g1);
}

fn line__sub__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, self_.g0 - other.g7, self_.g1 - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn line__sub__plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn line__sub__rotor(self_: Line, other: Rotor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1);
}

fn line__sub__round_point(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__sub__scalar(self_: Line, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__sub__sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn line__sub__transflector(self_: Line, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn line__sub__translator(self_: Line, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn motor__sub__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn motor__sub__circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1, self_.g1 - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__sub__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__sub__dual_num(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__sub__flat_point(self_: Motor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__sub__flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn motor__sub__line(self_: Motor, other: Line) -> Motor {
    return Motor(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 - other.g1);
}

fn motor__sub__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn motor__sub__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g7, self_.g1 - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn motor__sub__plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn motor__sub__rotor(self_: Motor, other: Rotor) -> Motor {
    return Motor(self_.g0 - other.g0, self_.g1);
}

fn motor__sub__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__sub__scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__sub__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn motor__sub__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn motor__sub__translator(self_: Motor, other: Translator) -> Motor {
    return Motor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector__sub__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__sub__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6 - other.g0, self_.g7 - other.g1, self_.g8 - other.g2, self_.g9, self_.g10);
}

fn multi_vector__sub__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3 - other.g0, self_.g4 - other.g1, self_.g5 - other.g2, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__sub__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(self_.g0 - other.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__sub__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5 - other.g0, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__sub__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5 - other.g0, self_.g6, self_.g7, self_.g8, self_.g9 - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g10 - vec2<f32>(0.0, other.g1.w));
}

fn multi_vector__sub__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7 - other.g0, self_.g8 - other.g1, self_.g9, self_.g10);
}

fn multi_vector__sub__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g8 - other.g1, self_.g9, self_.g10);
}

fn multi_vector__sub__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 - other.g0, self_.g1 - other.g1, self_.g2 - other.g2, self_.g3 - other.g3, self_.g4 - other.g4, self_.g5 - other.g5, self_.g6 - other.g6, self_.g7 - other.g7, self_.g8 - other.g8, self_.g9 - other.g9, self_.g10 - other.g10);
}

fn multi_vector__sub__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g10 - vec2<f32>(0.0, other.g0.w));
}

fn multi_vector__sub__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g8, self_.g9, self_.g10);
}

fn multi_vector__sub__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 - other.g0, self_.g2 - other.g1, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__sub__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(other.g0, 0.0), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn multi_vector__sub__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8, self_.g9 - other.g0, self_.g10 - other.g1);
}

fn multi_vector__sub__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4, self_.g5 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g6, self_.g7, self_.g8, self_.g9 - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g10 - vec2<f32>(0.0, other.g1.w));
}

fn multi_vector__sub__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3, self_.g4, self_.g5, self_.g6, self_.g7, self_.g8 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g9, self_.g10);
}

fn plane__sub__anti_scalar(self_: Plane, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__dual_num(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__flat_point(self_: Plane, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, self_.g0);
}

fn plane__sub__flector(self_: Plane, other: Flector) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, self_.g0 - other.g1);
}

fn plane__sub__line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g9, vec2<f32>(0.0, self_.g0.w) - other.g10);
}

fn plane__sub__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0 - other.g0);
}

fn plane__sub__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__round_point(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__scalar(self_: Plane, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn plane__sub__sphere(self_: Plane, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g0, vec2<f32>(0.0, self_.g0.w) - other.g1);
}

fn plane__sub__transflector(self_: Plane, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(0.0) - other.g0, self_.g0 - other.g1);
}

fn plane__sub__translator(self_: Plane, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn rotor__sub__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn rotor__sub__circle(self_: Rotor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__sub__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__sub__dual_num(self_: Rotor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__sub__flat_point(self_: Rotor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__sub__flector(self_: Rotor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn rotor__sub__line(self_: Rotor, other: Line) -> Motor {
    return Motor(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0) - other.g1);
}

fn rotor__sub__motor(self_: Rotor, other: Motor) -> Motor {
    return Motor(self_.g0 - other.g0, vec3<f32>(0.0) - other.g1);
}

fn rotor__sub__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn rotor__sub__plane(self_: Rotor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn rotor__sub__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0 - other.g0);
}

fn rotor__sub__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__sub__scalar(self_: Rotor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__sub__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn rotor__sub__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn rotor__sub__translator(self_: Rotor, other: Translator) -> Motor {
    return Motor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn round_point__sub__anti_scalar(self_: RoundPoint, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__dual_num(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__flat_point(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn round_point__sub__line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, self_.g0 - other.g1, self_.g1 - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn round_point__sub__plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn round_point__sub__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn round_point__sub__scalar(self_: RoundPoint, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__sub__sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn round_point__sub__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn round_point__sub__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, self_.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__anti_scalar(self_: Scalar, other: AntiScalar) -> DualNum {
    return DualNum(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0));
}

fn scalar__sub__circle(self_: Scalar, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__dipole(self_: Scalar, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__dual_num(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0, 0.0) - other.g0);
}

fn scalar__sub__flat_point(self_: Scalar, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn scalar__sub__line(self_: Scalar, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn scalar__sub__plane(self_: Scalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn scalar__sub__rotor(self_: Scalar, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__round_point(self_: Scalar, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__sub__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 - other.g0);
}

fn scalar__sub__sphere(self_: Scalar, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn scalar__sub__transflector(self_: Scalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn scalar__sub__translator(self_: Scalar, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__sub__anti_scalar(self_: Sphere, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__sub__circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, self_.g0, self_.g1);
}

fn sphere__sub__dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__sub__dual_num(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__sub__flat_point(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__sub__flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g1 - vec2<f32>(0.0, other.g1.w));
}

fn sphere__sub__line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g0, self_.g1);
}

fn sphere__sub__motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, self_.g0, self_.g1);
}

fn sphere__sub__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, self_.g0 - other.g9, self_.g1 - other.g10);
}

fn sphere__sub__plane(self_: Sphere, other: Plane) -> Sphere {
    return Sphere(self_.g0 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 - vec2<f32>(0.0, other.g0.w));
}

fn sphere__sub__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__sub__round_point(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__sub__scalar(self_: Sphere, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0, self_.g1);
}

fn sphere__sub__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return Sphere(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn sphere__sub__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), self_.g1 - vec2<f32>(0.0, other.g1.w));
}

fn sphere__sub__translator(self_: Sphere, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0, self_.g1);
}

fn transflector__sub__anti_scalar(self_: Transflector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__circle(self_: Transflector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__dual_num(self_: Transflector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__flat_point(self_: Transflector, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1);
}

fn transflector__sub__flector(self_: Transflector, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1 - other.g1);
}

fn transflector__sub__line(self_: Transflector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__motor(self_: Transflector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(0.0) - other.g8, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) - other.g9, vec2<f32>(0.0, self_.g1.w) - other.g10);
}

fn transflector__sub__plane(self_: Transflector, other: Plane) -> Transflector {
    return Transflector(self_.g0, self_.g1 - other.g0);
}

fn transflector__sub__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__scalar(self_: Transflector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn transflector__sub__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) - other.g0, vec2<f32>(0.0, self_.g1.w) - other.g1);
}

fn transflector__sub__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn transflector__sub__translator(self_: Transflector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w));
}

fn translator__sub__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn translator__sub__circle(self_: Translator, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__sub__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0) - other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__sub__dual_num(self_: Translator, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__sub__flat_point(self_: Translator, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__sub__flector(self_: Translator, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn translator__sub__line(self_: Translator, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1);
}

fn translator__sub__motor(self_: Translator, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1);
}

fn translator__sub__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(0.0) - other.g1, vec2<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec3<f32>(0.0) - other.g4, vec4<f32>(0.0) - other.g5, vec4<f32>(0.0) - other.g6, vec3<f32>(0.0) - other.g7, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g8, vec3<f32>(0.0) - other.g9, vec2<f32>(0.0) - other.g10);
}

fn translator__sub__plane(self_: Translator, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w));
}

fn translator__sub__rotor(self_: Translator, other: Rotor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn translator__sub__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__sub__scalar(self_: Translator, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__sub__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0) - other.g0, vec2<f32>(0.0) - other.g1);
}

fn translator__sub__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0) - vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(0.0) - vec2<f32>(0.0, other.g1.w));
}

fn translator__sub__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0 - other.g0);
}

fn anti_scalar__anti_wedge_dot__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge_dot__circle(self_: AntiScalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge_dot__dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge_dot__dual_num(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__flat_point(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec2<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec3<f32>(self_.g0) * other.g4, vec4<f32>(self_.g0) * other.g5, vec4<f32>(self_.g0) * other.g6, vec3<f32>(self_.g0) * other.g7, vec3<f32>(self_.g0) * other.g8, vec3<f32>(self_.g0) * other.g9, vec2<f32>(self_.g0) * other.g10);
}

fn anti_scalar__anti_wedge_dot__plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__round_point(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge_dot__sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn circle__anti_wedge_dot__anti_scalar(self_: Circle, other: AntiScalar) -> Circle {
    return Circle(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn circle__anti_wedge_dot__circle(self_: Circle, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.w) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge_dot__dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g2.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g2.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g2.w) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * other.g2.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g2.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, other.g2.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g2.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1 + self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z));
}

fn circle__anti_wedge_dot__dual_num(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), self_.g0 * vec4<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge_dot__flat_point(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn circle__anti_wedge_dot__flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z));
}

fn circle__anti_wedge_dot__line(self_: Circle, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge_dot__motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge_dot__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g5.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g5.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g5.z, other.g8.z) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g5.w, other.g6.w) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g4.x, other.g7.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g4.y, other.g7.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g4.z, other.g7.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g8.z, -other.g2.y, other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g8.y, -other.g8.x, -other.g2.y) + vec3<f32>(self_.g0.w) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, other.g6.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g6.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * other.g2 * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) - vec3<f32>(self_.g0.w) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g0.w) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g5.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g5.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g5.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g5.x, other.g5.y, other.g5.z, -other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.y, -other.g5.z, other.g5.y, -other.g9.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g5.z, other.g10.y, -other.g5.x, -other.g9.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g5.y, other.g5.x, other.g10.y, -other.g9.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g5.w, -other.g9.z, other.g9.y, other.g3.x) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g9.z, other.g5.w, -other.g9.x, other.g3.y) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g4.z, other.g0.x, -other.g4.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g9.y, other.g9.x, other.g5.w, other.g3.z) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g4.y, other.g4.x, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g6.w, -other.g7.z, other.g7.y, other.g8.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g7.z, other.g6.w, -other.g7.x, other.g8.y) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g7.y, other.g7.x, other.g6.w, other.g8.z) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g6.x, -other.g6.y, -other.g6.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g2.x, -other.g6.z, other.g6.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g6.z, other.g2.x, -other.g6.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g6.y, other.g6.x, other.g2.x, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec3<f32>(self_.g0.w) * other.g8 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g7.z, -other.g6.w, -other.g7.x) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g6.w) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g0.w) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g9.z, other.g5.w, -other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g9.y, other.g9.x, other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x), vec2<f32>(self_.g0.x) * vec2<f32>(other.g9.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g9.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g9.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g9.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g9.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g9.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g4.z));
}

fn circle__anti_wedge_dot__plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z));
}

fn circle__anti_wedge_dot__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge_dot__round_point(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g2 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g0.w) * other.g0 + self_.g2 * vec3<f32>(other.g1.x), self_.g1 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge_dot__scalar(self_: Circle, other: Scalar) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn circle__anti_wedge_dot__sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g0.w) * other.g0 + self_.g2 * vec3<f32>(other.g1.x), vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g2 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z));
}

fn circle__anti_wedge_dot__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z));
}

fn circle__anti_wedge_dot__translator(self_: Circle, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__anti_scalar(self_: Dipole, other: AntiScalar) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec4<f32>(other.g0));
}

fn dipole__anti_wedge_dot__circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z) + vec4<f32>(self_.g2.w) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z));
}

fn dipole__anti_wedge_dot__dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, -other.g2.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.w, other.g1.z, -other.g1.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g2.w, other.g1.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g2.w, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g2.wwwz * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__dual_num(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec4<f32>(other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0.x, -other.g0.x, -other.g0.x, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__flat_point(self_: Dipole, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) - vec3<f32>(self_.g2.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z));
}

fn dipole__anti_wedge_dot__motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z));
}

fn dipole__anti_wedge_dot__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g8.x, other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g8.y, other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g8.z, other.g5.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g7.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g7.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g7.z, other.g4.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g6.x, other.g3.x) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g6.y, other.g3.y) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g6.z, other.g3.z) - vec2<f32>(self_.g2.w) * vec2<f32>(other.g6.w, other.g5.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g9.z, other.g5.w, -other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g9.y, other.g9.x, other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g2.w) * other.g4, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g2.w) * other.g10 * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g6.w, -other.g7.x) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g6.w) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) - vec3<f32>(self_.g2.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g2.y, -other.g8.z, other.g8.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g8.z, other.g2.y, -other.g8.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g8.y, other.g8.x, other.g2.y, other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g5.w, -other.g9.z, other.g9.y, -other.g5.x) + vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g9.z, other.g5.w, -other.g9.x, -other.g5.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, -other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g9.y, other.g9.x, other.g5.w, -other.g5.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, -other.g0.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g10.x, other.g3.z, -other.g3.y, -other.g9.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, -other.g10.x, other.g3.x, -other.g9.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, -other.g10.x, -other.g9.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z) + vec4<f32>(self_.g2.w) * vec4<f32>(-other.g3.x, -other.g3.y, -other.g3.z, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g5.z, -other.g10.y, other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g5.y, -other.g5.x, -other.g10.y) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) - vec3<f32>(self_.g2.w) * other.g9, vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g5.z, -other.g10.y, other.g5.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g5.y, -other.g5.x, -other.g10.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g6.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g6.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g6.z, -other.g2.x, other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g6.y, -other.g6.x, -other.g2.x) + vec3<f32>(self_.g2.w) * other.g7, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.w) * other.g2 * vec2<f32>(1.0, -1.0));
}

fn dipole__anti_wedge_dot__plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g2.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z));
}

fn dipole__anti_wedge_dot__round_point(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g1.x), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g2.w) * other.g0, vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.y, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.y, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.y, other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * other.g1 * vec2<f32>(1.0, -1.0));
}

fn dipole__anti_wedge_dot__scalar(self_: Dipole, other: Scalar) -> Circle {
    return Circle(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g0));
}

fn dipole__anti_wedge_dot__sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, -other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, -other.g1.x, -other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g2.w) * other.g0, vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) - vec3<f32>(self_.g2.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge_dot__translator(self_: Dipole, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + self_.g2.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g2.w) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn dual_num__anti_wedge_dot__anti_scalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(other.g0));
}

fn dual_num__anti_wedge_dot__circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g0.w), vec4<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge_dot__dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(self_.g0.y) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g2.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge_dot__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0);
}

fn dual_num__anti_wedge_dot__flat_point(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge_dot__flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w));
}

fn dual_num__anti_wedge_dot__line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge_dot__motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge_dot__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * other.g9 + vec3<f32>(self_.g0.y) * other.g1, vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * other.g10 + vec2<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g0.y) * other.g3, vec3<f32>(self_.g0.x) * other.g7 + vec3<f32>(self_.g0.y) * other.g4, vec4<f32>(self_.g0.x) * vec4<f32>(other.g8.x, other.g8.y, other.g8.z, -other.g6.w) + vec4<f32>(self_.g0.y) * other.g5, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g3.x, -other.g3.y, -other.g3.z, other.g5.w) + vec4<f32>(self_.g0.y) * other.g6, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g4 + vec3<f32>(self_.g0.y) * other.g7, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g0.y) * other.g8, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g9, vec2<f32>(self_.g0.x) * other.g2 + vec2<f32>(self_.g0.y) * other.g10);
}

fn dual_num__anti_wedge_dot__plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w));
}

fn dual_num__anti_wedge_dot__rotor(self_: DualNum, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge_dot__round_point(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(self_.g0.x) * other.g1);
}

fn dual_num__anti_wedge_dot__scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0.yx * vec2<f32>(other.g0));
}

fn dual_num__anti_wedge_dot__sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(self_.g0.y) * other.g1);
}

fn dual_num__anti_wedge_dot__transflector(self_: DualNum, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w));
}

fn dual_num__anti_wedge_dot__translator(self_: DualNum, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge_dot__anti_scalar(self_: FlatPoint, other: AntiScalar) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0));
}

fn flat_point__anti_wedge_dot__circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z));
}

fn flat_point__anti_wedge_dot__dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g2.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g0.wwwz * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge_dot__dual_num(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge_dot__flat_point(self_: FlatPoint, other: FlatPoint) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn flat_point__anti_wedge_dot__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge_dot__line(self_: FlatPoint, other: Line) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn flat_point__anti_wedge_dot__motor(self_: FlatPoint, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn flat_point__anti_wedge_dot__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, other.g3.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g6.w, other.g5.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g0.w) * other.g4, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) - vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g3.x, -other.g3.y, -other.g3.z, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) - vec3<f32>(self_.g0.w) * other.g9, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g6.z, -other.g2.x, other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g6.y, -other.g6.x, -other.g2.x) + vec3<f32>(self_.g0.w) * other.g7, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * other.g2 * vec2<f32>(1.0, -1.0));
}

fn flat_point__anti_wedge_dot__plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge_dot__rotor(self_: FlatPoint, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn flat_point__anti_wedge_dot__round_point(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(1.0, -1.0));
}

fn flat_point__anti_wedge_dot__scalar(self_: FlatPoint, other: Scalar) -> Circle {
    return Circle(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn flat_point__anti_wedge_dot__sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge_dot__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge_dot__translator(self_: FlatPoint, other: Translator) -> FlatPoint {
    return FlatPoint(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn flector__anti_wedge_dot__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__anti_wedge_dot__circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn flector__anti_wedge_dot__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g2.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g2.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g0.wwwz * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g2.w) - vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - vec3<f32>(self_.g1.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge_dot__dual_num(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y));
}

fn flector__anti_wedge_dot__flat_point(self_: Flector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge_dot__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge_dot__line(self_: Flector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z));
}

fn flector__anti_wedge_dot__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn flector__anti_wedge_dot__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, other.g3.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g6.w, other.g5.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g9.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g9.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g9.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g2.x, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g0.w) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) - vec3<f32>(self_.g1.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) - vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g6.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g6.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g2.y, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g8.z, -other.g2.y, other.g8.x, -other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g8.y, -other.g8.x, -other.g2.y, -other.g7.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, -other.g2.x) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g3.x, -other.g3.y, -other.g3.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g10.x, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, -other.g10.x, other.g3.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, -other.g10.x, -other.g4.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) - vec3<f32>(self_.g0.w) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) - vec3<f32>(self_.g1.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g1.w) * other.g9 - vec3<f32>(self_.g1.w) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g6.z, -other.g2.x, other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g6.y, -other.g6.x, -other.g2.x) + vec3<f32>(self_.g0.w) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * other.g2 * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g6.x, other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g6.y, other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g6.z, other.g8.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g6.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y));
}

fn flector__anti_wedge_dot__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge_dot__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0));
}

fn flector__anti_wedge_dot__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + self_.g1.xyzx * vec4<f32>(-other.g1.y, -other.g1.y, -other.g1.y, 0.0) - vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(1.0, -1.0));
}

fn flector__anti_wedge_dot__scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge_dot__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g1.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g1.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge_dot__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge_dot__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn line__anti_wedge_dot__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__anti_wedge_dot__circle(self_: Line, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge_dot__dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g2.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, other.g2.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g2.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z));
}

fn line__anti_wedge_dot__dual_num(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge_dot__flat_point(self_: Line, other: FlatPoint) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__anti_wedge_dot__flector(self_: Line, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn line__anti_wedge_dot__line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge_dot__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge_dot__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, other.g7.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, other.g7.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, other.g7.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, other.g6.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g6.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, -other.g5.z, other.g5.y, -other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g5.z, other.g10.y, -other.g5.x, -other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g5.y, other.g5.x, other.g10.y, -other.g9.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g5.w, -other.g9.z, other.g9.y, other.g3.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g9.z, other.g5.w, -other.g9.x, other.g3.y) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, other.g0.x, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g9.y, other.g9.x, other.g5.w, other.g3.z) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.x, -other.g6.z, other.g6.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g6.z, other.g2.x, -other.g6.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g6.y, other.g6.x, other.g2.x, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, -other.g6.w, -other.g7.x) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g6.w) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, other.g5.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g9.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g9.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g9.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g4.z));
}

fn line__anti_wedge_dot__plane(self_: Line, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__anti_wedge_dot__rotor(self_: Line, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge_dot__round_point(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), self_.g1 * vec3<f32>(other.g1.x), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge_dot__scalar(self_: Line, other: Scalar) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn line__anti_wedge_dot__sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g1.x), self_.g1 * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn line__anti_wedge_dot__transflector(self_: Line, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn line__anti_wedge_dot__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__anti_wedge_dot__circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g2 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g2.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, other.g2.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g2.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z));
}

fn motor__anti_wedge_dot__dual_num(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__flat_point(self_: Motor, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__anti_wedge_dot__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn motor__anti_wedge_dot__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, other.g7.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, other.g7.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, other.g7.z) + vec2<f32>(self_.g0.w) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, other.g6.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g6.w) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g0.w) * other.g2 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, -other.g5.z, other.g5.y, -other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g5.z, other.g10.y, -other.g5.x, -other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g5.y, other.g5.x, other.g10.y, -other.g9.z) + vec4<f32>(self_.g0.w) * other.g5 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g5.w, -other.g9.z, other.g9.y, other.g3.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g9.z, other.g5.w, -other.g9.x, other.g3.y) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, other.g0.x, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g9.y, other.g9.x, other.g5.w, other.g3.z) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.x, -other.g6.z, other.g6.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g6.z, other.g2.x, -other.g6.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g6.y, other.g6.x, other.g2.x, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g6 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g0.w) * other.g8 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, -other.g6.w, -other.g7.x) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g6.w) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, other.g5.w) + vec3<f32>(self_.g0.w) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g0.w) * other.g10 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g9.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g9.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g9.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g4.z));
}

fn motor__anti_wedge_dot__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__anti_wedge_dot__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0 + self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.w) * other.g1 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), self_.g1 * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge_dot__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), self_.g1 * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0 - self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.w) * other.g1 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn motor__anti_wedge_dot__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn motor__anti_wedge_dot__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_wedge_dot__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec2<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec3<f32>(other.g0), self_.g5 * vec4<f32>(other.g0), self_.g6 * vec4<f32>(other.g0), self_.g7 * vec3<f32>(other.g0), self_.g8 * vec3<f32>(other.g0), self_.g9 * vec3<f32>(other.g0), self_.g10 * vec2<f32>(other.g0));
}

fn multi_vector__anti_wedge_dot__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g5.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g5.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g2.x) * other.g2 + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g6.w) * other.g1 + self_.g7 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g9 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * other.g2 + vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g0.w) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g5.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z) + vec4<f32>(self_.g5.w) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, other.g2.x) + vec4<f32>(self_.g6.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, other.g2.y) + vec4<f32>(self_.g6.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, other.g2.z) + vec4<f32>(self_.g6.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g8.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g8.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * other.g2 + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g2.y) * other.g1 + vec3<f32>(self_.g6.w) * other.g2 + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * other.g2 - vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g9.x) * vec2<f32>(-other.g0.x, other.g2.x) + vec2<f32>(self_.g9.y) * vec2<f32>(-other.g0.y, other.g2.y) + vec2<f32>(self_.g9.z) * vec2<f32>(-other.g0.z, other.g2.z) + self_.g10 * vec2<f32>(other.g0.w));
}

fn multi_vector__anti_wedge_dot__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, -other.g2.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g2.w, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g7.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g7.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g8.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g8.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g8.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + self_.g4 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g10.y) * other.g0, vec2<f32>(self_.g3.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g2.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g2.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g10 * vec2<f32>(other.g2.w), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g2.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g1.z, -other.g2.w, -other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g2.w) - vec3<f32>(self_.g6.w) * other.g0 + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g1 - self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g2.y) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.y) * other.g2 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, other.g1.z) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g6.wwwz * other.g2.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g8.x) * vec4<f32>(other.g2.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g1.z, other.g2.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g2.w, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g2.w) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g2.w, other.g1.z, -other.g1.y, -other.g2.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, other.g2.w, other.g1.x, -other.g2.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g2.w, -other.g2.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g5.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g5.wwwz * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g0.z) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g10.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g9 * vec3<f32>(other.g2.w) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g10.y) * other.g0, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - vec3<f32>(self_.g10.y) * other.g1, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g2.y) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - vec3<f32>(self_.g6.w) * other.g1 + self_.g7 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g2 * vec2<f32>(-other.g2.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g1.z));
}

fn multi_vector__anti_wedge_dot__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0, self_.g1 * vec3<f32>(other.g0.y) + self_.g9 * vec3<f32>(other.g0.x), self_.g2 * vec2<f32>(other.g0.y) - self_.g10 * vec2<f32>(other.g0.x), self_.g3 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.x), self_.g4 * vec3<f32>(other.g0.y) + self_.g7 * vec3<f32>(other.g0.x), self_.g5 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g6.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, self_.g8.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(-other.g0.x, -other.g0.x, -other.g0.x, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + self_.g6 * vec4<f32>(other.g0.y), vec3<f32>(0.0) - self_.g4 * vec3<f32>(other.g0.x) + self_.g7 * vec3<f32>(other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g0.x) + self_.g8 * vec3<f32>(other.g0.y), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.x) + self_.g9 * vec3<f32>(other.g0.y), self_.g2 * vec2<f32>(other.g0.x) + self_.g10 * vec2<f32>(other.g0.y));
}

fn multi_vector__anti_wedge_dot__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.w), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g6.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, self_.g8.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g9 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g7 * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + self_.g2 * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z));
}

fn multi_vector__anti_wedge_dot__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.w, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g10.x) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g2.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g2.y, self_.g2.y, self_.g2.y, self_.g2.x) * other.g1 + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g6.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g8.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g3.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) - vec3<f32>(self_.g5.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g10.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g7.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + self_.g2 * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g6.z, self_.g6.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g1.z));
}

fn multi_vector__anti_wedge_dot__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g6.w) * other.g0, vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g0, vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g6.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g6.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.y) * other.g0 + vec3<f32>(self_.g6.w) * other.g1 + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g1, vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g1.z));
}

fn multi_vector__anti_wedge_dot__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) - vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g10.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g5.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.w) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g6.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, other.g1.y) + vec4<f32>(self_.g6.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, other.g1.z) + vec4<f32>(self_.g6.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.w) * other.g1 + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g10.x) * other.g1, vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g1.z) + self_.g10 * vec2<f32>(other.g0.w));
}

fn multi_vector__anti_wedge_dot__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(other.g9.x, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g9.y, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g9.z, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g10.y, other.g2.y) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g10.x, other.g2.x) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g8.x, other.g5.x) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g8.y, other.g5.y) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g8.z, other.g5.z) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g7.x, other.g4.x) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g7.y, other.g4.y) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g7.z, other.g4.z) + vec2<f32>(self_.g5.x) * vec2<f32>(-other.g6.x, other.g3.x) + vec2<f32>(self_.g5.y) * vec2<f32>(-other.g6.y, other.g3.y) + vec2<f32>(self_.g5.z) * vec2<f32>(-other.g6.z, other.g3.z) - vec2<f32>(self_.g5.w) * vec2<f32>(other.g6.w, other.g5.w) - vec2<f32>(self_.g6.x) * vec2<f32>(other.g5.x, other.g8.x) - vec2<f32>(self_.g6.y) * vec2<f32>(other.g5.y, other.g8.y) - vec2<f32>(self_.g6.z) * vec2<f32>(other.g5.z, other.g8.z) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g5.w, other.g6.w) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g4.x, other.g7.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g4.y, other.g7.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g4.z, other.g7.z) - vec2<f32>(self_.g8.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g8.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g8.z) * vec2<f32>(other.g3.z, other.g6.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g1.x, other.g9.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g1.y, other.g9.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g1.z, other.g9.z) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g2.y, -other.g10.y) + vec2<f32>(self_.g10.y) * vec2<f32>(other.g2.x, -other.g10.x), vec3<f32>(self_.g0.x) * other.g9 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) - vec3<f32>(self_.g2.x) * other.g8 + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g9.z, other.g5.w, -other.g9.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g9.y, other.g9.x, other.g5.w) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g5.w) * other.g4 + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g8.z, -other.g2.y, other.g8.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g8.y, -other.g8.x, -other.g2.y) + vec3<f32>(self_.g6.w) * other.g7 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, other.g6.w, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g6.w) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g10.y) * other.g3, vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * other.g10 + vec2<f32>(self_.g0.y) * other.g2 + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g2 * vec2<f32>(other.g6.w) + self_.g2 * vec2<f32>(other.g0.y) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(other.g4.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(other.g4.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(other.g4.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g3.x, other.g5.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g3.y, other.g5.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g5.w) * other.g10 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g6.w) * other.g2 * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g10 * vec2<f32>(other.g5.w) - self_.g10 * vec2<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) - vec3<f32>(self_.g2.x) * other.g9 + vec3<f32>(self_.g2.x) * other.g4 + vec3<f32>(self_.g3.x) * vec3<f32>(other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g7.z, other.g6.w, -other.g7.x) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g1.z, other.g0.y, -other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g6.w) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g6.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) - vec3<f32>(self_.g6.w) * other.g3 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g10.x) * other.g7 + vec3<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g0.x) * other.g7 + vec3<f32>(self_.g0.y) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g2.y) * other.g3 + vec3<f32>(self_.g3.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g5.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g5.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) - vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g6.w) * other.g9 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, -other.g6.w, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g6.w) + vec3<f32>(self_.g10.x) * other.g8 + vec3<f32>(self_.g10.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g8.x, other.g8.y, other.g8.z, -other.g6.w) + vec4<f32>(self_.g0.y) * other.g5 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.y, -other.g5.z, other.g5.y, other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g5.z, other.g10.y, -other.g5.x, other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g5.y, other.g5.x, other.g10.y, other.g4.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g10.y) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, -other.g10.x) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g2.y, -other.g8.z, other.g8.y, other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(other.g8.z, other.g2.y, -other.g8.x, other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(-other.g8.y, other.g8.x, other.g2.y, other.g1.z) + vec4<f32>(self_.g5.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g5.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g5.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g5.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g0.y) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g5.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g5.y) + vec4<f32>(self_.g6.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g5.z) + vec4<f32>(self_.g6.w) * vec4<f32>(other.g5.x, other.g5.y, other.g5.z, -other.g0.x) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g10.y, -other.g5.z, other.g5.y, -other.g9.x) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g5.z, other.g10.y, -other.g5.x, -other.g9.y) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g5.y, other.g5.x, other.g10.y, -other.g9.z) + vec4<f32>(self_.g8.x) * vec4<f32>(other.g5.w, -other.g9.z, other.g9.y, other.g3.x) + vec4<f32>(self_.g8.x) * vec4<f32>(other.g0.x, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g9.z, other.g5.w, -other.g9.x, other.g3.y) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g4.z, other.g0.x, -other.g4.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g9.y, other.g9.x, other.g5.w, other.g3.z) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g4.y, other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(-other.g2.y, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g8.z, -other.g2.y, other.g8.x, -other.g7.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g8.y, -other.g8.x, -other.g2.y, -other.g7.z) + vec4<f32>(self_.g10.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, -other.g2.x) + vec4<f32>(self_.g10.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g3.x, -other.g3.y, -other.g3.z, other.g5.w) + vec4<f32>(self_.g0.y) * other.g6 + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g2.x, other.g6.z, -other.g6.y, -other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g6.z, -other.g2.x, other.g6.x, -other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g6.y, -other.g6.x, -other.g2.x, -other.g7.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, -other.g2.y) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g5.w, -other.g9.z, other.g9.y, -other.g5.x) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g9.z, other.g5.w, -other.g9.x, -other.g5.y) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g4.z, -other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g9.y, other.g9.x, other.g5.w, -other.g5.z) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g4.y, -other.g4.x, -other.g0.x, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(-other.g10.x, other.g3.z, -other.g3.y, -other.g9.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g3.z, -other.g10.x, other.g3.x, -other.g9.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g3.y, -other.g3.x, -other.g10.x, -other.g9.z) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g5.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g5.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z) + vec4<f32>(self_.g5.w) * vec4<f32>(-other.g3.x, -other.g3.y, -other.g3.z, other.g0.x) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g6.w, -other.g7.z, other.g7.y, other.g8.x) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g6.y) * vec4<f32>(other.g7.z, other.g6.w, -other.g7.x, other.g8.y) + vec4<f32>(self_.g6.y) * vec4<f32>(other.g1.z, other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g6.z) * vec4<f32>(-other.g7.y, other.g7.x, other.g6.w, other.g8.z) + vec4<f32>(self_.g6.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g6.w) * vec4<f32>(-other.g6.x, -other.g6.y, -other.g6.z, other.g0.y) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g2.x, -other.g6.z, other.g6.y, -other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g6.z, other.g2.x, -other.g6.x, -other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g6.y, other.g6.x, other.g2.x, -other.g1.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.x) + vec4<f32>(self_.g8.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.y) + vec4<f32>(self_.g8.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.z) + vec4<f32>(self_.g9.x) * vec4<f32>(-other.g10.x, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g3.z, -other.g10.x, other.g3.x, -other.g4.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g3.y, -other.g3.x, -other.g10.x, -other.g4.z) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, other.g10.y) + vec4<f32>(self_.g10.x) * vec4<f32>(-other.g4.x, -other.g4.y, -other.g4.z, 0.0) + vec4<f32>(self_.g10.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g4 + vec3<f32>(self_.g0.y) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, other.g6.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g6.w) + vec3<f32>(self_.g2.x) * other.g8 + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g3.x) * vec3<f32>(-other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g5.z, -other.g10.y, other.g5.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g5.y, -other.g5.x, -other.g10.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) - vec3<f32>(self_.g5.w) * other.g9 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g6.w) * other.g1 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g10.y) * other.g3, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g0.y) * other.g8 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g2.y) * other.g7 - vec3<f32>(self_.g2.y) * other.g1 + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g5.z, -other.g10.y, other.g5.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g5.y, -other.g5.x, -other.g10.y) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g6.w) * other.g8 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g7.z, -other.g6.w, -other.g7.x) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g6.w) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g10.y) * other.g9 - vec3<f32>(self_.g10.y) * other.g4, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g2.y) * other.g3 + vec3<f32>(self_.g3.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, -other.g6.w, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g6.w) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g6.z, -other.g2.x, other.g6.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g6.y, -other.g6.x, -other.g2.x) + vec3<f32>(self_.g5.w) * other.g7 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g6.w) * other.g4 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g9.z, other.g5.w, -other.g9.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g9.y, other.g9.x, other.g5.w) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g10.x) * other.g8 - vec3<f32>(self_.g10.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * other.g2 + vec2<f32>(self_.g0.y) * other.g10 + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g2 * vec2<f32>(-other.g5.w) + self_.g2 * vec2<f32>(other.g0.x) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.w) * other.g2 * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g9.x, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g9.y, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g9.z, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g6.w) * other.g10 * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g9.x) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g9.y) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g9.z) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g9.x) * vec2<f32>(-other.g6.x, other.g8.x) + vec2<f32>(self_.g9.y) * vec2<f32>(-other.g6.y, other.g8.y) + vec2<f32>(self_.g9.z) * vec2<f32>(-other.g6.z, other.g8.z) + self_.g10 * vec2<f32>(other.g6.w) + self_.g10 * vec2<f32>(other.g0.y));
}

fn multi_vector__anti_wedge_dot__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.w, 0.0) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g10.x) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g3 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g2.y, self_.g2.y, self_.g2.y, self_.g2.x) * other.g0 + vec4<f32>(self_.g7.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g10.x) * other.g0, vec3<f32>(0.0) - self_.g3 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g9 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g6.z, self_.g6.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z));
}

fn multi_vector__anti_wedge_dot__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec4<f32>(self_.g5.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g5.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g6.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g6.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g7.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w));
}

fn multi_vector__anti_wedge_dot__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g10.y) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 - vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g8 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.y) * other.g1 + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g1.x) + self_.g9 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g10.x) * other.g0, self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g4.x) * vec4<f32>(other.g1.y, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g1.y, 0.0, other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g1.y, other.g0.z) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g9.x) * vec4<f32>(-other.g1.y, -other.g1.y, -other.g1.y, 0.0) + vec4<f32>(self_.g10.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) - vec4<f32>(self_.g10.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.y) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g6.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g6.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g6.w) * other.g0 + self_.g8 * vec3<f32>(other.g1.x), self_.g1 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g2.y) * other.g0 + self_.g7 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * other.g1 + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * other.g1 * vec2<f32>(1.0, -1.0));
}

fn multi_vector__anti_wedge_dot__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(other.g0), self_.g9 * vec3<f32>(other.g0), vec2<f32>(0.0) - self_.g10 * vec2<f32>(other.g0), vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0), self_.g7 * vec3<f32>(other.g0), vec4<f32>(self_.g6.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, self_.g8.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0), vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0) - self_.g4 * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), self_.g2 * vec2<f32>(other.g0));
}

fn multi_vector__anti_wedge_dot__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g10.x) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g10.y) * vec2<f32>(0.0, -other.g1.x), vec3<f32>(self_.g0.x) * other.g0 + self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * other.g1 + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g1.x) - vec3<f32>(self_.g2.x) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g7 * vec3<f32>(other.g1.x), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g6.w) * other.g0 + self_.g8 * vec3<f32>(other.g1.x), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.x) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(-other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, -other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, -other.g1.x, -other.g0.z) + vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g9.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.y) + vec4<f32>(self_.g10.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x), vec3<f32>(0.0) - self_.g3 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - self_.g4 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g9 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g10.y) * other.g0, vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g8 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.y) * other.g1 + vec2<f32>(self_.g6.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z));
}

fn multi_vector__anti_wedge_dot__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.w, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g10.x) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g2.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g2.y, self_.g2.y, self_.g2.y, self_.g2.x) * other.g1 + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g6.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g3.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) - vec3<f32>(self_.g5.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g10.x) * other.g0, vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, -other.g1.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, -other.g1.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g10.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g6.z, self_.g6.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g1.z));
}

fn multi_vector__anti_wedge_dot__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g0.z), self_.g1 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z), self_.g3 * vec3<f32>(other.g0.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + self_.g5.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g5.w) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.w, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, other.g0.w, 0.0, other.g0.y) + vec4<f32>(self_.g6.z) * vec4<f32>(0.0, 0.0, other.g0.w, other.g0.z) + vec4<f32>(self_.g6.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g7 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g8 * vec3<f32>(other.g0.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g9 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g0.z) + self_.g10 * vec2<f32>(other.g0.w));
}

fn plane__anti_wedge_dot__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__anti_wedge_dot__circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w));
}

fn plane__anti_wedge_dot__dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g2.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.w) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge_dot__dual_num(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y));
}

fn plane__anti_wedge_dot__flat_point(self_: Plane, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge_dot__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge_dot__line(self_: Plane, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z));
}

fn plane__anti_wedge_dot__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane__anti_wedge_dot__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g9.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g9.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g9.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g2.x, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) - vec3<f32>(self_.g0.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g6.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g6.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.y, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g8.z, -other.g2.y, other.g8.x, -other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g8.y, -other.g8.x, -other.g2.y, -other.g7.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, -other.g2.x) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g10.x, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, -other.g10.x, other.g3.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, -other.g10.x, -other.g4.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) - vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g0.w) * other.g9 - vec3<f32>(self_.g0.w) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, other.g8.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g6.w) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y));
}

fn plane__anti_wedge_dot__plane(self_: Plane, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__anti_wedge_dot__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0));
}

fn plane__anti_wedge_dot__round_point(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0.xyzx * vec4<f32>(-other.g1.y, -other.g1.y, -other.g1.y, 0.0) - vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge_dot__scalar(self_: Plane, other: Scalar) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0));
}

fn plane__anti_wedge_dot__sphere(self_: Plane, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g1.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge_dot__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge_dot__translator(self_: Plane, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn rotor__anti_wedge_dot__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__anti_wedge_dot__circle(self_: Rotor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge_dot__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.w), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z));
}

fn rotor__anti_wedge_dot__dual_num(self_: Rotor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge_dot__flat_point(self_: Rotor, other: FlatPoint) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn rotor__anti_wedge_dot__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge_dot__line(self_: Rotor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge_dot__motor(self_: Rotor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge_dot__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, other.g7.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, other.g7.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, other.g7.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, other.g6.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g6.w) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g4, vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, -other.g5.z, other.g5.y, -other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g5.z, other.g10.y, -other.g5.x, -other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g5.y, other.g5.x, other.g10.y, -other.g9.z) + vec4<f32>(self_.g0.w) * other.g5, vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.x, -other.g6.z, other.g6.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g6.z, other.g2.x, -other.g6.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g6.y, other.g6.x, other.g2.x, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g6, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g7, vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g0.w) * other.g8, vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, other.g5.w) + vec3<f32>(self_.g0.w) * other.g9, vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g0.w) * other.g10);
}

fn rotor__anti_wedge_dot__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge_dot__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge_dot__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge_dot__scalar(self_: Rotor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge_dot__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge_dot__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge_dot__translator(self_: Rotor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__anti_scalar(self_: RoundPoint, other: AntiScalar) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn round_point__anti_wedge_dot__circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.x) * other.g2 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * other.g2 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, other.g1.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g1.y) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(-other.g2.w));
}

fn round_point__anti_wedge_dot__dual_num(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec2<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec2<f32>(other.g0.x));
}

fn round_point__anti_wedge_dot__flat_point(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(-other.g0.w));
}

fn round_point__anti_wedge_dot__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g1.y, self_.g1.y, self_.g1.y, self_.g1.x) * other.g1, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(-other.g0.w));
}

fn round_point__anti_wedge_dot__line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) - vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g9.x, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g9.y, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g9.z, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g10.y, other.g2.y) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g10.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) - vec3<f32>(self_.g1.x) * other.g8 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g1 * vec2<f32>(other.g6.w) + self_.g1 * vec2<f32>(other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) - vec3<f32>(self_.g1.x) * other.g9 + vec3<f32>(self_.g1.x) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.y) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, -other.g5.z, other.g5.y, other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g5.z, other.g10.y, -other.g5.x, other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g5.y, other.g5.x, other.g10.y, other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g10.y) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, -other.g10.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.x, other.g6.z, -other.g6.y, -other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g6.z, -other.g2.x, other.g6.x, -other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g6.y, -other.g6.x, -other.g2.x, -other.g7.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, -other.g2.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, other.g6.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g6.w) + vec3<f32>(self_.g1.x) * other.g8 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, other.g2.y) + vec3<f32>(self_.g1.y) * other.g7 - vec3<f32>(self_.g1.y) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g1.y) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g1 * vec2<f32>(-other.g5.w) + self_.g1 * vec2<f32>(other.g0.x));
}

fn round_point__anti_wedge_dot__plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.y, self_.g1.y, self_.g1.y, self_.g1.x) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__round_point(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.y) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), self_.g0 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__scalar(self_: RoundPoint, other: Scalar) -> Sphere {
    return Sphere(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn round_point__anti_wedge_dot__sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x) - vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge_dot__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g1.y, self_.g1.y, self_.g1.y, self_.g1.x) * other.g1, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z));
}

fn round_point__anti_wedge_dot__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__anti_wedge_dot__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__anti_wedge_dot__circle(self_: Scalar, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g0.w));
}

fn scalar__anti_wedge_dot__dipole(self_: Scalar, other: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g2.w), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1, vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z));
}

fn scalar__anti_wedge_dot__dual_num(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0));
}

fn scalar__anti_wedge_dot__flat_point(self_: Scalar, other: FlatPoint) -> Circle {
    return Circle(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__anti_wedge_dot__flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__anti_wedge_dot__line(self_: Scalar, other: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn scalar__anti_wedge_dot__motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__anti_wedge_dot__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0) * other.g9, vec2<f32>(0.0) - vec2<f32>(self_.g0) * other.g10, vec3<f32>(self_.g0) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0) * other.g7, vec4<f32>(self_.g0) * vec4<f32>(other.g8.x, other.g8.y, other.g8.z, -other.g6.w), vec4<f32>(self_.g0) * vec4<f32>(-other.g3.x, -other.g3.y, -other.g3.z, other.g5.w), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g4, vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1, vec2<f32>(self_.g0) * other.g2);
}

fn scalar__anti_wedge_dot__plane(self_: Scalar, other: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0) * vec2<f32>(0.0, -other.g0.w));
}

fn scalar__anti_wedge_dot__rotor(self_: Scalar, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__anti_wedge_dot__round_point(self_: Scalar, other: RoundPoint) -> Sphere {
    return Sphere(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn scalar__anti_wedge_dot__scalar(self_: Scalar, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn scalar__anti_wedge_dot__sphere(self_: Scalar, other: Sphere) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0) * other.g0, vec2<f32>(0.0) - vec2<f32>(self_.g0) * other.g1);
}

fn scalar__anti_wedge_dot__transflector(self_: Scalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn scalar__anti_wedge_dot__translator(self_: Scalar, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__anti_scalar(self_: Sphere, other: AntiScalar) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn sphere__anti_wedge_dot__circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * other.g2 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * other.g2 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, other.g2.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__anti_wedge_dot__dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g1.y) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(other.g2.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g2.w) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - vec3<f32>(self_.g1.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__dual_num(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), vec2<f32>(0.0) - self_.g1 * vec2<f32>(other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec2<f32>(other.g0.y));
}

fn sphere__anti_wedge_dot__flat_point(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g1.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z));
}

fn sphere__anti_wedge_dot__motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__anti_wedge_dot__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g9.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g9.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g9.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.y, -other.g10.y) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.x, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g1.y) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g1 * vec2<f32>(other.g5.w) - self_.g1 * vec2<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g1.x) * other.g7 + vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g6.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g6.w) + vec3<f32>(self_.g1.x) * other.g8 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.y, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g8.z, -other.g2.y, other.g8.x, -other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g8.y, -other.g8.x, -other.g2.y, -other.g7.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g10.x, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, -other.g10.x, other.g3.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, -other.g10.x, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, other.g10.y) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g4.x, -other.g4.y, -other.g4.z, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g1.y) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g1.y) * other.g9 - vec3<f32>(self_.g1.y) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) + vec3<f32>(self_.g1.x) * other.g8 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, other.g8.z) + self_.g1 * vec2<f32>(other.g6.w) + self_.g1 * vec2<f32>(other.g0.y));
}

fn sphere__anti_wedge_dot__plane(self_: Sphere, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__anti_wedge_dot__round_point(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g1.y, -other.g1.y, -other.g1.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) - vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__scalar(self_: Sphere, other: Scalar) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0), vec2<f32>(0.0) - self_.g1 * vec2<f32>(other.g0));
}

fn sphere__anti_wedge_dot__sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.y) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.w), vec3<f32>(self_.g1.x) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge_dot__translator(self_: Sphere, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn transflector__anti_wedge_dot__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__anti_wedge_dot__circle(self_: Transflector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn transflector__anti_wedge_dot__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g2.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g2.w) - vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) - vec3<f32>(self_.g1.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge_dot__dual_num(self_: Transflector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y));
}

fn transflector__anti_wedge_dot__flat_point(self_: Transflector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge_dot__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge_dot__line(self_: Transflector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z));
}

fn transflector__anti_wedge_dot__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn transflector__anti_wedge_dot__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, other.g3.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g9.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g9.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g9.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g2.x, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, other.g0.x, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, other.g0.x) - vec3<f32>(self_.g1.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g6.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g6.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g2.y, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g8.z, -other.g2.y, other.g8.x, -other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g8.y, -other.g8.x, -other.g2.y, -other.g7.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, -other.g2.x) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g10.x, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, -other.g10.x, other.g3.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, -other.g10.x, -other.g4.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) - vec3<f32>(self_.g1.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, -other.g5.w, other.g9.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, -other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, -other.g5.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, -other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g5.z, other.g10.y, -other.g5.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g5.y, other.g5.x, other.g10.y) - vec3<f32>(self_.g1.w) * other.g9 - vec3<f32>(self_.g1.w) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g6.z, -other.g2.x, other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g6.y, -other.g6.x, -other.g2.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g0.y) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g6.x, other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g6.y, other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g6.z, other.g8.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g6.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y));
}

fn transflector__anti_wedge_dot__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge_dot__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, other.g0.w, -other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(-1.0, 1.0, 1.0, 1.0));
}

fn transflector__anti_wedge_dot__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.x), self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + self_.g1.xyzx * vec4<f32>(-other.g1.y, -other.g1.y, -other.g1.y, 0.0) - vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn transflector__anti_wedge_dot__scalar(self_: Transflector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge_dot__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g1.x), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g1.x), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge_dot__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge_dot__translator(self_: Transflector, other: Translator) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn translator__anti_wedge_dot__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__anti_wedge_dot__circle(self_: Translator, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge_dot__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g2.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g2.w, other.g0.z) + vec4<f32>(self_.g0.w) * other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z));
}

fn translator__anti_wedge_dot__dual_num(self_: Translator, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0.xyzx * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge_dot__flat_point(self_: Translator, other: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge_dot__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge_dot__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge_dot__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge_dot__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g6.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g3.z, other.g10.x, -other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g3.y, other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g4, vec4<f32>(self_.g0.x) * vec4<f32>(other.g5.w, -other.g9.z, other.g9.y, other.g3.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g9.z, other.g5.w, -other.g9.x, other.g3.y) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g4.z, other.g0.x, -other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g9.y, other.g9.x, other.g5.w, other.g3.z) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g4.y, other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * other.g5, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g6.z) + vec4<f32>(self_.g0.w) * other.g6, vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, other.g2.x) + vec3<f32>(self_.g0.w) * other.g7, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, -other.g6.w, -other.g7.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g6.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g8, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, -other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, -other.g10.x) + vec3<f32>(self_.g0.w) * other.g9, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g0.w) * other.g10);
}

fn translator__anti_wedge_dot__plane(self_: Translator, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge_dot__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge_dot__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge_dot__scalar(self_: Translator, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge_dot__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge_dot__transflector(self_: Translator, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge_dot__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn anti_scalar__wedge_dot__anti_scalar(self_: AntiScalar, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn anti_scalar__wedge_dot__circle(self_: AntiScalar, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.w));
}

fn anti_scalar__wedge_dot__dipole(self_: AntiScalar, other: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g2.w), vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z));
}

fn anti_scalar__wedge_dot__dual_num(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0));
}

fn anti_scalar__wedge_dot__flat_point(self_: AntiScalar, other: FlatPoint) -> Circle {
    return Circle(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn anti_scalar__wedge_dot__flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__wedge_dot__line(self_: AntiScalar, other: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0));
}

fn anti_scalar__wedge_dot__motor(self_: AntiScalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__wedge_dot__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g9, vec2<f32>(self_.g0) * other.g10, vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g7, vec4<f32>(self_.g0) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g6.w), vec4<f32>(self_.g0) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, -other.g5.w), vec3<f32>(self_.g0) * other.g4, vec3<f32>(self_.g0) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z), vec3<f32>(self_.g0) * other.g1, vec2<f32>(0.0) - vec2<f32>(self_.g0) * other.g2);
}

fn anti_scalar__wedge_dot__plane(self_: AntiScalar, other: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0) * vec2<f32>(0.0, other.g0.w));
}

fn anti_scalar__wedge_dot__rotor(self_: AntiScalar, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__wedge_dot__round_point(self_: AntiScalar, other: RoundPoint) -> Sphere {
    return Sphere(vec3<f32>(self_.g0) * other.g0, vec2<f32>(0.0) - vec2<f32>(self_.g0) * other.g1);
}

fn anti_scalar__wedge_dot__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__wedge_dot__sphere(self_: AntiScalar, other: Sphere) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn anti_scalar__wedge_dot__transflector(self_: AntiScalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__wedge_dot__translator(self_: AntiScalar, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__anti_scalar(self_: Circle, other: AntiScalar) -> Dipole {
    return Dipole(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn circle__wedge_dot__circle(self_: Circle, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z));
}

fn circle__wedge_dot__dipole(self_: Circle, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g2.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 - self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.w, other.g1.z, -other.g1.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g2.w, other.g1.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g2.w, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__dual_num(self_: Circle, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(-other.g0.y, -other.g0.y, -other.g0.y, 0.0), self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__flat_point(self_: Circle, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) - vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__line(self_: Circle, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z));
}

fn circle__wedge_dot__motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z));
}

fn circle__wedge_dot__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g8.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g8.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g8.z, -other.g5.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g6.w, other.g5.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g7.x, -other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g7.y, -other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g7.z, -other.g4.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g6.x, -other.g3.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g6.y, -other.g3.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g6.z, -other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g0.w) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(1.0, -1.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, other.g6.w, -other.g7.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g6.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.y) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g8.z, -other.g2.y, -other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g8.y, other.g8.x, -other.g2.y) - vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g8.x, other.g8.y, other.g8.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g2.y, -other.g8.z, other.g8.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g8.z, -other.g2.y, -other.g8.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g8.y, other.g8.x, -other.g2.y, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g5.w, other.g9.z, -other.g9.y, -other.g5.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g9.z, other.g5.w, other.g9.x, -other.g5.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g9.y, -other.g9.x, other.g5.w, -other.g5.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.x, other.g3.z, -other.g3.y, other.g9.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g10.x, other.g3.x, other.g9.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g10.x, other.g9.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) - vec3<f32>(self_.g0.w) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g0.w) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g6.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g6.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec2<f32>(self_.g0.x) * vec2<f32>(other.g7.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g7.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g7.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * other.g2 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g7.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g7.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g7.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z));
}

fn circle__wedge_dot__plane(self_: Circle, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) - vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z));
}

fn circle__wedge_dot__round_point(self_: Circle, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g1.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g0.w) * other.g0 - self_.g2 * vec3<f32>(other.g1.x), vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, -other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, -other.g1.y, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g2 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z));
}

fn circle__wedge_dot__scalar(self_: Circle, other: Scalar) -> Circle {
    return Circle(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn circle__wedge_dot__sphere(self_: Circle, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g2 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.x, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g0.w) * other.g0 + self_.g2 * vec3<f32>(other.g1.x), self_.g1 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) - vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__wedge_dot__translator(self_: Circle, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn dipole__wedge_dot__anti_scalar(self_: Dipole, other: AntiScalar) -> Circle {
    return Circle(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), self_.g1 * vec3<f32>(other.g0), vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g0));
}

fn dipole__wedge_dot__circle(self_: Dipole, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g2.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, other.g1.z, -other.g1.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, -other.g0.w, other.g1.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, -other.g0.w, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g2.wwwz * other.g0.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g2.w) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__wedge_dot__dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.w) * vec2<f32>(other.g2.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g2.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g2.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g2.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, -other.g2.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, -other.g2.w, -other.g0.z) + vec4<f32>(self_.g2.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z));
}

fn dipole__wedge_dot__dual_num(self_: Dipole, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec4<f32>(other.g0.x), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__wedge_dot__flat_point(self_: Dipole, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + self_.g2.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn dipole__wedge_dot__flector(self_: Dipole, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g1.w));
}

fn dipole__wedge_dot__line(self_: Dipole, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g2.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__wedge_dot__motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g2.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g2.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__wedge_dot__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g5.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g5.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g5.z, other.g8.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g4.x, other.g7.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g4.y, other.g7.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g4.z, other.g7.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g6.z) + vec2<f32>(self_.g2.w) * vec2<f32>(other.g5.w, -other.g6.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g6.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g6.w) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g2.w) * other.g7, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.w) * other.g2 * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) - vec3<f32>(self_.g2.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g2.w) * other.g9, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g5.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g5.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g5.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.y, other.g5.z, -other.g5.y, -other.g9.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g5.z, other.g10.y, other.g5.x, -other.g9.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g5.y, -other.g5.x, other.g10.y, -other.g9.z) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g5.w, -other.g9.z, other.g9.y, -other.g3.x) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g9.z, -other.g5.w, -other.g9.x, -other.g3.y) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g4.z, other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g9.y, other.g9.x, -other.g5.w, -other.g3.z) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(other.g5.x, other.g5.y, other.g5.z, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g6.w, other.g7.z, -other.g7.y, -other.g8.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g7.z, -other.g6.w, other.g7.x, -other.g8.y) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g7.y, -other.g7.x, -other.g6.w, -other.g8.z) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g2.x, other.g6.z, -other.g6.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g6.z, other.g2.x, other.g6.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g6.y, -other.g6.x, other.g2.x, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6.z) - vec4<f32>(self_.g2.w) * vec4<f32>(other.g6.x, other.g6.y, other.g6.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g7.z, -other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g7.z, other.g0.y, other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g6.z, other.g2.x, other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g6.y, -other.g6.x, other.g2.x) - vec3<f32>(self_.g2.w) * other.g1, vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g6.w, other.g7.z, -other.g7.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g7.z, other.g6.w, other.g7.x) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g6.w) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.w) * other.g8, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, -other.g10.y, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, -other.g10.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g2.w) * other.g4, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g2.w) * other.g10 * vec2<f32>(-1.0, 1.0));
}

fn dipole__wedge_dot__plane(self_: Dipole, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g0.w));
}

fn dipole__wedge_dot__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__wedge_dot__round_point(self_: Dipole, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g2.w) * other.g0, self_.g1 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__wedge_dot__scalar(self_: Dipole, other: Scalar) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec4<f32>(other.g0));
}

fn dipole__wedge_dot__sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g1.x), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x) + vec3<f32>(self_.g2.w) * other.g0, vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * other.g1 * vec2<f32>(-1.0, 1.0));
}

fn dipole__wedge_dot__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g2.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g1.w));
}

fn dipole__wedge_dot__translator(self_: Dipole, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g2.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__wedge_dot__anti_scalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0.yx * vec2<f32>(-other.g0));
}

fn dual_num__wedge_dot__circle(self_: DualNum, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.w), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__wedge_dot__dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g0.x) * other.g2, vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g2.w), vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__wedge_dot__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0));
}

fn dual_num__wedge_dot__flat_point(self_: DualNum, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__wedge_dot__flector(self_: DualNum, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w));
}

fn dual_num__wedge_dot__line(self_: DualNum, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__wedge_dot__motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__wedge_dot__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * other.g1 - vec3<f32>(self_.g0.y) * other.g9, vec2<f32>(self_.g0.x) * other.g2 + vec2<f32>(self_.g0.y) * other.g10, vec3<f32>(self_.g0.x) * other.g3 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * other.g4 - vec3<f32>(self_.g0.y) * other.g7, vec4<f32>(self_.g0.x) * other.g5 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g6.w), vec4<f32>(self_.g0.x) * other.g6 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, -other.g5.w), vec3<f32>(self_.g0.x) * other.g7 + vec3<f32>(self_.g0.y) * other.g4, vec3<f32>(self_.g0.x) * other.g8 + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z), vec3<f32>(self_.g0.x) * other.g9 + vec3<f32>(self_.g0.y) * other.g1, vec2<f32>(self_.g0.x) * other.g10 - vec2<f32>(self_.g0.y) * other.g2);
}

fn dual_num__wedge_dot__plane(self_: DualNum, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w));
}

fn dual_num__wedge_dot__rotor(self_: DualNum, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__wedge_dot__round_point(self_: DualNum, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(self_.g0.x) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(0.0) - vec2<f32>(self_.g0.y) * other.g1);
}

fn dual_num__wedge_dot__scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(other.g0));
}

fn dual_num__wedge_dot__sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(self_.g0.x) * other.g1);
}

fn dual_num__wedge_dot__transflector(self_: DualNum, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w));
}

fn dual_num__wedge_dot__translator(self_: DualNum, other: Translator) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__anti_scalar(self_: FlatPoint, other: AntiScalar) -> Circle {
    return Circle(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn flat_point__wedge_dot__circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g2.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, -other.g2.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, -other.g2.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z));
}

fn flat_point__wedge_dot__dual_num(self_: FlatPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__flat_point(self_: FlatPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w));
}

fn flat_point__wedge_dot__line(self_: FlatPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g6.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g5.w, -other.g6.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g0.w) * other.g7, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g0.w) * other.g2 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g9, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g5.w, -other.g9.z, other.g9.y, -other.g3.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g9.z, -other.g5.w, -other.g9.x, -other.g3.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g9.y, other.g9.x, -other.g5.w, -other.g3.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g5.x, other.g5.y, other.g5.z, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6.z) - vec4<f32>(self_.g0.w) * vec4<f32>(other.g6.x, other.g6.y, other.g6.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g6.z, other.g2.x, other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g6.y, -other.g6.x, other.g2.x) - vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, other.g7.z, -other.g7.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g7.z, other.g6.w, other.g7.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g6.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g8, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g4, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(-1.0, 1.0));
}

fn flat_point__wedge_dot__plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w));
}

fn flat_point__wedge_dot__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__round_point(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__wedge_dot__scalar(self_: FlatPoint, other: Scalar) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0));
}

fn flat_point__wedge_dot__sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0));
}

fn flat_point__wedge_dot__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w));
}

fn flat_point__wedge_dot__translator(self_: FlatPoint, other: Translator) -> Circle {
    return Circle(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector__wedge_dot__anti_scalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__wedge_dot__circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__wedge_dot__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g2.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, -other.g2.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, -other.g2.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g2.w));
}

fn flector__wedge_dot__dual_num(self_: Flector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.x));
}

fn flector__wedge_dot__flat_point(self_: Flector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn flector__wedge_dot__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn flector__wedge_dot__line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__wedge_dot__motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__wedge_dot__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g6.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g5.w, -other.g6.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g9.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g9.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g9.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g10.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g0.w) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g0.w) * other.g2 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, -other.g8.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g6.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g1.w) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g5.w, -other.g9.z, other.g9.y, -other.g3.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g9.z, -other.g5.w, -other.g9.x, -other.g3.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g9.y, other.g9.x, -other.g5.w, -other.g3.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g5.x, other.g5.y, other.g5.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.y, other.g5.z, -other.g5.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g5.z, other.g10.y, other.g5.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g5.y, -other.g5.x, other.g10.y, -other.g4.z) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g9.x, -other.g9.y, -other.g9.z, other.g10.x) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6.z) - vec4<f32>(self_.g0.w) * vec4<f32>(other.g6.x, other.g6.y, other.g6.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g2.x, -other.g6.z, other.g6.y, other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g6.z, -other.g2.x, -other.g6.x, other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g6.y, other.g6.x, -other.g2.x, other.g7.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g6.z, other.g2.x, other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g6.y, -other.g6.x, other.g2.x) - vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g6.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g6.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, other.g7.z, -other.g7.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g7.z, other.g6.w, other.g7.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g6.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g8 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g1.w) * other.g7 + vec3<f32>(self_.g1.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g1.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.x));
}

fn flector__wedge_dot__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + self_.g1.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w));
}

fn flector__wedge_dot__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__wedge_dot__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g1.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__wedge_dot__scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__wedge_dot__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) + vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + self_.g1.xyzx * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0));
}

fn flector__wedge_dot__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn flector__wedge_dot__translator(self_: Flector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__anti_scalar(self_: Line, other: AntiScalar) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn line__wedge_dot__circle(self_: Line, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z));
}

fn line__wedge_dot__dipole(self_: Line, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__dual_num(self_: Line, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.y), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0.y, -other.g0.y, -other.g0.y, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__flat_point(self_: Line, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn line__wedge_dot__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn line__wedge_dot__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g7.x, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g7.y, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g7.z, -other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, -other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.y, -other.g8.z, other.g8.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g8.z, -other.g2.y, -other.g8.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g8.y, other.g8.x, -other.g2.y, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.x, other.g3.z, -other.g3.y, other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g10.x, other.g3.x, other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g10.x, other.g9.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g6.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g6.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g7.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g7.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g7.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z));
}

fn line__wedge_dot__plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__rotor(self_: Line, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn line__wedge_dot__round_point(self_: Line, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g1.y, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn line__wedge_dot__scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__wedge_dot__sphere(self_: Line, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.x, other.g0.z), self_.g1 * vec3<f32>(other.g1.x), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__transflector(self_: Line, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__wedge_dot__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn motor__wedge_dot__anti_scalar(self_: Motor, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z));
}

fn motor__wedge_dot__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g2.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__dual_num(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0.y, -other.g0.y, -other.g0.y, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__flat_point(self_: Motor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn motor__wedge_dot__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn motor__wedge_dot__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g7.x, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g7.y, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g7.z, -other.g4.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, -other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) - vec3<f32>(self_.g0.w) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g0.w) * other.g10 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) - vec3<f32>(self_.g0.w) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.y, -other.g8.z, other.g8.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g8.z, -other.g2.y, -other.g8.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g8.y, other.g8.x, -other.g2.y, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g6.w) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.x, other.g3.z, -other.g3.y, other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g10.x, other.g3.x, other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g10.x, other.g9.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, -other.g5.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g6.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g6.w) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x), vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) - vec2<f32>(self_.g0.w) * other.g2 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g7.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g7.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g7.z) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z));
}

fn motor__wedge_dot__plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn motor__wedge_dot__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g1.y, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0 - self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.w) * other.g1 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z));
}

fn motor__wedge_dot__scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__wedge_dot__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0 - self_.g1 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.w) * other.g1 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.x, other.g0.z), self_.g1 * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__wedge_dot__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn multi_vector__wedge_dot__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-other.g0), vec3<f32>(0.0) - self_.g9 * vec3<f32>(other.g0), self_.g10 * vec2<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g7 * vec3<f32>(other.g0), vec4<f32>(self_.g6.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, self_.g8.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0), vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), self_.g4 * vec3<f32>(other.g0), vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), vec2<f32>(0.0) - self_.g2 * vec2<f32>(other.g0));
}

fn multi_vector__wedge_dot__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g2.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g2.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g2.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g7.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g7.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g8.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g8.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g8.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * other.g2 - vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g10 * vec2<f32>(-other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g1.z, other.g0.w, -other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g1.y, other.g1.x, other.g0.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g1 - self_.g1 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g2.x) * other.g2 - vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g6.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g8.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g0.w, other.g1.z, -other.g1.y, -other.g2.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, -other.g0.w, other.g1.x, -other.g2.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, -other.g0.w, -other.g2.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g5.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g5.wwwz * other.g0.xyzz * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g9.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g9.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g9 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * other.g2 + vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g5.w) * other.g2 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g10.y) * other.g1, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * other.g2 - vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g6.w) * other.g1 + self_.g7 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, other.g2.x) + vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, other.g2.y) + vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g1.z));
}

fn multi_vector__wedge_dot__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g5.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g5.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.w) * vec2<f32>(other.g2.w, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, -other.g2.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g2.y) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g6.w) * other.g1 - self_.g7 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, other.g2.z) + self_.g2 * vec2<f32>(other.g2.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, other.g2.w, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g2.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g9 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g10.y) * other.g0, vec4<f32>(self_.g0.x) * other.g2 + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g5.x) * vec4<f32>(-other.g2.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g5.y) * vec4<f32>(-other.g1.z, -other.g2.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g5.z) * vec4<f32>(other.g1.y, -other.g1.x, -other.g2.w, -other.g0.z) + vec4<f32>(self_.g5.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g2.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g2.w, other.g1.z, -other.g1.y, -other.g2.x) + vec4<f32>(self_.g6.y) * vec4<f32>(-other.g1.z, other.g2.w, other.g1.x, -other.g2.y) + vec4<f32>(self_.g6.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g2.w, -other.g2.z) + vec4<f32>(self_.g6.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g8.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g8.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(self_.g0.y) * other.g1 - self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g2.y) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g2.y) * other.g1 - vec3<f32>(self_.g6.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + self_.g4 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g10.y) * other.g0, vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g10 * vec2<f32>(other.g2.w));
}

fn multi_vector__wedge_dot__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0), self_.g1 * vec3<f32>(other.g0.x) - self_.g9 * vec3<f32>(other.g0.y), self_.g2 * vec2<f32>(other.g0.x) + self_.g10 * vec2<f32>(other.g0.y), self_.g3 * vec3<f32>(other.g0.x) - vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.y), self_.g4 * vec3<f32>(other.g0.x) - self_.g7 * vec3<f32>(other.g0.y), self_.g5 * vec4<f32>(other.g0.x) + vec4<f32>(self_.g6.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, self_.g8.x) * vec4<f32>(-other.g0.y, -other.g0.y, -other.g0.y, 0.0), vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g6 * vec4<f32>(other.g0.x), self_.g4 * vec3<f32>(other.g0.y) + self_.g7 * vec3<f32>(other.g0.x), vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g0.y) + self_.g8 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.y) + self_.g9 * vec3<f32>(other.g0.x), vec2<f32>(0.0) - self_.g2 * vec2<f32>(other.g0.y) + self_.g10 * vec2<f32>(other.g0.x));
}

fn multi_vector__wedge_dot__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.w) * vec2<f32>(other.g0.w, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g7 * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z), self_.g3 * vec3<f32>(other.g0.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g9 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + self_.g5.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g6.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g8 * vec3<f32>(other.g0.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w));
}

fn multi_vector__wedge_dot__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.w) * vec2<f32>(other.g0.w, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g9.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g9.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g9.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g1.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g7.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) - vec2<f32>(self_.g6.z, self_.g6.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g3.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g5.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) - vec4<f32>(self_.g10.y, self_.g10.y, self_.g10.y, self_.g10.x) * other.g1, vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g2.x) * other.g1 + vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g6.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g7.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g3.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w));
}

fn multi_vector__wedge_dot__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g1, vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g2.x) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 - vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g6.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g10.y) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g6.w) * other.g0, vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z));
}

fn multi_vector__wedge_dot__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) + vec3<f32>(self_.g10.x) * other.g1, vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g1.z) + self_.g10 * vec2<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) - vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g7.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g6.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g6.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g8.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g5.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) - self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z));
}

fn multi_vector__wedge_dot__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g9.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g9.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g9.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g2.y, other.g10.y) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g2.x, other.g10.x) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g5.x, other.g8.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g5.y, other.g8.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g5.z, other.g8.z) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g4.x, other.g7.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g4.y, other.g7.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g4.z, other.g7.z) - vec2<f32>(self_.g5.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g5.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g5.z) * vec2<f32>(other.g3.z, other.g6.z) + vec2<f32>(self_.g5.w) * vec2<f32>(other.g5.w, -other.g6.w) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g8.x, -other.g5.x) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g8.y, -other.g5.y) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g8.z, -other.g5.z) - vec2<f32>(self_.g6.w) * vec2<f32>(other.g6.w, other.g5.w) + vec2<f32>(self_.g7.x) * vec2<f32>(other.g7.x, -other.g4.x) + vec2<f32>(self_.g7.y) * vec2<f32>(other.g7.y, -other.g4.y) + vec2<f32>(self_.g7.z) * vec2<f32>(other.g7.z, -other.g4.z) + vec2<f32>(self_.g8.x) * vec2<f32>(other.g6.x, -other.g3.x) + vec2<f32>(self_.g8.y) * vec2<f32>(other.g6.y, -other.g3.y) + vec2<f32>(self_.g8.z) * vec2<f32>(other.g6.z, -other.g3.z) + vec2<f32>(self_.g9.x) * vec2<f32>(-other.g9.x, other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(-other.g9.y, other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(-other.g9.z, other.g1.z) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g10.y, other.g2.y) + vec2<f32>(self_.g10.y) * vec2<f32>(other.g10.x, other.g2.x), vec3<f32>(self_.g0.x) * other.g1 - vec3<f32>(self_.g0.y) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g2.y) * other.g3 + vec3<f32>(self_.g3.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, other.g6.w, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g6.w) + vec3<f32>(self_.g5.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g5.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g5.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g5.w) * other.g7 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g6.w) * other.g4 + vec3<f32>(self_.g7.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) + vec3<f32>(self_.g10.x) * other.g8 - vec3<f32>(self_.g10.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * other.g2 + vec2<f32>(self_.g0.y) * other.g10 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g3.x, other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g3.y, other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g3.z, other.g5.z) + self_.g2 * vec2<f32>(other.g5.w) + self_.g2 * vec2<f32>(other.g0.x) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(other.g1.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g5.w) * other.g2 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g6.w) * other.g10 * vec2<f32>(1.0, -1.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g10 * vec2<f32>(-other.g6.w) + self_.g10 * vec2<f32>(other.g0.y), vec3<f32>(self_.g0.x) * other.g3 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g2.x) * other.g7 + vec3<f32>(self_.g2.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) - vec3<f32>(self_.g5.w) * other.g3 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g6.w, -other.g7.z, other.g7.y) + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g7.z, other.g6.w, -other.g7.x) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, -other.g0.y, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g7.y, other.g7.x, other.g6.w) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g0.y) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g7.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x) + vec3<f32>(self_.g10.x) * other.g9 + vec3<f32>(self_.g10.x) * other.g4, vec3<f32>(self_.g0.x) * other.g4 - vec3<f32>(self_.g0.y) * other.g7 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g6.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g6.w) - vec3<f32>(self_.g2.x) * other.g8 - vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g5.w) * other.g9 + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g2.y, -other.g8.z, other.g8.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g8.z, -other.g2.y, -other.g8.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g8.y, other.g8.x, -other.g2.y) - vec3<f32>(self_.g6.w) * other.g1 + vec3<f32>(self_.g7.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g10.y) * other.g3, vec4<f32>(self_.g0.x) * other.g5 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g6.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g2.y, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g8.z, other.g2.y, other.g8.x, -other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g8.y, -other.g8.x, other.g2.y, -other.g7.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) - vec4<f32>(self_.g2.y) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g5.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g5.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g5.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g10.y, other.g5.z, -other.g5.y, -other.g9.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g5.z, other.g10.y, other.g5.x, -other.g9.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g5.y, -other.g5.x, other.g10.y, -other.g9.z) + vec4<f32>(self_.g5.x) * vec4<f32>(-other.g5.w, -other.g9.z, other.g9.y, -other.g3.x) + vec4<f32>(self_.g5.x) * vec4<f32>(other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g9.z, -other.g5.w, -other.g9.x, -other.g3.y) + vec4<f32>(self_.g5.y) * vec4<f32>(-other.g4.z, other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g9.y, other.g9.x, -other.g5.w, -other.g3.z) + vec4<f32>(self_.g5.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(other.g5.x, other.g5.y, other.g5.z, other.g0.x) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.y) + vec4<f32>(self_.g6.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g8.z) + vec4<f32>(self_.g6.w) * vec4<f32>(other.g8.x, other.g8.y, other.g8.z, other.g0.y) + vec4<f32>(self_.g7.x) * vec4<f32>(-other.g2.y, -other.g8.z, other.g8.y, -other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g8.z, -other.g2.y, -other.g8.x, -other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g8.y, other.g8.x, -other.g2.y, -other.g1.z) + vec4<f32>(self_.g8.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g8.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(other.g10.y, other.g5.z, -other.g5.y, -other.g4.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g5.z, other.g10.y, other.g5.x, -other.g4.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g5.y, -other.g5.x, other.g10.y, -other.g4.z) + vec4<f32>(self_.g10.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.y) + vec4<f32>(self_.g10.y) * vec4<f32>(-other.g9.x, -other.g9.y, -other.g9.z, other.g10.x) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0), vec4<f32>(self_.g0.x) * other.g6 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, -other.g5.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.x, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g10.x, other.g3.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g10.x, -other.g4.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, other.g10.y) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g6.w, other.g7.z, -other.g7.y, -other.g8.x) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g7.z, -other.g6.w, other.g7.x, -other.g8.y) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g7.y, -other.g7.x, -other.g6.w, -other.g8.z) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g2.x, other.g6.z, -other.g6.y, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g6.z, other.g2.x, other.g6.x, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g6.y, -other.g6.x, other.g2.x, -other.g1.z) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6.x) + vec4<f32>(self_.g5.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6.y) + vec4<f32>(self_.g5.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6.z) - vec4<f32>(self_.g5.w) * vec4<f32>(other.g6.x, other.g6.y, other.g6.z, other.g0.y) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g5.w, other.g9.z, -other.g9.y, -other.g5.x) + vec4<f32>(self_.g6.x) * vec4<f32>(other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g6.y) * vec4<f32>(-other.g9.z, other.g5.w, other.g9.x, -other.g5.y) + vec4<f32>(self_.g6.y) * vec4<f32>(-other.g4.z, other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g6.z) * vec4<f32>(other.g9.y, -other.g9.x, other.g5.w, -other.g5.z) + vec4<f32>(self_.g6.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g6.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.x) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g10.x, other.g3.z, -other.g3.y, other.g9.x) + vec4<f32>(self_.g7.y) * vec4<f32>(-other.g3.z, other.g10.x, other.g3.x, other.g9.y) + vec4<f32>(self_.g7.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g10.x, other.g9.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g8.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g8.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z) + vec4<f32>(self_.g9.x) * vec4<f32>(-other.g2.x, -other.g6.z, other.g6.y, other.g7.x) + vec4<f32>(self_.g9.y) * vec4<f32>(other.g6.z, -other.g2.x, -other.g6.x, other.g7.y) + vec4<f32>(self_.g9.z) * vec4<f32>(-other.g6.y, other.g6.x, -other.g2.x, other.g7.z) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, other.g2.y) + vec4<f32>(self_.g10.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g10.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x), vec3<f32>(self_.g0.x) * other.g7 + vec3<f32>(self_.g0.y) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g2.y) * other.g3 + vec3<f32>(self_.g3.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.y, other.g7.z, -other.g7.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g7.z, other.g0.y, other.g7.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g0.y) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g6.z, other.g2.x, other.g6.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g6.y, -other.g6.x, other.g2.x) - vec3<f32>(self_.g5.w) * other.g1 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) - vec3<f32>(self_.g6.w) * other.g9 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g1.z, -other.g6.w, -other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g6.w) + vec3<f32>(self_.g10.x) * other.g8 + vec3<f32>(self_.g10.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * other.g8 + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g5.z, -other.g10.y, -other.g5.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g5.y, other.g5.x, -other.g10.y) - vec3<f32>(self_.g2.y) * other.g9 + vec3<f32>(self_.g2.y) * other.g4 + vec3<f32>(self_.g4.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g6.w, other.g7.z, -other.g7.y) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g7.z, other.g6.w, other.g7.x) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g6.w) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g5.w) * other.g8 - vec3<f32>(self_.g6.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g7.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g8.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g8.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g8.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g10.y) * other.g7 + vec3<f32>(self_.g10.y) * other.g1, vec3<f32>(self_.g0.x) * other.g9 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g7.z, -other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g7.z, other.g0.y, other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g0.y) + vec3<f32>(self_.g2.x) * other.g8 - vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g3.x) * vec3<f32>(-other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g5.z, -other.g10.y, -other.g5.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g5.y, other.g5.x, -other.g10.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g5.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g5.w) * other.g4 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g6.w) * other.g7 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g1.z, other.g6.w, other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g6.w) + vec3<f32>(self_.g8.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) + vec3<f32>(self_.g9.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) - vec3<f32>(self_.g10.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g10.y) * other.g3, vec2<f32>(self_.g0.x) * other.g10 - vec2<f32>(self_.g0.y) * other.g2 + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g2 * vec2<f32>(other.g6.w) - self_.g2 * vec2<f32>(other.g0.y) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g5.w) * other.g10 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g7.x, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g7.y, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g7.z, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g6.w) * other.g2 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g7.x) * vec2<f32>(other.g6.x, other.g8.x) + vec2<f32>(self_.g7.y) * vec2<f32>(other.g6.y, other.g8.y) + vec2<f32>(self_.g7.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g7.x) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g7.y) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g7.z) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g10 * vec2<f32>(other.g5.w) + self_.g10 * vec2<f32>(other.g0.x));
}

fn multi_vector__wedge_dot__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g9.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g9.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g9.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) - vec2<f32>(self_.g6.z, self_.g6.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g3 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g9.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) - vec4<f32>(self_.g10.y, self_.g10.y, self_.g10.y, self_.g10.x) * other.g0, vec4<f32>(self_.g2.x) * other.g0 + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g6.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g6.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g7 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) - self_.g3 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g0.w));
}

fn multi_vector__wedge_dot__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g7.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g6.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g8.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g5.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(0.0) - self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z));
}

fn multi_vector__wedge_dot__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g10.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g10.y) * vec2<f32>(0.0, other.g1.x), vec3<f32>(self_.g0.x) * other.g0 + self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * other.g1 + vec2<f32>(self_.g3.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g5.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g2.x) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g7 * vec3<f32>(other.g1.x), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g6.w) * other.g0 - self_.g8 * vec3<f32>(other.g1.x), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) - vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x) + vec4<f32>(self_.g7.x) * vec4<f32>(-other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, -other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, -other.g1.y, -other.g0.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z) + vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g9.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g10.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g1.y) + vec4<f32>(self_.g10.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x), self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), self_.g4 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g9 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g10.y) * other.g0, vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g8 * vec3<f32>(other.g1.x), vec2<f32>(0.0) - vec2<f32>(self_.g0.y) * other.g1 + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z));
}

fn multi_vector__wedge_dot__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec2<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec3<f32>(other.g0), self_.g5 * vec4<f32>(other.g0), self_.g6 * vec4<f32>(other.g0), self_.g7 * vec3<f32>(other.g0), self_.g8 * vec3<f32>(other.g0), self_.g9 * vec3<f32>(other.g0), self_.g10 * vec2<f32>(other.g0));
}

fn multi_vector__wedge_dot__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g9.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g9.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g9.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g10.y) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g8 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.y) * other.g1 + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * other.g1 * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g1.x) - self_.g9 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g10.x) * other.g0, self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x) + vec3<f32>(self_.g5.w) * other.g0 + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g4.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g9.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g10.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g10.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g1.x), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g1.x, other.g1.x, other.g1.x, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.y) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g6.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g6.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g1.x, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g6.w) * other.g0 + self_.g8 * vec3<f32>(other.g1.x), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g2.y) * other.g0 + self_.g7 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 - self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * other.g1 + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * other.g1 * vec2<f32>(-1.0, 1.0));
}

fn multi_vector__wedge_dot__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g9.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g9.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g1.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) - vec2<f32>(self_.g6.z, self_.g6.w) * vec2<f32>(other.g1.z, other.g1.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g3.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g5.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g5.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g5.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g5.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) - vec4<f32>(self_.g10.y, self_.g10.y, self_.g10.y, self_.g10.x) * other.g1, vec4<f32>(self_.g2.x) * other.g1 + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g6.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * other.g0 + vec3<f32>(self_.g6.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) - vec3<f32>(self_.g6.w) * other.g0 + vec3<f32>(self_.g7.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g3.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g10.x) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z));
}

fn multi_vector__wedge_dot__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g9 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - self_.g7 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g6.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g6.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g6.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g6.w) * other.g0 + vec4<f32>(self_.g7.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g7.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g7.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, self_.g8.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g5.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g5.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) - self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, other.g0.z));
}

fn plane__wedge_dot__anti_scalar(self_: Plane, other: AntiScalar) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0));
}

fn plane__wedge_dot__circle(self_: Plane, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__wedge_dot__dipole(self_: Plane, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.w) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g2.w));
}

fn plane__wedge_dot__dual_num(self_: Plane, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x));
}

fn plane__wedge_dot__flat_point(self_: Plane, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w));
}

fn plane__wedge_dot__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w));
}

fn plane__wedge_dot__line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__wedge_dot__motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__wedge_dot__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g9.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g9.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g9.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g10.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, -other.g8.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g6.w) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, other.g5.z, -other.g5.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g5.z, other.g10.y, other.g5.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g5.y, -other.g5.x, other.g10.y, -other.g4.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g9.x, -other.g9.y, -other.g9.z, other.g10.x) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.x, -other.g6.z, other.g6.y, other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g6.z, -other.g2.x, -other.g6.x, other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g6.y, other.g6.x, -other.g2.x, other.g7.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g6.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g6.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g0.w) * other.g7 + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x));
}

fn plane__wedge_dot__plane(self_: Plane, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__wedge_dot__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__wedge_dot__round_point(self_: Plane, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__wedge_dot__scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__wedge_dot__sphere(self_: Plane, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0.xyzx * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__wedge_dot__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z));
}

fn plane__wedge_dot__translator(self_: Plane, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__anti_scalar(self_: Rotor, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__circle(self_: Rotor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z));
}

fn rotor__wedge_dot__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.w), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g2.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__dual_num(self_: Rotor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__flat_point(self_: Rotor, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__flector(self_: Rotor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__line(self_: Rotor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z));
}

fn rotor__wedge_dot__motor(self_: Rotor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z));
}

fn rotor__wedge_dot__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g7.x, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g7.y, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g7.z, -other.g4.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) - vec3<f32>(self_.g0.w) * other.g9, vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g0.w) * other.g10, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) - vec3<f32>(self_.g0.w) * other.g7, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.y, -other.g8.z, other.g8.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g8.z, -other.g2.y, -other.g8.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g8.y, other.g8.x, -other.g2.y, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g6.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.x, other.g3.z, -other.g3.y, other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g10.x, other.g3.x, other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g10.x, other.g9.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, -other.g5.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.y, other.g5.z, -other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g5.z, other.g10.y, other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g5.y, -other.g5.x, other.g10.y) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g6.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g6.w) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) - vec2<f32>(self_.g0.w) * other.g2);
}

fn rotor__wedge_dot__plane(self_: Rotor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g1.y, -other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(0.0) - vec2<f32>(self_.g0.w) * other.g1);
}

fn rotor__wedge_dot__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__wedge_dot__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.x, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__wedge_dot__translator(self_: Rotor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn round_point__wedge_dot__anti_scalar(self_: RoundPoint, other: AntiScalar) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(other.g0), vec2<f32>(0.0) - self_.g1 * vec2<f32>(other.g0));
}

fn round_point__wedge_dot__circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.x) * other.g2 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * other.g2 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn round_point__wedge_dot__dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g1.y) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, other.g2.z) + self_.g1 * vec2<f32>(other.g2.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__wedge_dot__dual_num(self_: RoundPoint, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec2<f32>(other.g0.x), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.y), vec2<f32>(0.0) - self_.g1 * vec2<f32>(other.g0.y));
}

fn round_point__wedge_dot__flat_point(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__wedge_dot__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__wedge_dot__line(self_: RoundPoint, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z));
}

fn round_point__wedge_dot__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - self_.g1 * vec2<f32>(other.g0.w));
}

fn round_point__wedge_dot__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g9.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g9.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g9.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.y, other.g10.y) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.x, other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g1.y) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, other.g5.z) + self_.g1 * vec2<f32>(other.g5.w) + self_.g1 * vec2<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g1.x) * other.g7 + vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g6.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g6.w) - vec3<f32>(self_.g1.x) * other.g8 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.y, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g8.z, other.g2.y, other.g8.x, -other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g8.y, -other.g8.x, other.g2.y, -other.g7.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) - vec4<f32>(self_.g1.y) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.x, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g10.x, other.g3.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g10.x, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, other.g10.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.y) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.y, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, -other.g10.y, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, -other.g10.y) - vec3<f32>(self_.g1.y) * other.g9 + vec3<f32>(self_.g1.y) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g7.z, -other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g7.z, other.g0.y, other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g0.y) + vec3<f32>(self_.g1.x) * other.g8 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g1 * vec2<f32>(other.g6.w) - self_.g1 * vec2<f32>(other.g0.y));
}

fn round_point__wedge_dot__plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__wedge_dot__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec2<f32>(0.0) - self_.g1 * vec2<f32>(other.g0.w));
}

fn round_point__wedge_dot__round_point(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) - vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__wedge_dot__scalar(self_: RoundPoint, other: Scalar) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn round_point__wedge_dot__sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g1.x, other.g1.x, other.g1.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.y) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__wedge_dot__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.w), vec3<f32>(self_.g1.x) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__wedge_dot__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) - self_.g1 * vec2<f32>(other.g0.w));
}

fn scalar__wedge_dot__anti_scalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn scalar__wedge_dot__circle(self_: Scalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__wedge_dot__dipole(self_: Scalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * other.g2);
}

fn scalar__wedge_dot__dual_num(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__flat_point(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec2<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec3<f32>(self_.g0) * other.g4, vec4<f32>(self_.g0) * other.g5, vec4<f32>(self_.g0) * other.g6, vec3<f32>(self_.g0) * other.g7, vec3<f32>(self_.g0) * other.g8, vec3<f32>(self_.g0) * other.g9, vec2<f32>(self_.g0) * other.g10);
}

fn scalar__wedge_dot__plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__round_point(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__wedge_dot__sphere(self_: Scalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__translator(self_: Scalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn sphere__wedge_dot__anti_scalar(self_: Sphere, other: AntiScalar) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn sphere__wedge_dot__circle(self_: Sphere, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * other.g2 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(-other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * other.g2 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__wedge_dot__dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * other.g1, self_.g0 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.y) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(other.g2.w));
}

fn sphere__wedge_dot__dual_num(self_: Sphere, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec2<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec2<f32>(other.g0.x));
}

fn sphere__wedge_dot__flat_point(self_: Sphere, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__wedge_dot__flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) - vec4<f32>(self_.g1.y, self_.g1.y, self_.g1.y, self_.g1.x) * other.g1, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__wedge_dot__line(self_: Sphere, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__wedge_dot__motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) + vec3<f32>(self_.g1.x) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__wedge_dot__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g9.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g9.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g9.z, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g10.y, other.g2.y) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g10.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) + vec3<f32>(self_.g1.x) * other.g8 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g1 * vec2<f32>(-other.g6.w) + self_.g1 * vec2<f32>(other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x) + vec3<f32>(self_.g1.x) * other.g9 + vec3<f32>(self_.g1.x) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.y) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, other.g5.z, -other.g5.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g5.z, other.g10.y, other.g5.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g5.y, -other.g5.x, other.g10.y, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.y) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g9.x, -other.g9.y, -other.g9.z, other.g10.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.x, -other.g6.z, other.g6.y, other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g6.z, -other.g2.x, -other.g6.x, other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g6.y, other.g6.x, -other.g2.x, other.g7.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, other.g2.y) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g6.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g6.w) + vec3<f32>(self_.g1.x) * other.g8 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g1.y) * other.g7 + vec3<f32>(self_.g1.y) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) - vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.y) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g1 * vec2<f32>(other.g5.w) + self_.g1 * vec2<f32>(other.g0.x));
}

fn sphere__wedge_dot__plane(self_: Sphere, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) - vec4<f32>(self_.g1.y, self_.g1.y, self_.g1.y, self_.g1.x) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__wedge_dot__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__wedge_dot__round_point(self_: Sphere, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g1.y) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__wedge_dot__scalar(self_: Sphere, other: Scalar) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn sphere__wedge_dot__sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__wedge_dot__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) - vec4<f32>(self_.g1.y, self_.g1.y, self_.g1.y, self_.g1.x) * other.g1, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z));
}

fn sphere__wedge_dot__translator(self_: Sphere, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__wedge_dot__anti_scalar(self_: Transflector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__wedge_dot__circle(self_: Transflector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g1.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__wedge_dot__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g2.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, -other.g2.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, -other.g2.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g2.w));
}

fn transflector__wedge_dot__dual_num(self_: Transflector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.x));
}

fn transflector__wedge_dot__flat_point(self_: Transflector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn transflector__wedge_dot__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn transflector__wedge_dot__line(self_: Transflector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__wedge_dot__motor(self_: Transflector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__wedge_dot__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g6.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g6.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g6.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g9.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g9.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g9.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g10.x, other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g7.z, other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g7.z, -other.g0.y, -other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g7.y, other.g7.x, -other.g0.y) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, -other.g8.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g6.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.w, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, other.g5.w, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, other.g5.w) + vec3<f32>(self_.g1.w) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g5.w, -other.g9.z, other.g9.y, -other.g3.x) + vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g4.z, -other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g9.z, -other.g5.w, -other.g9.x, -other.g3.y) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g0.x, other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g9.y, other.g9.x, -other.g5.w, -other.g3.z) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.y, other.g5.z, -other.g5.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g5.z, other.g10.y, other.g5.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g5.y, -other.g5.x, other.g10.y, -other.g4.z) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g9.x, -other.g9.y, -other.g9.z, other.g10.x) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g6.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g6.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g6.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g2.x, -other.g6.z, other.g6.y, other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g6.z, -other.g2.x, -other.g6.x, other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g6.y, other.g6.x, -other.g2.x, other.g7.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g2.x, other.g6.z, -other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g6.z, other.g2.x, other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g6.y, -other.g6.x, other.g2.x) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g6.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g6.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g6.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g6.w, other.g7.z, -other.g7.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g7.z, other.g6.w, other.g7.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g7.y, -other.g7.x, other.g6.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.y, other.g8.z, -other.g8.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g8.z, other.g2.y, other.g8.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g8.y, -other.g8.x, other.g2.y) + vec3<f32>(self_.g1.w) * other.g7 + vec3<f32>(self_.g1.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g1.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.x));
}

fn transflector__wedge_dot__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + self_.g1.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn transflector__wedge_dot__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__wedge_dot__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.x), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g1.x), self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__wedge_dot__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__wedge_dot__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.x), self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + self_.g1.xyzx * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, other.g1.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn transflector__wedge_dot__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn transflector__wedge_dot__translator(self_: Transflector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__anti_scalar(self_: Translator, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__circle(self_: Translator, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z));
}

fn translator__wedge_dot__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g2.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, -other.g2.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, -other.g2.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__dual_num(self_: Translator, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0.xyzx * vec4<f32>(-other.g0.y, -other.g0.y, -other.g0.y, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__flat_point(self_: Translator, other: FlatPoint) -> Circle {
    return Circle(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn translator__wedge_dot__flector(self_: Translator, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn translator__wedge_dot__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn translator__wedge_dot__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, -other.g3.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g10.x, -other.g3.z, other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g3.z, -other.g10.x, -other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g3.y, other.g3.x, -other.g10.x) - vec3<f32>(self_.g0.w) * other.g9, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g0.w) * other.g10, vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) - vec3<f32>(self_.g0.w) * other.g7, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g6.w, -other.g7.z, other.g7.y, other.g6.x) + vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g7.z, -other.g6.w, -other.g7.x, other.g6.y) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g7.y, other.g7.x, -other.g6.w, other.g6.z) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g8.x, -other.g8.y, -other.g8.z, other.g6.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, -other.g5.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g10.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g10.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g10.x) + vec3<f32>(self_.g0.w) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g5.w, -other.g9.z, other.g9.y) + vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g9.z, -other.g5.w, -other.g9.x) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g0.x, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g9.y, other.g9.x, -other.g5.w) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g0.x) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g2.x, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, -other.g2.x, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, -other.g2.x) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g7.x) + vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g7.y) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g7.z) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) - vec2<f32>(self_.g0.w) * other.g2);
}

fn translator__wedge_dot__plane(self_: Translator, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z));
}

fn translator__wedge_dot__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) - vec2<f32>(self_.g0.w) * other.g1);
}

fn translator__wedge_dot__scalar(self_: Translator, other: Scalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__wedge_dot__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__wedge_dot__translator(self_: Translator, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__anti_wedge__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge__circle(self_: AntiScalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge__dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge__dual_num(self_: AntiScalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__flat_point(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec2<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec3<f32>(self_.g0) * other.g4, vec4<f32>(self_.g0) * other.g5, vec4<f32>(self_.g0) * other.g6, vec3<f32>(self_.g0) * other.g7, vec3<f32>(self_.g0) * other.g8, vec3<f32>(self_.g0) * other.g9, vec2<f32>(self_.g0) * other.g10);
}

fn anti_scalar__anti_wedge__plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__round_point(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge__sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn circle__anti_wedge__anti_scalar(self_: Circle, other: AntiScalar) -> Circle {
    return Circle(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn circle__anti_wedge__circle(self_: Circle, other: Circle) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z));
}

fn circle__anti_wedge__dipole(self_: Circle, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z - self_.g0.w * other.g2.w - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn circle__anti_wedge__dual_num(self_: Circle, other: DualNum) -> Circle {
    return Circle(self_.g0 * vec4<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y));
}

fn circle__anti_wedge__flat_point(self_: Circle, other: FlatPoint) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn circle__anti_wedge__flector(self_: Circle, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge__line(self_: Circle, other: Line) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z));
}

fn circle__anti_wedge__motor(self_: Circle, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec4<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g5.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g5.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g5.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g5.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g3.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g8.z, -other.g8.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g8.z, 0.0, other.g8.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g8.y, -other.g8.x, 0.0) + vec3<f32>(self_.g0.w) * other.g7 + self_.g1 * vec3<f32>(other.g6.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g7.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g7.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, 0.0, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, 0.0) + self_.g1 * vec3<f32>(other.g10.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g10.y) - vec3<f32>(self_.g0.w) * other.g9 + self_.g2 * vec3<f32>(other.g10.x), vec4<f32>(self_.g1.x) * vec4<f32>(other.g10.y, 0.0, 0.0, -other.g9.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g10.y, 0.0, -other.g9.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g10.y, -other.g9.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g9.z, other.g9.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g9.z, 0.0, -other.g9.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g9.y, other.g9.x, 0.0, 0.0), self_.g0 * vec4<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge__plane(self_: Circle, other: Plane) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn circle__anti_wedge__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec4<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge__sphere(self_: Circle, other: Sphere) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g1.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g0.w) * other.g0 + self_.g2 * vec3<f32>(other.g1.x), vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn circle__anti_wedge__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn circle__anti_wedge__translator(self_: Circle, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec4<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge__anti_scalar(self_: Dipole, other: AntiScalar) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec4<f32>(other.g0));
}

fn dipole__anti_wedge__circle(self_: Dipole, other: Circle) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z - self_.g2.w * other.g0.w);
}

fn dipole__anti_wedge__dual_num(self_: Dipole, other: DualNum) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec4<f32>(other.g0.y));
}

fn dipole__anti_wedge__flector(self_: Dipole, other: Flector) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g1.w));
}

fn dipole__anti_wedge__line(self_: Dipole, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn dipole__anti_wedge__motor(self_: Dipole, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec4<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g8.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g8.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g8.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g6.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g6.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g6.z, 0.0) + vec2<f32>(self_.g2.w) * vec2<f32>(-other.g6.w, 0.0), self_.g0 * vec3<f32>(other.g10.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g9.z, other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g9.z, 0.0, -other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g9.y, other.g9.x, 0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g10.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g2.w) * other.g10 * vec2<f32>(-1.0, 1.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec4<f32>(other.g0.y), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge__plane(self_: Dipole, other: Plane) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g0.w));
}

fn dipole__anti_wedge__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec4<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dipole__anti_wedge__sphere(self_: Dipole, other: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.w) * other.g1 * vec2<f32>(-1.0, 1.0));
}

fn dipole__anti_wedge__transflector(self_: Dipole, other: Transflector) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, other.g1.w));
}

fn dipole__anti_wedge__translator(self_: Dipole, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec4<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge__anti_scalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(other.g0));
}

fn dual_num__anti_wedge__circle(self_: DualNum, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2);
}

fn dual_num__anti_wedge__dipole(self_: DualNum, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(self_.g0.y) * other.g2);
}

fn dual_num__anti_wedge__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0);
}

fn dual_num__anti_wedge__flat_point(self_: DualNum, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.y) * other.g0);
}

fn dual_num__anti_wedge__flector(self_: DualNum, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn dual_num__anti_wedge__line(self_: DualNum, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1);
}

fn dual_num__anti_wedge__motor(self_: DualNum, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec2<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.y) * other.g3, vec3<f32>(self_.g0.y) * other.g4, vec4<f32>(self_.g0.y) * other.g5, vec4<f32>(self_.g0.y) * other.g6, vec3<f32>(self_.g0.y) * other.g7, vec3<f32>(self_.g0.y) * other.g8, vec3<f32>(self_.g0.y) * other.g9, vec2<f32>(self_.g0.y) * other.g10);
}

fn dual_num__anti_wedge__plane(self_: DualNum, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.y) * other.g0);
}

fn dual_num__anti_wedge__rotor(self_: DualNum, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn dual_num__anti_wedge__round_point(self_: DualNum, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(self_.g0.y) * other.g1);
}

fn dual_num__anti_wedge__scalar(self_: DualNum, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn dual_num__anti_wedge__sphere(self_: DualNum, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(self_.g0.y) * other.g1);
}

fn dual_num__anti_wedge__transflector(self_: DualNum, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn dual_num__anti_wedge__translator(self_: DualNum, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge__anti_scalar(self_: FlatPoint, other: AntiScalar) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0));
}

fn flat_point__anti_wedge__circle(self_: FlatPoint, other: Circle) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn flat_point__anti_wedge__dual_num(self_: FlatPoint, other: DualNum) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0.y));
}

fn flat_point__anti_wedge__flector(self_: FlatPoint, other: Flector) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w));
}

fn flat_point__anti_wedge__motor(self_: FlatPoint, other: Motor) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0.w));
}

fn flat_point__anti_wedge__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g6.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g10.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.y), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flat_point__anti_wedge__plane(self_: FlatPoint, other: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w));
}

fn flat_point__anti_wedge__rotor(self_: FlatPoint, other: Rotor) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0.w));
}

fn flat_point__anti_wedge__sphere(self_: FlatPoint, other: Sphere) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0));
}

fn flat_point__anti_wedge__transflector(self_: FlatPoint, other: Transflector) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w));
}

fn flat_point__anti_wedge__translator(self_: FlatPoint, other: Translator) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0.w));
}

fn flector__anti_wedge__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__anti_wedge__circle(self_: Flector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge__dipole(self_: Flector, other: Dipole) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g2.w));
}

fn flector__anti_wedge__dual_num(self_: Flector, other: DualNum) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.y), self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__anti_wedge__flat_point(self_: Flector, other: FlatPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn flector__anti_wedge__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge__line(self_: Flector, other: Line) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__anti_wedge__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector__anti_wedge__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g6.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g2.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g10.x) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0) - vec3<f32>(self_.g1.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g0.w) * other.g10 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g5.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g6.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), self_.g0 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g8.z, 0.0, other.g8.x, -other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g8.y, -other.g8.x, 0.0, -other.g7.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, 0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g10.x), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, 0.0, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g10.y) - vec3<f32>(self_.g1.w) * other.g9, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y));
}

fn flector__anti_wedge__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector__anti_wedge__round_point(self_: Flector, other: RoundPoint) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z + self_.g1.w * other.g1.x);
}

fn flector__anti_wedge__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g1.x), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn flector__anti_wedge__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn line__anti_wedge__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__anti_wedge__circle(self_: Line, other: Circle) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z));
}

fn line__anti_wedge__dipole(self_: Line, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__anti_wedge__dual_num(self_: Line, other: DualNum) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y));
}

fn line__anti_wedge__flector(self_: Line, other: Flector) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0));
}

fn line__anti_wedge__line(self_: Line, other: Line) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn line__anti_wedge__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g3.z, 0.0), self_.g0 * vec3<f32>(other.g6.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g7.z), self_.g0 * vec3<f32>(other.g10.x), self_.g1 * vec3<f32>(other.g10.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, 0.0, 0.0, -other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g10.y, 0.0, -other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g10.y, -other.g9.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g9.z, other.g9.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g9.z, 0.0, -other.g9.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g9.y, other.g9.x, 0.0, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge__plane(self_: Line, other: Plane) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line__anti_wedge__rotor(self_: Line, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_wedge__sphere(self_: Line, other: Sphere) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(other.g1.x), self_.g1 * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line__anti_wedge__transflector(self_: Line, other: Transflector) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0));
}

fn line__anti_wedge__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__anti_wedge__circle(self_: Motor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.w) * other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge__dual_num(self_: Motor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge__flat_point(self_: Motor, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn motor__anti_wedge__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.w) * other.g1 + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g3.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g6.w) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g0.w) * other.g2 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g7.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g10.x) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.w) * other.g4 + self_.g1 * vec3<f32>(other.g10.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, 0.0, 0.0, -other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g10.y, 0.0, -other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g10.y, -other.g9.z) + vec4<f32>(self_.g0.w) * other.g5 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g9.z, other.g9.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g9.z, 0.0, -other.g9.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g9.y, other.g9.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g6, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g7, vec3<f32>(self_.g0.w) * other.g8 + self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(self_.g0.w) * other.g9, vec2<f32>(self_.g0.w) * other.g10);
}

fn motor__anti_wedge__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn motor__anti_wedge__round_point(self_: Motor, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1);
}

fn motor__anti_wedge__scalar(self_: Motor, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn motor__anti_wedge__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), self_.g1 * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1);
}

fn motor__anti_wedge__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn motor__anti_wedge__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_wedge__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec2<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec3<f32>(other.g0), self_.g5 * vec4<f32>(other.g0), self_.g6 * vec4<f32>(other.g0), self_.g7 * vec3<f32>(other.g0), self_.g8 * vec3<f32>(other.g0), self_.g9 * vec3<f32>(other.g0), self_.g10 * vec2<f32>(other.g0));
}

fn multi_vector__anti_wedge__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g5.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g5.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0) + vec3<f32>(self_.g6.w) * other.g1 + self_.g7 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g10.x) * other.g1, vec3<f32>(0.0) - self_.g9 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * other.g2 + vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_wedge__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g2.w, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g7.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g7.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g8.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g8.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g8.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g10.y) * other.g0, vec2<f32>(self_.g9.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g10 * vec2<f32>(other.g2.w), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(self_.g0.y) * other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_wedge__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec2<f32>(other.g0.y), self_.g3 * vec3<f32>(other.g0.y), self_.g4 * vec3<f32>(other.g0.y), self_.g5 * vec4<f32>(other.g0.y), self_.g6 * vec4<f32>(other.g0.y), self_.g7 * vec3<f32>(other.g0.y), self_.g8 * vec3<f32>(other.g0.y), self_.g9 * vec3<f32>(other.g0.y), self_.g10 * vec2<f32>(other.g0.y));
}

fn multi_vector__anti_wedge__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_wedge__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.w, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g0.w, 0.0), self_.g3 * vec3<f32>(other.g1.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z) + self_.g10 * vec2<f32>(other.g0.w), vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), self_.g9 * vec3<f32>(other.g1.w) - vec3<f32>(self_.g10.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w));
}

fn multi_vector__anti_wedge__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g6.w) * other.g0, vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g10.x) * other.g0, vec3<f32>(self_.g10.x) * other.g1, vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_wedge__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), self_.g3 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * other.g1, self_.g5 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g6 * vec4<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g7 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * other.g1 + self_.g8 * vec3<f32>(other.g0.w), self_.g9 * vec3<f32>(other.g0.w), self_.g10 * vec2<f32>(other.g0.w));
}

fn multi_vector__anti_wedge__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(other.g9.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g9.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g9.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g10.y, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g10.x, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g8.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g8.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g8.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g7.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(-other.g6.x, 0.0) + vec2<f32>(self_.g5.y) * vec2<f32>(-other.g6.y, 0.0) + vec2<f32>(self_.g5.z) * vec2<f32>(-other.g6.z, 0.0) + vec2<f32>(self_.g5.w) * vec2<f32>(-other.g6.w, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g5.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g5.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g5.z, 0.0) + vec2<f32>(self_.g6.w) * vec2<f32>(-other.g5.w, 0.0) + vec2<f32>(self_.g7.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g7.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g7.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g8.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g8.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g8.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g2.y, 0.0) + vec2<f32>(self_.g10.y) * vec2<f32>(other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.y) + self_.g3 * vec3<f32>(other.g10.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g9.z, other.g9.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g9.z, 0.0, -other.g9.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g9.y, other.g9.x, 0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g10.x) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g8.z, -other.g8.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g8.z, 0.0, other.g8.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g8.y, -other.g8.x, 0.0) + vec3<f32>(self_.g6.w) * other.g7 + self_.g7 * vec3<f32>(other.g6.w) + vec3<f32>(self_.g8.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g8.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g8.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g10.y) * other.g3, vec2<f32>(self_.g0.y) * other.g2 + self_.g2 * vec2<f32>(other.g0.y) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g9.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g9.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g9.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g5.w) * other.g10 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g7.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g7.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g7.z, 0.0) - vec2<f32>(self_.g7.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g7.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g7.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g9.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g10 * vec2<f32>(other.g5.w), vec3<f32>(self_.g0.y) * other.g3 + self_.g3 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g9.z, -other.g9.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g9.z, 0.0, other.g9.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g9.y, -other.g9.x, 0.0) + self_.g7 * vec3<f32>(other.g10.x) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g9.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g9.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0) + vec3<f32>(self_.g10.x) * other.g7, vec3<f32>(self_.g0.y) * other.g4 + self_.g4 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g10.y) - vec3<f32>(self_.g6.w) * other.g9 + self_.g8 * vec3<f32>(other.g10.x) - self_.g9 * vec3<f32>(other.g6.w) + vec3<f32>(self_.g10.x) * other.g8 + vec3<f32>(self_.g10.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.y) * other.g5 + self_.g5 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g10.y, 0.0, 0.0, -other.g9.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g10.y, 0.0, -other.g9.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g10.y, -other.g9.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g9.z, other.g9.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g9.z, 0.0, -other.g9.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g9.y, other.g9.x, 0.0, 0.0) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g8.z, 0.0, other.g8.x, -other.g7.y) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g8.y, -other.g8.x, 0.0, -other.g7.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, 0.0), vec4<f32>(self_.g0.y) * other.g6 + self_.g6 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g9.x) * vec4<f32>(-other.g10.x, -other.g10.x, -other.g10.x, 0.0) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, other.g10.y) + vec4<f32>(self_.g10.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(self_.g0.y) * other.g7 + self_.g7 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g9.z, -other.g9.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g9.z, 0.0, other.g9.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g9.y, -other.g9.x, 0.0), vec3<f32>(self_.g0.y) * other.g8 + self_.g8 * vec3<f32>(other.g0.y) + self_.g9 * vec3<f32>(other.g10.y) - vec3<f32>(self_.g10.y) * other.g9, vec3<f32>(self_.g0.y) * other.g9 + self_.g9 * vec3<f32>(other.g0.y), vec2<f32>(self_.g0.y) * other.g10 + self_.g10 * vec2<f32>(other.g0.y));
}

fn multi_vector__anti_wedge__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.w, 0.0), self_.g3 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g7.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g10.x) * other.g0, vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g9 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g10.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w));
}

fn multi_vector__anti_wedge__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g6.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), self_.g3 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g4 * vec3<f32>(other.g0.w), self_.g5 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g9.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g9.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g10.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g6 * vec4<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g7 * vec3<f32>(other.g0.w), self_.g8 * vec3<f32>(other.g0.w), self_.g9 * vec3<f32>(other.g0.w), self_.g10 * vec2<f32>(other.g0.w));
}

fn multi_vector__anti_wedge__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g9.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g9.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g9.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g10.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g10.y) * vec2<f32>(other.g1.x, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_wedge__scalar(self_: MultiVector, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn multi_vector__anti_wedge__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.x, 0.0), self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x), vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g5.w) * other.g1 * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g7 * vec3<f32>(other.g1.x), vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g6.w) * other.g0 + self_.g8 * vec3<f32>(other.g1.x), vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g9.x, self_.g9.y, self_.g9.z, self_.g9.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g10.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.y) + vec4<f32>(self_.g10.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x), vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g9 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g10.y) * other.g0, vec3<f32>(self_.g0.y) * other.g0, vec2<f32>(self_.g0.y) * other.g1);
}

fn multi_vector__anti_wedge__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.w, 0.0) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0), self_.g3 * vec3<f32>(other.g1.w) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g10.x) * other.g0, vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g6.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g7.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g7.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g7.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g8.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g8.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g8.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g10.x) * other.g1, vec3<f32>(self_.g9.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g9.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g9.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), self_.g9 * vec3<f32>(other.g1.w) - vec3<f32>(self_.g10.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.w));
}

fn multi_vector__anti_wedge__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g6.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g6.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g6.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g2 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g0.z), self_.g3 * vec3<f32>(other.g0.w), self_.g4 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g10.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g5 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g9.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g9.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g9.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g6 * vec4<f32>(other.g0.w), self_.g7 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g8 * vec3<f32>(other.g0.w), self_.g9 * vec3<f32>(other.g0.w), self_.g10 * vec2<f32>(other.g0.w));
}

fn plane__anti_wedge__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__anti_wedge__circle(self_: Plane, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn plane__anti_wedge__dipole(self_: Plane, other: Dipole) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g2.w));
}

fn plane__anti_wedge__dual_num(self_: Plane, other: DualNum) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__anti_wedge__flat_point(self_: Plane, other: FlatPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w));
}

fn plane__anti_wedge__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge__line(self_: Plane, other: Line) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__anti_wedge__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane__anti_wedge__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g2.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0) - vec3<f32>(self_.g0.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g5.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g6.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g8.z, 0.0, other.g8.x, -other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g8.y, -other.g8.x, 0.0, -other.g7.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, 0.0), vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, 0.0, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g10.y) - vec3<f32>(self_.g0.w) * other.g9, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y));
}

fn plane__anti_wedge__plane(self_: Plane, other: Plane) -> Line {
    return Line(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__anti_wedge__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane__anti_wedge__round_point(self_: Plane, other: RoundPoint) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g1.x);
}

fn plane__anti_wedge__sphere(self_: Plane, other: Sphere) -> Circle {
    return Circle(vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__anti_wedge__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn plane__anti_wedge__translator(self_: Plane, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn rotor__anti_wedge__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__anti_wedge__circle(self_: Rotor, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g2.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.w) * other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge__dual_num(self_: Rotor, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge__flat_point(self_: Rotor, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge__line(self_: Rotor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge__motor(self_: Rotor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn rotor__anti_wedge__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g6.w) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, other.g8.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, other.g8.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, other.g8.z) + vec2<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g10.x) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.w) * other.g4, vec4<f32>(self_.g0.x) * vec4<f32>(other.g10.y, 0.0, 0.0, -other.g9.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g10.y, 0.0, -other.g9.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g10.y, -other.g9.z) + vec4<f32>(self_.g0.w) * other.g5, vec4<f32>(self_.g0.w) * other.g6, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g7, vec3<f32>(self_.g0.w) * other.g8, vec3<f32>(self_.g0.w) * other.g9, vec2<f32>(self_.g0.w) * other.g10);
}

fn rotor__anti_wedge__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__round_point(self_: Rotor, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge__scalar(self_: Rotor, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn rotor__anti_wedge__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.y, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.y, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.y, -other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge__translator(self_: Rotor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge__anti_scalar(self_: RoundPoint, other: AntiScalar) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn round_point__anti_wedge__dual_num(self_: RoundPoint, other: DualNum) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec2<f32>(other.g0.y));
}

fn round_point__anti_wedge__flector(self_: RoundPoint, other: Flector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z + self_.g1.x * other.g1.w);
}

fn round_point__anti_wedge__motor(self_: RoundPoint, other: Motor) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec2<f32>(other.g0.w));
}

fn round_point__anti_wedge__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g9.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g9.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g9.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g10.y, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g10.x, 0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec2<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_wedge__plane(self_: RoundPoint, other: Plane) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g1.x * other.g0.w);
}

fn round_point__anti_wedge__rotor(self_: RoundPoint, other: Rotor) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec2<f32>(other.g0.w));
}

fn round_point__anti_wedge__sphere(self_: RoundPoint, other: Sphere) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g1.x * other.g1.y + self_.g1.y * other.g1.x);
}

fn round_point__anti_wedge__transflector(self_: RoundPoint, other: Transflector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z + self_.g1.x * other.g1.w);
}

fn round_point__anti_wedge__translator(self_: RoundPoint, other: Translator) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec2<f32>(other.g0.w));
}

fn scalar__anti_wedge__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__anti_wedge__dual_num(self_: Scalar, other: DualNum) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__anti_wedge__motor(self_: Scalar, other: Motor) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn scalar__anti_wedge__multi_vector(self_: Scalar, other: MultiVector) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__anti_wedge__rotor(self_: Scalar, other: Rotor) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn scalar__anti_wedge__translator(self_: Scalar, other: Translator) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn sphere__anti_wedge__anti_scalar(self_: Sphere, other: AntiScalar) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn sphere__anti_wedge__circle(self_: Sphere, other: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * other.g2 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn sphere__anti_wedge__dipole(self_: Sphere, other: Dipole) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) - vec3<f32>(self_.g1.y) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(other.g2.w));
}

fn sphere__anti_wedge__dual_num(self_: Sphere, other: DualNum) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec2<f32>(other.g0.y));
}

fn sphere__anti_wedge__flat_point(self_: Sphere, other: FlatPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__anti_wedge__flector(self_: Sphere, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + self_.g1 * vec2<f32>(other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), self_.g0 * vec3<f32>(other.g1.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge__line(self_: Sphere, other: Line) -> Dipole {
    return Dipole(vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g1.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn sphere__anti_wedge__motor(self_: Sphere, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__anti_wedge__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.y, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) - vec3<f32>(self_.g1.y) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, -other.g5.z) + self_.g1 * vec2<f32>(other.g5.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0) + vec3<f32>(self_.g1.x) * other.g7, vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g6.w) + vec3<f32>(self_.g1.x) * other.g8 + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g8.z, 0.0, other.g8.x, -other.g7.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g8.y, -other.g8.x, 0.0, -other.g7.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g10.x, -other.g10.x, -other.g10.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g9.x, other.g9.y, other.g9.z, other.g10.y) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g10.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g9.z, -other.g9.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g9.z, 0.0, other.g9.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g9.y, -other.g9.x, 0.0), self_.g0 * vec3<f32>(other.g10.y) - vec3<f32>(self_.g1.y) * other.g9, self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec2<f32>(other.g0.y));
}

fn sphere__anti_wedge__plane(self_: Sphere, other: Plane) -> Circle {
    return Circle(vec4<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn sphere__anti_wedge__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec2<f32>(other.g0.w));
}

fn sphere__anti_wedge__round_point(self_: Sphere, other: RoundPoint) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g1.x * other.g1.y + self_.g1.y * other.g1.x);
}

fn sphere__anti_wedge__sphere(self_: Sphere, other: Sphere) -> Circle {
    return Circle(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.x, -other.g1.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.y) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.y) * other.g0);
}

fn sphere__anti_wedge__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x) * other.g0, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), self_.g0 * vec3<f32>(other.g1.w) - vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn sphere__anti_wedge__translator(self_: Sphere, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec2<f32>(other.g0.w));
}

fn transflector__anti_wedge__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__anti_wedge__circle(self_: Transflector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge__dipole(self_: Transflector, other: Dipole) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g2.w));
}

fn transflector__anti_wedge__dual_num(self_: Transflector, other: DualNum) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__anti_wedge__flat_point(self_: Transflector, other: FlatPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w));
}

fn transflector__anti_wedge__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge__line(self_: Transflector, other: Line) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__anti_wedge__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn transflector__anti_wedge__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g6.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g6.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g6.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g2.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g10.x) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0) - vec3<f32>(self_.g1.w) * other.g3, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, -other.g5.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, -other.g5.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, -other.g5.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g5.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g6.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g8.z, -other.g8.y, -other.g7.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g8.z, 0.0, other.g8.x, -other.g7.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g8.y, -other.g8.x, 0.0, -other.g7.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g7.x, other.g7.y, other.g7.z, 0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g10.x), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g9.z, -other.g9.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g9.z, 0.0, other.g9.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g9.y, -other.g9.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g10.y) - vec3<f32>(self_.g1.w) * other.g9, vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y), vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y));
}

fn transflector__anti_wedge__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn transflector__anti_wedge__round_point(self_: Transflector, other: RoundPoint) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z + self_.g1.w * other.g1.x);
}

fn transflector__anti_wedge__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0) - self_.g1 * vec4<f32>(other.g1.x), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.y) - vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn transflector__anti_wedge__translator(self_: Transflector, other: Translator) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn translator__anti_wedge__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__anti_wedge__circle(self_: Translator, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.w) * other.g2, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge__dual_num(self_: Translator, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge__flat_point(self_: Translator, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g6.z, other.g6.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g6.z, 0.0, -other.g6.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g6.y, other.g6.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g10.x) + vec3<f32>(self_.g0.w) * other.g4, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g9.z, other.g9.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g9.z, 0.0, -other.g9.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g9.y, other.g9.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g5, vec4<f32>(self_.g0.w) * other.g6, vec3<f32>(self_.g0.w) * other.g7, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g8, vec3<f32>(self_.g0.w) * other.g9, vec2<f32>(self_.g0.w) * other.g10);
}

fn translator__anti_wedge__plane(self_: Translator, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_wedge__round_point(self_: Translator, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge__scalar(self_: Translator, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn translator__anti_wedge__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec2<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge__transflector(self_: Translator, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn anti_scalar__wedge__dual_num(self_: AntiScalar, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__wedge__multi_vector(self_: AntiScalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__wedge__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn circle__wedge__dipole(self_: Circle, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z - self_.g0.w * other.g2.w - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn circle__wedge__dual_num(self_: Circle, other: DualNum) -> Circle {
    return Circle(self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x));
}

fn circle__wedge__flat_point(self_: Circle, other: FlatPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn circle__wedge__flector(self_: Circle, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn circle__wedge__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g5.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g5.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g5.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g3.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - self_.g2 * vec3<f32>(other.g2.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * other.g2 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z));
}

fn circle__wedge__round_point(self_: Circle, other: RoundPoint) -> Sphere {
    return Sphere(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g2 * vec3<f32>(other.g1.x), vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z));
}

fn circle__wedge__scalar(self_: Circle, other: Scalar) -> Circle {
    return Circle(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn circle__wedge__transflector(self_: Circle, other: Transflector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn dipole__wedge__circle(self_: Dipole, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z - self_.g2.w * other.g0.w);
}

fn dipole__wedge__dipole(self_: Dipole, other: Dipole) -> Sphere {
    return Sphere(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.w) * other.g1, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z));
}

fn dipole__wedge__dual_num(self_: Dipole, other: DualNum) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec4<f32>(other.g0.x));
}

fn dipole__wedge__flat_point(self_: Dipole, other: FlatPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn dipole__wedge__flector(self_: Dipole, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn dipole__wedge__line(self_: Dipole, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn dipole__wedge__motor(self_: Dipole, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn dipole__wedge__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g8.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g6.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g6.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g6.z) + vec2<f32>(self_.g2.w) * vec2<f32>(0.0, -other.g6.w), vec3<f32>(0.0), vec2<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec4<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g2.x, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g2.x, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g2.x, -other.g1.z), self_.g0 * vec3<f32>(other.g2.y) + vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g2.x) - vec3<f32>(self_.g2.w) * other.g1, self_.g1 * vec3<f32>(other.g2.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, 0.0, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, 0.0) + self_.g1 * vec3<f32>(other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, 0.0, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, 0.0) + vec3<f32>(self_.g2.w) * other.g4, vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g4.z));
}

fn dipole__wedge__rotor(self_: Dipole, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn dipole__wedge__round_point(self_: Dipole, other: RoundPoint) -> Circle {
    return Circle(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), self_.g0 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g2.w) * other.g0, self_.g1 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn dipole__wedge__scalar(self_: Dipole, other: Scalar) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec4<f32>(other.g0));
}

fn dipole__wedge__transflector(self_: Dipole, other: Transflector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn dipole__wedge__translator(self_: Dipole, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn dual_num__wedge__anti_scalar(self_: DualNum, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn dual_num__wedge__circle(self_: DualNum, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2);
}

fn dual_num__wedge__dipole(self_: DualNum, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g0.x) * other.g2);
}

fn dual_num__wedge__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x));
}

fn dual_num__wedge__flat_point(self_: DualNum, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0.x) * other.g0);
}

fn dual_num__wedge__flector(self_: DualNum, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.x) * other.g1);
}

fn dual_num__wedge__line(self_: DualNum, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1);
}

fn dual_num__wedge__motor(self_: DualNum, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1);
}

fn dual_num__wedge__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), vec3<f32>(self_.g0.x) * other.g1, vec2<f32>(self_.g0.x) * other.g2, vec3<f32>(self_.g0.x) * other.g3, vec3<f32>(self_.g0.x) * other.g4, vec4<f32>(self_.g0.x) * other.g5, vec4<f32>(self_.g0.x) * other.g6, vec3<f32>(self_.g0.x) * other.g7, vec3<f32>(self_.g0.x) * other.g8, vec3<f32>(self_.g0.x) * other.g9, vec2<f32>(self_.g0.x) * other.g10);
}

fn dual_num__wedge__plane(self_: DualNum, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * other.g0);
}

fn dual_num__wedge__rotor(self_: DualNum, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0);
}

fn dual_num__wedge__round_point(self_: DualNum, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(self_.g0.x) * other.g1);
}

fn dual_num__wedge__scalar(self_: DualNum, other: Scalar) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(other.g0));
}

fn dual_num__wedge__sphere(self_: DualNum, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(self_.g0.x) * other.g1);
}

fn dual_num__wedge__transflector(self_: DualNum, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.x) * other.g1);
}

fn dual_num__wedge__translator(self_: DualNum, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * other.g0);
}

fn flat_point__wedge__circle(self_: FlatPoint, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn flat_point__wedge__dipole(self_: FlatPoint, other: Dipole) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn flat_point__wedge__dual_num(self_: FlatPoint, other: DualNum) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0.x));
}

fn flat_point__wedge__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g6.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g6.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g6.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g6.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.x) - vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, 0.0, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, 0.0) + vec3<f32>(self_.g0.w) * other.g4, vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z));
}

fn flat_point__wedge__round_point(self_: FlatPoint, other: RoundPoint) -> Line {
    return Line(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flat_point__wedge__scalar(self_: FlatPoint, other: Scalar) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(other.g0));
}

fn flector__wedge__circle(self_: Flector, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn flector__wedge__dipole(self_: Flector, other: Dipole) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn flector__wedge__dual_num(self_: Flector, other: DualNum) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__wedge__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g6.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g6.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g6.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g6.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g2.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.x) - vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, 0.0, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, 0.0) + vec3<f32>(self_.g0.w) * other.g4 + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.x));
}

fn flector__wedge__round_point(self_: Flector, other: RoundPoint) -> Motor {
    return Motor(self_.g0.xyzx * vec4<f32>(other.g1.x, other.g1.x, other.g1.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector__wedge__scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn line__wedge__dipole(self_: Line, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__wedge__dual_num(self_: Line, other: DualNum) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x));
}

fn line__wedge__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g3.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - self_.g1 * vec3<f32>(other.g2.x), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z));
}

fn line__wedge__round_point(self_: Line, other: RoundPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, -other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, -other.g1.x, other.g0.z));
}

fn line__wedge__scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__wedge__dipole(self_: Motor, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__wedge__dual_num(self_: Motor, other: DualNum) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x));
}

fn motor__wedge__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g3.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - self_.g1 * vec3<f32>(other.g2.x), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z));
}

fn motor__wedge__round_point(self_: Motor, other: RoundPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, -other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, -other.g1.x, other.g0.z));
}

fn motor__wedge__scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector__wedge__anti_scalar(self_: MultiVector, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn multi_vector__wedge__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g2.x) * other.g2 - vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g2 * vec2<f32>(other.g0.w));
}

fn multi_vector__wedge__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, -other.g2.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g0.x) * other.g2, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g2.y) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g2.y) * other.g1, vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + self_.g4 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g5.w) * other.g1, vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g2.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g2.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g2.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g1.z));
}

fn multi_vector__wedge__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec2<f32>(other.g0.x), self_.g3 * vec3<f32>(other.g0.x), self_.g4 * vec3<f32>(other.g0.x), self_.g5 * vec4<f32>(other.g0.x), self_.g6 * vec4<f32>(other.g0.x), self_.g7 * vec3<f32>(other.g0.x), self_.g8 * vec3<f32>(other.g0.x), self_.g9 * vec3<f32>(other.g0.x), self_.g10 * vec2<f32>(other.g0.x));
}

fn multi_vector__wedge__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g0.w), vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z));
}

fn multi_vector__wedge__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, -other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + self_.g4 * vec3<f32>(other.g0.w), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z));
}

fn multi_vector__wedge__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.x) * other.g1, vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z));
}

fn multi_vector__wedge__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g2.x) * other.g1, vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z));
}

fn multi_vector__wedge__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g10.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g10.x) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g8.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g8.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g8.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g7.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g7.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g7.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g6.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g6.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g6.z) + vec2<f32>(self_.g5.w) * vec2<f32>(0.0, -other.g6.w) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g5.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g5.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g5.z) + vec2<f32>(self_.g6.w) * vec2<f32>(0.0, -other.g5.w) + vec2<f32>(self_.g7.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g7.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g7.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g10.x) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g10.y) * vec2<f32>(0.0, other.g2.x), vec3<f32>(self_.g0.x) * other.g1 + self_.g1 * vec3<f32>(other.g0.x), vec2<f32>(self_.g0.x) * other.g2 + self_.g2 * vec2<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g3 - self_.g1 * vec3<f32>(other.g2.x) + vec3<f32>(self_.g2.x) * other.g1 + self_.g3 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g4 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g4 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * other.g5 + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g2.y, other.g2.y, other.g2.y, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) - vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g2.x) + self_.g5 * vec4<f32>(other.g0.x), vec4<f32>(self_.g0.x) * other.g6 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g4.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g2.x, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g2.x, 0.0, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g2.x, -other.g1.z) + self_.g6 * vec4<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g7 - self_.g1 * vec3<f32>(other.g5.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g2.y) * other.g3 + self_.g3 * vec3<f32>(other.g2.y) + vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g2.x) - vec3<f32>(self_.g5.w) * other.g1 + self_.g7 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g8 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g5.z, other.g5.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g5.z, 0.0, -other.g5.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g5.y, other.g5.x, 0.0) + vec3<f32>(self_.g2.y) * other.g4 + self_.g4 * vec3<f32>(other.g2.y) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + self_.g8 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g9 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g7.z, -other.g7.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g7.z, 0.0, other.g7.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g7.y, -other.g7.x, 0.0) + vec3<f32>(self_.g2.x) * other.g8 - vec3<f32>(self_.g2.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g5.z, other.g5.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g5.z, 0.0, -other.g5.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g5.y, other.g5.x, 0.0) + self_.g4 * vec3<f32>(other.g5.w) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g3.z, -other.g3.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g3.z, 0.0, other.g3.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g3.y, -other.g3.x, 0.0) + vec3<f32>(self_.g5.w) * other.g4 + vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g2.y) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - self_.g8 * vec3<f32>(other.g2.x) + self_.g9 * vec3<f32>(other.g0.x), vec2<f32>(self_.g0.x) * other.g10 + vec2<f32>(self_.g1.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g2 * vec2<f32>(other.g6.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g4.x) * vec2<f32>(other.g3.x, other.g5.x) - vec2<f32>(self_.g4.y) * vec2<f32>(other.g3.y, other.g5.y) - vec2<f32>(self_.g4.z) * vec2<f32>(other.g3.z, other.g5.z) + vec2<f32>(self_.g5.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g5.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g5.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g6.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g6.w) * other.g2 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g1.z) + self_.g10 * vec2<f32>(other.g0.x));
}

fn multi_vector__wedge__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w));
}

fn multi_vector__wedge__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec2<f32>(0.0));
}

fn multi_vector__wedge__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g9.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g9.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g9.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g10.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g10.y) * vec2<f32>(0.0, other.g1.x), vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(self_.g0.x) * other.g1, vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g2.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) - vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x), vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g1.x, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g1.x, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g1.x, -other.g0.z), self_.g3 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z) * vec3<f32>(other.g1.x) - vec3<f32>(self_.g5.w) * other.g0, self_.g4 * vec3<f32>(other.g1.y) + vec3<f32>(self_.g5.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g5.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g5.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z) * vec3<f32>(other.g1.y) + vec3<f32>(self_.g7.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g7.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g7.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g8 * vec3<f32>(other.g1.x), vec2<f32>(self_.g6.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g6.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g6.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g6.w) * other.g1 * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g8.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g8.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g8.z) * vec2<f32>(0.0, other.g0.z));
}

fn multi_vector__wedge__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec2<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec3<f32>(other.g0), self_.g5 * vec4<f32>(other.g0), self_.g6 * vec4<f32>(other.g0), self_.g7 * vec3<f32>(other.g0), self_.g8 * vec3<f32>(other.g0), self_.g9 * vec3<f32>(other.g0), self_.g10 * vec2<f32>(other.g0));
}

fn multi_vector__wedge__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec2<f32>(self_.g0.x) * other.g1);
}

fn multi_vector__wedge__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g6.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g6.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g6.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g2.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z));
}

fn multi_vector__wedge__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z));
}

fn plane__wedge__dual_num(self_: Plane, other: DualNum) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__wedge__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g2.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x));
}

fn plane__wedge__round_point(self_: Plane, other: RoundPoint) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g1.x);
}

fn plane__wedge__scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__wedge__dipole(self_: Rotor, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn rotor__wedge__dual_num(self_: Rotor, other: DualNum) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0.x));
}

fn rotor__wedge__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec2<f32>(0.0));
}

fn rotor__wedge__round_point(self_: Rotor, other: RoundPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn rotor__wedge__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn round_point__wedge__circle(self_: RoundPoint, other: Circle) -> Sphere {
    return Sphere(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * other.g2 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, -other.g2.z) + self_.g1 * vec2<f32>(other.g0.w));
}

fn round_point__wedge__dipole(self_: RoundPoint, other: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g2.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g2.x, other.g2.y, other.g2.z) + vec3<f32>(self_.g1.y) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0) + vec3<f32>(self_.g1.y) * other.g1);
}

fn round_point__wedge__dual_num(self_: RoundPoint, other: DualNum) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec2<f32>(other.g0.x));
}

fn round_point__wedge__flat_point(self_: RoundPoint, other: FlatPoint) -> Line {
    return Line(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn round_point__wedge__flector(self_: RoundPoint, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn round_point__wedge__line(self_: RoundPoint, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn round_point__wedge__motor(self_: RoundPoint, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn round_point__wedge__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g9.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g9.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g9.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g10.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g10.x), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec2<f32>(other.g0.x), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g2.x) + vec3<f32>(self_.g1.x) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g2.y, other.g2.y, other.g2.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) - vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g2.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.x, other.g4.y, other.g4.z, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g5.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g5.x, other.g5.y, other.g5.z) + vec3<f32>(self_.g1.y) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g5.z, other.g5.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g5.z, 0.0, -other.g5.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g5.y, other.g5.x, 0.0) + vec3<f32>(self_.g1.y) * other.g4, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g7.z, -other.g7.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g7.z, 0.0, other.g7.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g7.y, -other.g7.x, 0.0) + vec3<f32>(self_.g1.x) * other.g8 - vec3<f32>(self_.g1.y) * vec3<f32>(other.g6.x, other.g6.y, other.g6.z), vec2<f32>(self_.g0.x) * vec2<f32>(other.g6.x, -other.g8.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g6.y, -other.g8.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g6.z, -other.g8.z) + self_.g1 * vec2<f32>(other.g6.w));
}

fn round_point__wedge__plane(self_: RoundPoint, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g1.x * other.g0.w);
}

fn round_point__wedge__rotor(self_: RoundPoint, other: Rotor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn round_point__wedge__round_point(self_: RoundPoint, other: RoundPoint) -> Dipole {
    return Dipole(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.x) + vec3<f32>(self_.g1.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g1.y, other.g1.y, other.g1.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) - vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.x));
}

fn round_point__wedge__scalar(self_: RoundPoint, other: Scalar) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn round_point__wedge__sphere(self_: RoundPoint, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g1.x * other.g1.y + self_.g1.y * other.g1.x);
}

fn round_point__wedge__transflector(self_: RoundPoint, other: Transflector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn round_point__wedge__translator(self_: RoundPoint, other: Translator) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn scalar__wedge__anti_scalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn scalar__wedge__circle(self_: Scalar, other: Circle) -> Circle {
    return Circle(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__wedge__dipole(self_: Scalar, other: Dipole) -> Dipole {
    return Dipole(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * other.g2);
}

fn scalar__wedge__dual_num(self_: Scalar, other: DualNum) -> DualNum {
    return DualNum(vec2<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__flat_point(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return FlatPoint(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec2<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec3<f32>(self_.g0) * other.g4, vec4<f32>(self_.g0) * other.g5, vec4<f32>(self_.g0) * other.g6, vec3<f32>(self_.g0) * other.g7, vec3<f32>(self_.g0) * other.g8, vec3<f32>(self_.g0) * other.g9, vec2<f32>(self_.g0) * other.g10);
}

fn scalar__wedge__plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__round_point(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__wedge__sphere(self_: Scalar, other: Sphere) -> Sphere {
    return Sphere(vec3<f32>(self_.g0) * other.g0, vec2<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__translator(self_: Scalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn sphere__wedge__dual_num(self_: Sphere, other: DualNum) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec2<f32>(other.g0.x));
}

fn sphere__wedge__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec2<f32>(other.g0.x));
}

fn sphere__wedge__round_point(self_: Sphere, other: RoundPoint) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g1.x * other.g1.y + self_.g1.y * other.g1.x);
}

fn sphere__wedge__scalar(self_: Sphere, other: Scalar) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec2<f32>(other.g0));
}

fn transflector__wedge__circle(self_: Transflector, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn transflector__wedge__dipole(self_: Transflector, other: Dipole) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn transflector__wedge__dual_num(self_: Transflector, other: DualNum) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__wedge__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g6.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g6.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g6.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g2.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g2.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, 0.0, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.x));
}

fn transflector__wedge__round_point(self_: Transflector, other: RoundPoint) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g1.x, other.g1.x, other.g1.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn transflector__wedge__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn translator__wedge__dipole(self_: Translator, other: Dipole) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__dual_num(self_: Translator, other: DualNum) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0.x));
}

fn translator__wedge__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g2.x), vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g1.z));
}

fn translator__wedge__round_point(self_: Translator, other: RoundPoint) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.x, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g1.x, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g1.x, other.g0.z));
}

fn translator__wedge__scalar(self_: Translator, other: Scalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn anti_scalar__anti_dot__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_dot__dual_num(self_: AntiScalar, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.y);
}

fn anti_scalar__anti_dot__motor(self_: AntiScalar, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn anti_scalar__anti_dot__multi_vector(self_: AntiScalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.y);
}

fn anti_scalar__anti_dot__rotor(self_: AntiScalar, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn anti_scalar__anti_dot__translator(self_: AntiScalar, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn circle__anti_dot__circle(self_: Circle, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z + self_.g0.w * other.g0.w - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn circle__anti_dot__line(self_: Circle, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn circle__anti_dot__motor(self_: Circle, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn circle__anti_dot__multi_vector(self_: Circle, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g8.x - self_.g0.y * other.g8.y - self_.g0.z * other.g8.z + self_.g0.w * other.g6.w - self_.g1.x * other.g7.x - self_.g1.y * other.g7.y - self_.g1.z * other.g7.z - self_.g2.x * other.g6.x - self_.g2.y * other.g6.y - self_.g2.z * other.g6.z);
}

fn circle__anti_dot__rotor(self_: Circle, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn circle__anti_dot__translator(self_: Circle, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn dipole__anti_dot__dipole(self_: Dipole, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g2.x + self_.g0.y * other.g2.y + self_.g0.z * other.g2.z + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z + self_.g2.x * other.g0.x + self_.g2.y * other.g0.y + self_.g2.z * other.g0.z - self_.g2.w * other.g2.w);
}

fn dipole__anti_dot__flat_point(self_: Dipole, other: FlatPoint) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g2.w * other.g0.w);
}

fn dipole__anti_dot__flector(self_: Dipole, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g2.w * other.g0.w);
}

fn dipole__anti_dot__multi_vector(self_: Dipole, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g5.x + self_.g0.y * other.g5.y + self_.g0.z * other.g5.z + self_.g1.x * other.g4.x + self_.g1.y * other.g4.y + self_.g1.z * other.g4.z + self_.g2.x * other.g3.x + self_.g2.y * other.g3.y + self_.g2.z * other.g3.z - self_.g2.w * other.g5.w);
}

fn dipole__anti_dot__transflector(self_: Dipole, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn dual_num__anti_dot__anti_scalar(self_: DualNum, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0);
}

fn dual_num__anti_dot__dual_num(self_: DualNum, other: DualNum) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x + self_.g0.y * other.g0.y);
}

fn dual_num__anti_dot__motor(self_: DualNum, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn dual_num__anti_dot__multi_vector(self_: DualNum, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x + self_.g0.y * other.g0.y);
}

fn dual_num__anti_dot__rotor(self_: DualNum, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn dual_num__anti_dot__scalar(self_: DualNum, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0);
}

fn dual_num__anti_dot__translator(self_: DualNum, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn flat_point__anti_dot__dipole(self_: FlatPoint, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g2.w);
}

fn flat_point__anti_dot__flat_point(self_: FlatPoint, other: FlatPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w);
}

fn flat_point__anti_dot__flector(self_: FlatPoint, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w);
}

fn flat_point__anti_dot__multi_vector(self_: FlatPoint, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g3.x + self_.g0.y * other.g3.y + self_.g0.z * other.g3.z - self_.g0.w * other.g5.w);
}

fn flector__anti_dot__dipole(self_: Flector, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g2.w);
}

fn flector__anti_dot__flat_point(self_: Flector, other: FlatPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w);
}

fn flector__anti_dot__flector(self_: Flector, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn flector__anti_dot__multi_vector(self_: Flector, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g3.x + self_.g0.y * other.g3.y + self_.g0.z * other.g3.z - self_.g0.w * other.g5.w + self_.g1.x * other.g9.x + self_.g1.y * other.g9.y + self_.g1.z * other.g9.z - self_.g1.w * other.g10.x);
}

fn flector__anti_dot__plane(self_: Flector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn flector__anti_dot__sphere(self_: Flector, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z - self_.g1.w * other.g1.x);
}

fn flector__anti_dot__transflector(self_: Flector, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn line__anti_dot__circle(self_: Line, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__anti_dot__line(self_: Line, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__anti_dot__motor(self_: Line, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__anti_dot__multi_vector(self_: Line, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g7.x - self_.g0.y * other.g7.y - self_.g0.z * other.g7.z - self_.g1.x * other.g6.x - self_.g1.y * other.g6.y - self_.g1.z * other.g6.z);
}

fn line__anti_dot__rotor(self_: Line, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn motor__anti_dot__anti_scalar(self_: Motor, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn motor__anti_dot__circle(self_: Motor, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__anti_dot__dual_num(self_: Motor, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn motor__anti_dot__line(self_: Motor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn motor__anti_dot__motor(self_: Motor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn motor__anti_dot__multi_vector(self_: Motor, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g7.x - self_.g0.y * other.g7.y - self_.g0.z * other.g7.z + self_.g0.w * other.g0.y - self_.g1.x * other.g6.x - self_.g1.y * other.g6.y - self_.g1.z * other.g6.z);
}

fn motor__anti_dot__rotor(self_: Motor, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn motor__anti_dot__translator(self_: Motor, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn multi_vector__anti_dot__anti_scalar(self_: MultiVector, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0);
}

fn multi_vector__anti_dot__circle(self_: MultiVector, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g6.x * other.g2.x - self_.g6.y * other.g2.y - self_.g6.z * other.g2.z + self_.g6.w * other.g0.w - self_.g7.x * other.g1.x - self_.g7.y * other.g1.y - self_.g7.z * other.g1.z - self_.g8.x * other.g0.x - self_.g8.y * other.g0.y - self_.g8.z * other.g0.z);
}

fn multi_vector__anti_dot__dipole(self_: MultiVector, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g3.x * other.g2.x + self_.g3.y * other.g2.y + self_.g3.z * other.g2.z + self_.g4.x * other.g1.x + self_.g4.y * other.g1.y + self_.g4.z * other.g1.z + self_.g5.x * other.g0.x + self_.g5.y * other.g0.y + self_.g5.z * other.g0.z - self_.g5.w * other.g2.w);
}

fn multi_vector__anti_dot__dual_num(self_: MultiVector, other: DualNum) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x + self_.g0.y * other.g0.y);
}

fn multi_vector__anti_dot__flat_point(self_: MultiVector, other: FlatPoint) -> AntiScalar {
    return AntiScalar(self_.g3.x * other.g0.x + self_.g3.y * other.g0.y + self_.g3.z * other.g0.z - self_.g5.w * other.g0.w);
}

fn multi_vector__anti_dot__flector(self_: MultiVector, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g3.x * other.g0.x + self_.g3.y * other.g0.y + self_.g3.z * other.g0.z - self_.g5.w * other.g0.w + self_.g9.x * other.g1.x + self_.g9.y * other.g1.y + self_.g9.z * other.g1.z - self_.g10.x * other.g1.w);
}

fn multi_vector__anti_dot__line(self_: MultiVector, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g6.x * other.g1.x - self_.g6.y * other.g1.y - self_.g6.z * other.g1.z - self_.g7.x * other.g0.x - self_.g7.y * other.g0.y - self_.g7.z * other.g0.z);
}

fn multi_vector__anti_dot__motor(self_: MultiVector, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w - self_.g6.x * other.g1.x - self_.g6.y * other.g1.y - self_.g6.z * other.g1.z - self_.g7.x * other.g0.x - self_.g7.y * other.g0.y - self_.g7.z * other.g0.z);
}

fn multi_vector__anti_dot__multi_vector(self_: MultiVector, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x + self_.g0.y * other.g0.y - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z + self_.g2.x * other.g2.y + self_.g2.y * other.g2.x + self_.g3.x * other.g5.x + self_.g3.y * other.g5.y + self_.g3.z * other.g5.z + self_.g4.x * other.g4.x + self_.g4.y * other.g4.y + self_.g4.z * other.g4.z + self_.g5.x * other.g3.x + self_.g5.y * other.g3.y + self_.g5.z * other.g3.z - self_.g5.w * other.g5.w - self_.g6.x * other.g8.x - self_.g6.y * other.g8.y - self_.g6.z * other.g8.z + self_.g6.w * other.g6.w - self_.g7.x * other.g7.x - self_.g7.y * other.g7.y - self_.g7.z * other.g7.z - self_.g8.x * other.g6.x - self_.g8.y * other.g6.y - self_.g8.z * other.g6.z + self_.g9.x * other.g9.x + self_.g9.y * other.g9.y + self_.g9.z * other.g9.z - self_.g10.x * other.g10.y - self_.g10.y * other.g10.x);
}

fn multi_vector__anti_dot__plane(self_: MultiVector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g9.x * other.g0.x + self_.g9.y * other.g0.y + self_.g9.z * other.g0.z - self_.g10.x * other.g0.w);
}

fn multi_vector__anti_dot__rotor(self_: MultiVector, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w - self_.g7.x * other.g0.x - self_.g7.y * other.g0.y - self_.g7.z * other.g0.z);
}

fn multi_vector__anti_dot__round_point(self_: MultiVector, other: RoundPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z + self_.g2.x * other.g1.y + self_.g2.y * other.g1.x);
}

fn multi_vector__anti_dot__scalar(self_: MultiVector, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0);
}

fn multi_vector__anti_dot__sphere(self_: MultiVector, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g9.x * other.g0.x + self_.g9.y * other.g0.y + self_.g9.z * other.g0.z - self_.g10.x * other.g1.y - self_.g10.y * other.g1.x);
}

fn multi_vector__anti_dot__transflector(self_: MultiVector, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g3.x * other.g0.x + self_.g3.y * other.g0.y + self_.g3.z * other.g0.z + self_.g9.x * other.g1.x + self_.g9.y * other.g1.y + self_.g9.z * other.g1.z - self_.g10.x * other.g1.w);
}

fn multi_vector__anti_dot__translator(self_: MultiVector, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w - self_.g6.x * other.g0.x - self_.g6.y * other.g0.y - self_.g6.z * other.g0.z);
}

fn plane__anti_dot__flector(self_: Plane, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn plane__anti_dot__multi_vector(self_: Plane, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g9.x + self_.g0.y * other.g9.y + self_.g0.z * other.g9.z - self_.g0.w * other.g10.x);
}

fn plane__anti_dot__plane(self_: Plane, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane__anti_dot__sphere(self_: Plane, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g1.x);
}

fn plane__anti_dot__transflector(self_: Plane, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn rotor__anti_dot__anti_scalar(self_: Rotor, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn rotor__anti_dot__circle(self_: Rotor, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn rotor__anti_dot__dual_num(self_: Rotor, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn rotor__anti_dot__line(self_: Rotor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn rotor__anti_dot__motor(self_: Rotor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn rotor__anti_dot__multi_vector(self_: Rotor, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g7.x - self_.g0.y * other.g7.y - self_.g0.z * other.g7.z + self_.g0.w * other.g0.y);
}

fn rotor__anti_dot__rotor(self_: Rotor, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn rotor__anti_dot__translator(self_: Rotor, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn round_point__anti_dot__multi_vector(self_: RoundPoint, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z + self_.g1.x * other.g2.y + self_.g1.y * other.g2.x);
}

fn round_point__anti_dot__round_point(self_: RoundPoint, other: RoundPoint) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g1.x * other.g1.y + self_.g1.y * other.g1.x);
}

fn scalar__anti_dot__dual_num(self_: Scalar, other: DualNum) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.x);
}

fn scalar__anti_dot__multi_vector(self_: Scalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.x);
}

fn scalar__anti_dot__scalar(self_: Scalar, other: Scalar) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn sphere__anti_dot__flector(self_: Sphere, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g1.x * other.g1.w);
}

fn sphere__anti_dot__multi_vector(self_: Sphere, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g9.x + self_.g0.y * other.g9.y + self_.g0.z * other.g9.z - self_.g1.x * other.g10.y - self_.g1.y * other.g10.x);
}

fn sphere__anti_dot__plane(self_: Sphere, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.x * other.g0.w);
}

fn sphere__anti_dot__sphere(self_: Sphere, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.x * other.g1.y - self_.g1.y * other.g1.x);
}

fn sphere__anti_dot__transflector(self_: Sphere, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g1.x * other.g1.w);
}

fn transflector__anti_dot__dipole(self_: Transflector, other: Dipole) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn transflector__anti_dot__flector(self_: Transflector, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn transflector__anti_dot__multi_vector(self_: Transflector, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g3.x + self_.g0.y * other.g3.y + self_.g0.z * other.g3.z + self_.g1.x * other.g9.x + self_.g1.y * other.g9.y + self_.g1.z * other.g9.z - self_.g1.w * other.g10.x);
}

fn transflector__anti_dot__plane(self_: Transflector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn transflector__anti_dot__sphere(self_: Transflector, other: Sphere) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z - self_.g1.w * other.g1.x);
}

fn transflector__anti_dot__transflector(self_: Transflector, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn translator__anti_dot__anti_scalar(self_: Translator, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn translator__anti_dot__circle(self_: Translator, other: Circle) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__anti_dot__dual_num(self_: Translator, other: DualNum) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn translator__anti_dot__motor(self_: Translator, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn translator__anti_dot__multi_vector(self_: Translator, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g6.x - self_.g0.y * other.g6.y - self_.g0.z * other.g6.z + self_.g0.w * other.g0.y);
}

fn translator__anti_dot__rotor(self_: Translator, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn translator__anti_dot__translator(self_: Translator, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn anti_scalar__dot__anti_scalar(self_: AntiScalar, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn anti_scalar__dot__dual_num(self_: AntiScalar, other: DualNum) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.y);
}

fn anti_scalar__dot__motor(self_: AntiScalar, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn anti_scalar__dot__multi_vector(self_: AntiScalar, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.y);
}

fn anti_scalar__dot__rotor(self_: AntiScalar, other: Rotor) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn anti_scalar__dot__translator(self_: AntiScalar, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn circle__dot__circle(self_: Circle, other: Circle) -> Scalar {
    return Scalar(self_.g0.x * other.g2.x + self_.g0.y * other.g2.y + self_.g0.z * other.g2.z - self_.g0.w * other.g0.w + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z + self_.g2.x * other.g0.x + self_.g2.y * other.g0.y + self_.g2.z * other.g0.z);
}

fn circle__dot__line(self_: Circle, other: Line) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z + self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn circle__dot__motor(self_: Circle, other: Motor) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z + self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn circle__dot__multi_vector(self_: Circle, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g8.x + self_.g0.y * other.g8.y + self_.g0.z * other.g8.z - self_.g0.w * other.g6.w + self_.g1.x * other.g7.x + self_.g1.y * other.g7.y + self_.g1.z * other.g7.z + self_.g2.x * other.g6.x + self_.g2.y * other.g6.y + self_.g2.z * other.g6.z);
}

fn circle__dot__rotor(self_: Circle, other: Rotor) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn circle__dot__translator(self_: Circle, other: Translator) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn dipole__dot__dipole(self_: Dipole, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z + self_.g2.w * other.g2.w);
}

fn dipole__dot__flat_point(self_: Dipole, other: FlatPoint) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g2.w * other.g0.w);
}

fn dipole__dot__flector(self_: Dipole, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g2.w * other.g0.w);
}

fn dipole__dot__multi_vector(self_: Dipole, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g5.x - self_.g0.y * other.g5.y - self_.g0.z * other.g5.z - self_.g1.x * other.g4.x - self_.g1.y * other.g4.y - self_.g1.z * other.g4.z - self_.g2.x * other.g3.x - self_.g2.y * other.g3.y - self_.g2.z * other.g3.z + self_.g2.w * other.g5.w);
}

fn dipole__dot__transflector(self_: Dipole, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn dual_num__dot__anti_scalar(self_: DualNum, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0);
}

fn dual_num__dot__dual_num(self_: DualNum, other: DualNum) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x - self_.g0.y * other.g0.y);
}

fn dual_num__dot__motor(self_: DualNum, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w);
}

fn dual_num__dot__multi_vector(self_: DualNum, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x - self_.g0.y * other.g0.y);
}

fn dual_num__dot__rotor(self_: DualNum, other: Rotor) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w);
}

fn dual_num__dot__scalar(self_: DualNum, other: Scalar) -> Scalar {
    return Scalar(self_.g0.x * other.g0);
}

fn dual_num__dot__translator(self_: DualNum, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w);
}

fn flat_point__dot__dipole(self_: FlatPoint, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g2.w);
}

fn flat_point__dot__flat_point(self_: FlatPoint, other: FlatPoint) -> Scalar {
    return Scalar(self_.g0.w * other.g0.w);
}

fn flat_point__dot__flector(self_: FlatPoint, other: Flector) -> Scalar {
    return Scalar(self_.g0.w * other.g0.w);
}

fn flat_point__dot__multi_vector(self_: FlatPoint, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g3.x - self_.g0.y * other.g3.y - self_.g0.z * other.g3.z + self_.g0.w * other.g5.w);
}

fn flector__dot__dipole(self_: Flector, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g2.w);
}

fn flector__dot__flat_point(self_: Flector, other: FlatPoint) -> Scalar {
    return Scalar(self_.g0.w * other.g0.w);
}

fn flector__dot__flector(self_: Flector, other: Flector) -> Scalar {
    return Scalar(self_.g0.w * other.g0.w - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn flector__dot__multi_vector(self_: Flector, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g3.x - self_.g0.y * other.g3.y - self_.g0.z * other.g3.z + self_.g0.w * other.g5.w - self_.g1.x * other.g9.x - self_.g1.y * other.g9.y - self_.g1.z * other.g9.z + self_.g1.w * other.g10.x);
}

fn flector__dot__plane(self_: Flector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn flector__dot__sphere(self_: Flector, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z + self_.g1.w * other.g1.x);
}

fn flector__dot__transflector(self_: Flector, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn line__dot__circle(self_: Line, other: Circle) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z + self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn line__dot__line(self_: Line, other: Line) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn line__dot__motor(self_: Line, other: Motor) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn line__dot__multi_vector(self_: Line, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g7.x + self_.g0.y * other.g7.y + self_.g0.z * other.g7.z + self_.g1.x * other.g6.x + self_.g1.y * other.g6.y + self_.g1.z * other.g6.z);
}

fn line__dot__rotor(self_: Line, other: Rotor) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn motor__dot__anti_scalar(self_: Motor, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn motor__dot__circle(self_: Motor, other: Circle) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z + self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn motor__dot__dual_num(self_: Motor, other: DualNum) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.y);
}

fn motor__dot__line(self_: Motor, other: Line) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn motor__dot__motor(self_: Motor, other: Motor) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn motor__dot__multi_vector(self_: Motor, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g7.x + self_.g0.y * other.g7.y + self_.g0.z * other.g7.z - self_.g0.w * other.g0.y + self_.g1.x * other.g6.x + self_.g1.y * other.g6.y + self_.g1.z * other.g6.z);
}

fn motor__dot__rotor(self_: Motor, other: Rotor) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn motor__dot__translator(self_: Motor, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn multi_vector__dot__anti_scalar(self_: MultiVector, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0);
}

fn multi_vector__dot__circle(self_: MultiVector, other: Circle) -> Scalar {
    return Scalar(self_.g6.x * other.g2.x + self_.g6.y * other.g2.y + self_.g6.z * other.g2.z - self_.g6.w * other.g0.w + self_.g7.x * other.g1.x + self_.g7.y * other.g1.y + self_.g7.z * other.g1.z + self_.g8.x * other.g0.x + self_.g8.y * other.g0.y + self_.g8.z * other.g0.z);
}

fn multi_vector__dot__dipole(self_: MultiVector, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g2.x - self_.g3.y * other.g2.y - self_.g3.z * other.g2.z - self_.g4.x * other.g1.x - self_.g4.y * other.g1.y - self_.g4.z * other.g1.z - self_.g5.x * other.g0.x - self_.g5.y * other.g0.y - self_.g5.z * other.g0.z + self_.g5.w * other.g2.w);
}

fn multi_vector__dot__dual_num(self_: MultiVector, other: DualNum) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x - self_.g0.y * other.g0.y);
}

fn multi_vector__dot__flat_point(self_: MultiVector, other: FlatPoint) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g0.x - self_.g3.y * other.g0.y - self_.g3.z * other.g0.z + self_.g5.w * other.g0.w);
}

fn multi_vector__dot__flector(self_: MultiVector, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g0.x - self_.g3.y * other.g0.y - self_.g3.z * other.g0.z + self_.g5.w * other.g0.w - self_.g9.x * other.g1.x - self_.g9.y * other.g1.y - self_.g9.z * other.g1.z + self_.g10.x * other.g1.w);
}

fn multi_vector__dot__line(self_: MultiVector, other: Line) -> Scalar {
    return Scalar(self_.g6.x * other.g1.x + self_.g6.y * other.g1.y + self_.g6.z * other.g1.z + self_.g7.x * other.g0.x + self_.g7.y * other.g0.y + self_.g7.z * other.g0.z);
}

fn multi_vector__dot__motor(self_: MultiVector, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w + self_.g6.x * other.g1.x + self_.g6.y * other.g1.y + self_.g6.z * other.g1.z + self_.g7.x * other.g0.x + self_.g7.y * other.g0.y + self_.g7.z * other.g0.z);
}

fn multi_vector__dot__multi_vector(self_: MultiVector, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x - self_.g0.y * other.g0.y + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z - self_.g2.x * other.g2.y - self_.g2.y * other.g2.x - self_.g3.x * other.g5.x - self_.g3.y * other.g5.y - self_.g3.z * other.g5.z - self_.g4.x * other.g4.x - self_.g4.y * other.g4.y - self_.g4.z * other.g4.z - self_.g5.x * other.g3.x - self_.g5.y * other.g3.y - self_.g5.z * other.g3.z + self_.g5.w * other.g5.w + self_.g6.x * other.g8.x + self_.g6.y * other.g8.y + self_.g6.z * other.g8.z - self_.g6.w * other.g6.w + self_.g7.x * other.g7.x + self_.g7.y * other.g7.y + self_.g7.z * other.g7.z + self_.g8.x * other.g6.x + self_.g8.y * other.g6.y + self_.g8.z * other.g6.z - self_.g9.x * other.g9.x - self_.g9.y * other.g9.y - self_.g9.z * other.g9.z + self_.g10.x * other.g10.y + self_.g10.y * other.g10.x);
}

fn multi_vector__dot__plane(self_: MultiVector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g9.x * other.g0.x - self_.g9.y * other.g0.y - self_.g9.z * other.g0.z + self_.g10.x * other.g0.w);
}

fn multi_vector__dot__rotor(self_: MultiVector, other: Rotor) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w + self_.g7.x * other.g0.x + self_.g7.y * other.g0.y + self_.g7.z * other.g0.z);
}

fn multi_vector__dot__round_point(self_: MultiVector, other: RoundPoint) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z - self_.g2.x * other.g1.y - self_.g2.y * other.g1.x);
}

fn multi_vector__dot__scalar(self_: MultiVector, other: Scalar) -> Scalar {
    return Scalar(self_.g0.x * other.g0);
}

fn multi_vector__dot__sphere(self_: MultiVector, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g9.x * other.g0.x - self_.g9.y * other.g0.y - self_.g9.z * other.g0.z + self_.g10.x * other.g1.y + self_.g10.y * other.g1.x);
}

fn multi_vector__dot__transflector(self_: MultiVector, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g0.x - self_.g3.y * other.g0.y - self_.g3.z * other.g0.z - self_.g9.x * other.g1.x - self_.g9.y * other.g1.y - self_.g9.z * other.g1.z + self_.g10.x * other.g1.w);
}

fn multi_vector__dot__translator(self_: MultiVector, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w + self_.g6.x * other.g0.x + self_.g6.y * other.g0.y + self_.g6.z * other.g0.z);
}

fn plane__dot__flector(self_: Plane, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn plane__dot__multi_vector(self_: Plane, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g9.x - self_.g0.y * other.g9.y - self_.g0.z * other.g9.z + self_.g0.w * other.g10.x);
}

fn plane__dot__plane(self_: Plane, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane__dot__sphere(self_: Plane, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g1.x);
}

fn plane__dot__transflector(self_: Plane, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn rotor__dot__anti_scalar(self_: Rotor, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn rotor__dot__circle(self_: Rotor, other: Circle) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn rotor__dot__dual_num(self_: Rotor, other: DualNum) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.y);
}

fn rotor__dot__line(self_: Rotor, other: Line) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn rotor__dot__motor(self_: Rotor, other: Motor) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn rotor__dot__multi_vector(self_: Rotor, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g7.x + self_.g0.y * other.g7.y + self_.g0.z * other.g7.z - self_.g0.w * other.g0.y);
}

fn rotor__dot__rotor(self_: Rotor, other: Rotor) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn rotor__dot__translator(self_: Rotor, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn round_point__dot__multi_vector(self_: RoundPoint, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g1.x * other.g2.y - self_.g1.y * other.g2.x);
}

fn round_point__dot__round_point(self_: RoundPoint, other: RoundPoint) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.x * other.g1.y - self_.g1.y * other.g1.x);
}

fn scalar__dot__dual_num(self_: Scalar, other: DualNum) -> Scalar {
    return Scalar(self_.g0 * other.g0.x);
}

fn scalar__dot__multi_vector(self_: Scalar, other: MultiVector) -> Scalar {
    return Scalar(self_.g0 * other.g0.x);
}

fn scalar__dot__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn sphere__dot__flector(self_: Sphere, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z + self_.g1.x * other.g1.w);
}

fn sphere__dot__multi_vector(self_: Sphere, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g9.x - self_.g0.y * other.g9.y - self_.g0.z * other.g9.z + self_.g1.x * other.g10.y + self_.g1.y * other.g10.x);
}

fn sphere__dot__plane(self_: Sphere, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g1.x * other.g0.w);
}

fn sphere__dot__sphere(self_: Sphere, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g1.x * other.g1.y + self_.g1.y * other.g1.x);
}

fn sphere__dot__transflector(self_: Sphere, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z + self_.g1.x * other.g1.w);
}

fn transflector__dot__dipole(self_: Transflector, other: Dipole) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn transflector__dot__flector(self_: Transflector, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn transflector__dot__multi_vector(self_: Transflector, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g3.x - self_.g0.y * other.g3.y - self_.g0.z * other.g3.z - self_.g1.x * other.g9.x - self_.g1.y * other.g9.y - self_.g1.z * other.g9.z + self_.g1.w * other.g10.x);
}

fn transflector__dot__plane(self_: Transflector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn transflector__dot__sphere(self_: Transflector, other: Sphere) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z + self_.g1.w * other.g1.x);
}

fn transflector__dot__transflector(self_: Transflector, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn translator__dot__anti_scalar(self_: Translator, other: AntiScalar) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn translator__dot__circle(self_: Translator, other: Circle) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn translator__dot__dual_num(self_: Translator, other: DualNum) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.y);
}

fn translator__dot__motor(self_: Translator, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn translator__dot__multi_vector(self_: Translator, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g6.x + self_.g0.y * other.g6.y + self_.g0.z * other.g6.z - self_.g0.w * other.g0.y);
}

fn translator__dot__rotor(self_: Translator, other: Rotor) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn translator__dot__translator(self_: Translator, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn circle__bulk(self_: Circle) -> Circle {
    return Circle(vec4<f32>(0.0), vec3<f32>(0.0), self_.g2);
}

fn dipole__bulk(self_: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), self_.g2 * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn flat_point__bulk(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn flector__bulk(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, 0.0), self_.g1 * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn line__bulk(self_: Line) -> Line {
    return Line(vec3<f32>(0.0), self_.g1);
}

fn motor__bulk(self_: Motor) -> Motor {
    return Motor(vec4<f32>(0.0), self_.g1);
}

fn multi_vector__bulk(self_: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), self_.g2 * vec2<f32>(0.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g5 * vec4<f32>(1.0, 1.0, 1.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g8, vec3<f32>(0.0), self_.g10 * vec2<f32>(0.0, 1.0));
}

fn plane__bulk(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn round_point__bulk(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), self_.g1 * vec2<f32>(0.0, 1.0));
}

fn sphere__bulk(self_: Sphere) -> Sphere {
    return Sphere(vec3<f32>(0.0), self_.g1 * vec2<f32>(0.0, 1.0));
}

fn transflector__bulk(self_: Transflector) -> Transflector {
    return Transflector(self_.g0, self_.g1 * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn translator__bulk(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn circle__round_bulk(self_: Circle) -> Circle {
    return Circle(self_.g0 * vec4<f32>(0.0, 0.0, 0.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole__round_bulk(self_: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g1, vec4<f32>(0.0));
}

fn dual_num__round_bulk(self_: DualNum) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(1.0, 0.0));
}

fn multi_vector__round_bulk(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(1.0, 0.0), self_.g1, vec2<f32>(0.0), vec3<f32>(0.0), self_.g4, vec4<f32>(0.0), self_.g6 * vec4<f32>(0.0, 0.0, 0.0, 1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__round_bulk(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0, vec2<f32>(0.0));
}

fn scalar__round_bulk(self_: Scalar) -> Scalar {
    return self_;
}

fn circle__round_weight(self_: Circle) -> Circle {
    return Circle(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn dipole__round_weight(self_: Dipole) -> Dipole {
    return Dipole(self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector__round_weight(self_: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(0.0), self_.g2 * vec2<f32>(1.0, 0.0), self_.g3, vec3<f32>(0.0), vec4<f32>(0.0), self_.g6 * vec4<f32>(1.0, 1.0, 1.0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g10 * vec2<f32>(1.0, 0.0));
}

fn round_point__round_weight(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(vec3<f32>(0.0), self_.g1 * vec2<f32>(1.0, 0.0));
}

fn sphere__round_weight(self_: Sphere) -> Sphere {
    return Sphere(vec3<f32>(0.0), self_.g1 * vec2<f32>(1.0, 0.0));
}

fn anti_scalar__weight(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle__weight(self_: Circle) -> Circle {
    return Circle(vec4<f32>(0.0), self_.g1, vec3<f32>(0.0));
}

fn dipole__weight(self_: Dipole) -> Dipole {
    return Dipole(vec3<f32>(0.0), vec3<f32>(0.0), self_.g2 * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn dual_num__weight(self_: DualNum) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(0.0, 1.0));
}

fn flat_point__weight(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn flector__weight(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(0.0, 0.0, 0.0, 1.0), self_.g1 * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn line__weight(self_: Line) -> Line {
    return Line(self_.g0, vec3<f32>(0.0));
}

fn motor__weight(self_: Motor) -> Motor {
    return Motor(self_.g0, vec3<f32>(0.0));
}

fn multi_vector__weight(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(0.0, 1.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g5 * vec4<f32>(0.0, 0.0, 0.0, 1.0), vec4<f32>(0.0), self_.g7, vec3<f32>(0.0), self_.g9, vec2<f32>(0.0));
}

fn plane__weight(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn rotor__weight(self_: Rotor) -> Rotor {
    return self_;
}

fn sphere__weight(self_: Sphere) -> Sphere {
    return Sphere(self_.g0, vec2<f32>(0.0));
}

fn transflector__weight(self_: Transflector) -> Transflector {
    return Transflector(vec3<f32>(0.0), self_.g1 * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn translator__weight(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(0.0, 0.0, 0.0, 1.0));
}

fn anti_scalar__anti_dual(self_: AntiScalar) -> Scalar {
    return Scalar(self_.g0);
}

fn circle__anti_dual(self_: Circle) -> Dipole {
    return Dipole(vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), self_.g1 * vec3<f32>(-1.0), vec4<f32>(-self_.g2.x, -self_.g2.y, -self_.g2.z, self_.g0.w));
}

fn dipole__anti_dual(self_: Dipole) -> Circle {
    return Circle(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, -self_.g2.w), self_.g1, vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z));
}

fn dual_num__anti_dual(self_: DualNum) -> DualNum {
    return DualNum(self_.g0.yx * vec2<f32>(1.0, -1.0));
}

fn flat_point__anti_dual(self_: FlatPoint) -> Circle {
    return Circle(vec4<f32>(0.0, 0.0, 0.0, -self_.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn flector__anti_dual(self_: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, -self_.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, -self_.g0.w), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__anti_dual(self_: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g0 * vec3<f32>(-1.0), vec4<f32>(-self_.g1.x, -self_.g1.y, -self_.g1.z, 0.0));
}

fn motor__anti_dual(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(-self_.g1.x, -self_.g1.y, -self_.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__anti_dual(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(1.0, -1.0), self_.g9, self_.g10 * vec2<f32>(-1.0), vec3<f32>(-self_.g6.x, self_.g6.y, self_.g6.z), self_.g7 * vec3<f32>(-1.0), vec4<f32>(-self_.g8.x, -self_.g8.y, -self_.g8.z, self_.g6.w), vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, -self_.g5.w), self_.g4, vec3<f32>(self_.g5.x, self_.g5.y, self_.g5.z), self_.g1 * vec3<f32>(-1.0), self_.g2);
}

fn plane__anti_dual(self_: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, -self_.g0.w));
}

fn rotor__anti_dual(self_: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__anti_dual(self_: RoundPoint) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(-1.0), self_.g1);
}

fn scalar__anti_dual(self_: Scalar) -> AntiScalar {
    return AntiScalar(-self_.g0);
}

fn sphere__anti_dual(self_: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0, self_.g1 * vec2<f32>(-1.0));
}

fn transflector__anti_dual(self_: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, -self_.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0, vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__anti_dual(self_: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(-self_.g0.x, -self_.g0.y, -self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__anti_reversal(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle__anti_reversal(self_: Circle) -> Circle {
    return Circle(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn dipole__anti_reversal(self_: Dipole) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec4<f32>(-1.0));
}

fn dual_num__anti_reversal(self_: DualNum) -> DualNum {
    return self_;
}

fn flat_point__anti_reversal(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(-1.0));
}

fn flector__anti_reversal(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1);
}

fn line__anti_reversal(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn motor__anti_reversal(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__anti_reversal(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3 * vec3<f32>(-1.0), self_.g4 * vec3<f32>(-1.0), self_.g5 * vec4<f32>(-1.0), self_.g6 * vec4<f32>(-1.0), self_.g7 * vec3<f32>(-1.0), self_.g8 * vec3<f32>(-1.0), self_.g9, self_.g10);
}

fn plane__anti_reversal(self_: Plane) -> Plane {
    return self_;
}

fn rotor__anti_reversal(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn round_point__anti_reversal(self_: RoundPoint) -> RoundPoint {
    return self_;
}

fn scalar__anti_reversal(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere__anti_reversal(self_: Sphere) -> Sphere {
    return self_;
}

fn transflector__anti_reversal(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1);
}

fn translator__anti_reversal(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn anti_scalar__automorphism(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0);
}

fn circle__automorphism(self_: Circle) -> Circle {
    return Circle(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn dipole__automorphism(self_: Dipole) -> Dipole {
    return self_;
}

fn dual_num__automorphism(self_: DualNum) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(1.0, -1.0));
}

fn flat_point__automorphism(self_: FlatPoint) -> FlatPoint {
    return self_;
}

fn flector__automorphism(self_: Flector) -> Flector {
    return self_;
}

fn line__automorphism(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn motor__automorphism(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__automorphism(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(1.0, -1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec2<f32>(-1.0), self_.g3, self_.g4, self_.g5, self_.g6 * vec4<f32>(-1.0), self_.g7 * vec3<f32>(-1.0), self_.g8 * vec3<f32>(-1.0), self_.g9, self_.g10);
}

fn plane__automorphism(self_: Plane) -> Plane {
    return self_;
}

fn rotor__automorphism(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0));
}

fn round_point__automorphism(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec2<f32>(-1.0));
}

fn scalar__automorphism(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere__automorphism(self_: Sphere) -> Sphere {
    return self_;
}

fn transflector__automorphism(self_: Transflector) -> Transflector {
    return self_;
}

fn translator__automorphism(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0));
}

fn anti_scalar__complement(self_: AntiScalar) -> Scalar {
    return Scalar(self_.g0);
}

fn circle__complement(self_: Circle) -> Dipole {
    return Dipole(self_.g2 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g0 * vec4<f32>(-1.0));
}

fn dipole__complement(self_: Dipole) -> Circle {
    return Circle(self_.g2 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g0 * vec3<f32>(-1.0));
}

fn dual_num__complement(self_: DualNum) -> DualNum {
    return DualNum(self_.g0.yx);
}

fn flat_point__complement(self_: FlatPoint) -> Circle {
    return Circle(self_.g0 * vec4<f32>(-1.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn flector__complement(self_: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(self_.g1.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), self_.g0 * vec4<f32>(-1.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__complement(self_: Line) -> Dipole {
    return Dipole(self_.g1 * vec3<f32>(-1.0), self_.g0 * vec3<f32>(-1.0), vec4<f32>(0.0));
}

fn motor__complement(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), self_.g1 * vec3<f32>(-1.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__complement(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0.yx, self_.g9, self_.g10.yx, self_.g8 * vec3<f32>(-1.0), self_.g7 * vec3<f32>(-1.0), self_.g6 * vec4<f32>(-1.0), self_.g5 * vec4<f32>(-1.0), self_.g4 * vec3<f32>(-1.0), self_.g3 * vec3<f32>(-1.0), self_.g1, self_.g2.yx);
}

fn plane__complement(self_: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(self_.g0.w, 0.0));
}

fn rotor__complement(self_: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__complement(self_: RoundPoint) -> Sphere {
    return Sphere(self_.g0, self_.g1.yx);
}

fn scalar__complement(self_: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn sphere__complement(self_: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0, self_.g1.yx);
}

fn transflector__complement(self_: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(self_.g1.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(-self_.g0.x, -self_.g0.y, -self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__complement(self_: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__conformal_conjugate(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0);
}

fn circle__conformal_conjugate(self_: Circle) -> Circle {
    return Circle(self_.g0, self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn dipole__conformal_conjugate(self_: Dipole) -> Dipole {
    return Dipole(self_.g0, self_.g1, self_.g2 * vec4<f32>(-1.0));
}

fn dual_num__conformal_conjugate(self_: DualNum) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(1.0, -1.0));
}

fn flat_point__conformal_conjugate(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(-1.0));
}

fn flector__conformal_conjugate(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec4<f32>(-1.0));
}

fn line__conformal_conjugate(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn motor__conformal_conjugate(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__conformal_conjugate(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(1.0, -1.0), self_.g1, self_.g2 * vec2<f32>(1.0, -1.0), self_.g3, self_.g4, self_.g5 * vec4<f32>(-1.0), self_.g6, self_.g7 * vec3<f32>(-1.0), self_.g8 * vec3<f32>(-1.0), self_.g9 * vec3<f32>(-1.0), self_.g10 * vec2<f32>(1.0, -1.0));
}

fn plane__conformal_conjugate(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(-1.0));
}

fn rotor__conformal_conjugate(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0));
}

fn round_point__conformal_conjugate(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0, self_.g1 * vec2<f32>(1.0, -1.0));
}

fn scalar__conformal_conjugate(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere__conformal_conjugate(self_: Sphere) -> Sphere {
    return Sphere(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec2<f32>(1.0, -1.0));
}

fn transflector__conformal_conjugate(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec4<f32>(-1.0));
}

fn translator__conformal_conjugate(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0));
}

fn anti_scalar__conjugation(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0);
}

fn circle__conjugation(self_: Circle) -> Circle {
    return self_;
}

fn dipole__conjugation(self_: Dipole) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec4<f32>(-1.0));
}

fn dual_num__conjugation(self_: DualNum) -> DualNum {
    return DualNum(self_.g0 * vec2<f32>(1.0, -1.0));
}

fn flat_point__conjugation(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(-1.0));
}

fn flector__conjugation(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1);
}

fn line__conjugation(self_: Line) -> Line {
    return self_;
}

fn motor__conjugation(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1);
}

fn multi_vector__conjugation(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(1.0, -1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec2<f32>(-1.0), self_.g3 * vec3<f32>(-1.0), self_.g4 * vec3<f32>(-1.0), self_.g5 * vec4<f32>(-1.0), self_.g6, self_.g7, self_.g8, self_.g9, self_.g10);
}

fn plane__conjugation(self_: Plane) -> Plane {
    return self_;
}

fn rotor__conjugation(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn round_point__conjugation(self_: RoundPoint) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec2<f32>(-1.0));
}

fn scalar__conjugation(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere__conjugation(self_: Sphere) -> Sphere {
    return self_;
}

fn transflector__conjugation(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1);
}

fn translator__conjugation(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn anti_scalar__double_complement(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle__double_complement(self_: Circle) -> Circle {
    return self_;
}

fn dipole__double_complement(self_: Dipole) -> Dipole {
    return self_;
}

fn dual_num__double_complement(self_: DualNum) -> DualNum {
    return self_;
}

fn flat_point__double_complement(self_: FlatPoint) -> FlatPoint {
    return self_;
}

fn flector__double_complement(self_: Flector) -> Flector {
    return self_;
}

fn line__double_complement(self_: Line) -> Line {
    return self_;
}

fn motor__double_complement(self_: Motor) -> Motor {
    return self_;
}

fn multi_vector__double_complement(self_: MultiVector) -> MultiVector {
    return self_;
}

fn plane__double_complement(self_: Plane) -> Plane {
    return self_;
}

fn rotor__double_complement(self_: Rotor) -> Rotor {
    return self_;
}

fn round_point__double_complement(self_: RoundPoint) -> RoundPoint {
    return self_;
}

fn scalar__double_complement(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere__double_complement(self_: Sphere) -> Sphere {
    return self_;
}

fn transflector__double_complement(self_: Transflector) -> Transflector {
    return self_;
}

fn translator__double_complement(self_: Translator) -> Translator {
    return self_;
}

fn anti_scalar__dual(self_: AntiScalar) -> Scalar {
    return Scalar(-self_.g0);
}

fn circle__dual(self_: Circle) -> Dipole {
    return Dipole(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, -self_.g0.w));
}

fn dipole__dual(self_: Dipole) -> Circle {
    return Circle(vec4<f32>(-self_.g0.x, -self_.g0.y, -self_.g0.z, self_.g2.w), self_.g1 * vec3<f32>(-1.0), vec3<f32>(-self_.g2.x, self_.g2.y, self_.g2.z));
}

fn dual_num__dual(self_: DualNum) -> DualNum {
    return DualNum(self_.g0.yx * vec2<f32>(-1.0, 1.0));
}

fn flat_point__dual(self_: FlatPoint) -> Circle {
    return Circle(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z));
}

fn flector__dual(self_: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(-self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn line__dual(self_: Line) -> Dipole {
    return Dipole(vec3<f32>(0.0), self_.g0, vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0));
}

fn motor__dual(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(-self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn multi_vector__dual(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0.yx * vec2<f32>(-1.0, 1.0), self_.g9 * vec3<f32>(-1.0), self_.g10, vec3<f32>(self_.g6.x, self_.g6.y, self_.g6.z), self_.g7, vec4<f32>(self_.g8.x, self_.g8.y, self_.g8.z, -self_.g6.w), vec4<f32>(-self_.g3.x, -self_.g3.y, -self_.g3.z, self_.g5.w), self_.g4 * vec3<f32>(-1.0), vec3<f32>(-self_.g5.x, self_.g5.y, self_.g5.z), self_.g1, self_.g2 * vec2<f32>(-1.0));
}

fn plane__dual(self_: Plane) -> RoundPoint {
    return RoundPoint(vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec2<f32>(0.0, self_.g0.w));
}

fn rotor__dual(self_: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(-self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn round_point__dual(self_: RoundPoint) -> Sphere {
    return Sphere(self_.g0, self_.g1 * vec2<f32>(-1.0));
}

fn scalar__dual(self_: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn sphere__dual(self_: Sphere) -> RoundPoint {
    return RoundPoint(self_.g0 * vec3<f32>(-1.0), self_.g1);
}

fn transflector__dual(self_: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec3<f32>(-self_.g1.x, self_.g1.y, self_.g1.z), vec2<f32>(0.0, self_.g1.w), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(-1.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn translator__dual(self_: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(-self_.g0.w, 0.0), vec3<f32>(0.0), vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec2<f32>(0.0));
}

fn anti_scalar__reversal(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn circle__reversal(self_: Circle) -> Circle {
    return Circle(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn dipole__reversal(self_: Dipole) -> Dipole {
    return Dipole(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec4<f32>(-1.0));
}

fn dual_num__reversal(self_: DualNum) -> DualNum {
    return self_;
}

fn flat_point__reversal(self_: FlatPoint) -> FlatPoint {
    return FlatPoint(self_.g0 * vec4<f32>(-1.0));
}

fn flector__reversal(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1);
}

fn line__reversal(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn motor__reversal(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__reversal(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3 * vec3<f32>(-1.0), self_.g4 * vec3<f32>(-1.0), self_.g5 * vec4<f32>(-1.0), self_.g6 * vec4<f32>(-1.0), self_.g7 * vec3<f32>(-1.0), self_.g8 * vec3<f32>(-1.0), self_.g9, self_.g10);
}

fn plane__reversal(self_: Plane) -> Plane {
    return self_;
}

fn rotor__reversal(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn round_point__reversal(self_: RoundPoint) -> RoundPoint {
    return self_;
}

fn scalar__reversal(self_: Scalar) -> Scalar {
    return self_;
}

fn sphere__reversal(self_: Sphere) -> Sphere {
    return self_;
}

fn transflector__reversal(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1);
}

fn translator__reversal(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn circle__bulk_dual(self_: Circle) -> Dipole {
    return circle__complement(circle__bulk(self_));
}

fn dipole__bulk_dual(self_: Dipole) -> Circle {
    return dipole__complement(dipole__bulk(self_));
}

fn flat_point__bulk_dual(self_: FlatPoint) -> Circle {
    return flat_point__complement(flat_point__bulk(self_));
}

fn flector__bulk_dual(self_: Flector) -> MultiVector {
    return flector__complement(flector__bulk(self_));
}

fn line__bulk_dual(self_: Line) -> Dipole {
    return line__complement(line__bulk(self_));
}

fn motor__bulk_dual(self_: Motor) -> MultiVector {
    return motor__complement(motor__bulk(self_));
}

fn multi_vector__bulk_dual(self_: MultiVector) -> MultiVector {
    return multi_vector__complement(multi_vector__bulk(self_));
}

fn plane__bulk_dual(self_: Plane) -> RoundPoint {
    return plane__complement(plane__bulk(self_));
}

fn round_point__bulk_dual(self_: RoundPoint) -> Sphere {
    return round_point__complement(round_point__bulk(self_));
}

fn sphere__bulk_dual(self_: Sphere) -> RoundPoint {
    return sphere__complement(sphere__bulk(self_));
}

fn transflector__bulk_dual(self_: Transflector) -> MultiVector {
    return transflector__complement(transflector__bulk(self_));
}

fn translator__bulk_dual(self_: Translator) -> MultiVector {
    return translator__complement(translator__bulk(self_));
}

fn circle__round_bulk_dual(self_: Circle) -> Dipole {
    return circle__complement(circle__bulk(self_));
}

fn dipole__round_bulk_dual(self_: Dipole) -> Circle {
    return dipole__complement(dipole__bulk(self_));
}

fn flat_point__round_bulk_dual(self_: FlatPoint) -> Circle {
    return flat_point__complement(flat_point__bulk(self_));
}

fn flector__round_bulk_dual(self_: Flector) -> MultiVector {
    return flector__complement(flector__bulk(self_));
}

fn line__round_bulk_dual(self_: Line) -> Dipole {
    return line__complement(line__bulk(self_));
}

fn motor__round_bulk_dual(self_: Motor) -> MultiVector {
    return motor__complement(motor__bulk(self_));
}

fn multi_vector__round_bulk_dual(self_: MultiVector) -> MultiVector {
    return multi_vector__complement(multi_vector__bulk(self_));
}

fn plane__round_bulk_dual(self_: Plane) -> RoundPoint {
    return plane__complement(plane__bulk(self_));
}

fn round_point__round_bulk_dual(self_: RoundPoint) -> Sphere {
    return round_point__complement(round_point__bulk(self_));
}

fn sphere__round_bulk_dual(self_: Sphere) -> RoundPoint {
    return sphere__complement(sphere__bulk(self_));
}

fn transflector__round_bulk_dual(self_: Transflector) -> MultiVector {
    return transflector__complement(transflector__bulk(self_));
}

fn translator__round_bulk_dual(self_: Translator) -> MultiVector {
    return translator__complement(translator__bulk(self_));
}

fn anti_scalar__round_weight_dual(self_: AntiScalar) -> Scalar {
    return anti_scalar__complement(anti_scalar__weight(self_));
}

fn circle__round_weight_dual(self_: Circle) -> Dipole {
    return circle__complement(circle__weight(self_));
}

fn dipole__round_weight_dual(self_: Dipole) -> Circle {
    return dipole__complement(dipole__weight(self_));
}

fn dual_num__round_weight_dual(self_: DualNum) -> DualNum {
    return dual_num__complement(dual_num__weight(self_));
}

fn flat_point__round_weight_dual(self_: FlatPoint) -> Circle {
    return flat_point__complement(flat_point__weight(self_));
}

fn flector__round_weight_dual(self_: Flector) -> MultiVector {
    return flector__complement(flector__weight(self_));
}

fn line__round_weight_dual(self_: Line) -> Dipole {
    return line__complement(line__weight(self_));
}

fn motor__round_weight_dual(self_: Motor) -> MultiVector {
    return motor__complement(motor__weight(self_));
}

fn multi_vector__round_weight_dual(self_: MultiVector) -> MultiVector {
    return multi_vector__complement(multi_vector__weight(self_));
}

fn plane__round_weight_dual(self_: Plane) -> RoundPoint {
    return plane__complement(plane__weight(self_));
}

fn rotor__round_weight_dual(self_: Rotor) -> MultiVector {
    return rotor__complement(rotor__weight(self_));
}

fn sphere__round_weight_dual(self_: Sphere) -> RoundPoint {
    return sphere__complement(sphere__weight(self_));
}

fn transflector__round_weight_dual(self_: Transflector) -> MultiVector {
    return transflector__complement(transflector__weight(self_));
}

fn translator__round_weight_dual(self_: Translator) -> MultiVector {
    return translator__complement(translator__weight(self_));
}

fn anti_scalar__weight_dual(self_: AntiScalar) -> Scalar {
    return anti_scalar__complement(anti_scalar__weight(self_));
}

fn circle__weight_dual(self_: Circle) -> Dipole {
    return circle__complement(circle__weight(self_));
}

fn dipole__weight_dual(self_: Dipole) -> Circle {
    return dipole__complement(dipole__weight(self_));
}

fn dual_num__weight_dual(self_: DualNum) -> DualNum {
    return dual_num__complement(dual_num__weight(self_));
}

fn flat_point__weight_dual(self_: FlatPoint) -> Circle {
    return flat_point__complement(flat_point__weight(self_));
}

fn flector__weight_dual(self_: Flector) -> MultiVector {
    return flector__complement(flector__weight(self_));
}

fn line__weight_dual(self_: Line) -> Dipole {
    return line__complement(line__weight(self_));
}

fn motor__weight_dual(self_: Motor) -> MultiVector {
    return motor__complement(motor__weight(self_));
}

fn multi_vector__weight_dual(self_: MultiVector) -> MultiVector {
    return multi_vector__complement(multi_vector__weight(self_));
}

fn plane__weight_dual(self_: Plane) -> RoundPoint {
    return plane__complement(plane__weight(self_));
}

fn rotor__weight_dual(self_: Rotor) -> MultiVector {
    return rotor__complement(rotor__weight(self_));
}

fn sphere__weight_dual(self_: Sphere) -> RoundPoint {
    return sphere__complement(sphere__weight(self_));
}

fn transflector__weight_dual(self_: Transflector) -> MultiVector {
    return transflector__complement(transflector__weight(self_));
}

fn translator__weight_dual(self_: Translator) -> MultiVector {
    return translator__complement(translator__weight(self_));
}

fn anti_scalar__anti_grade() -> i32 {
    return 0;
}

fn circle__anti_grade() -> i32 {
    return 2;
}

fn dipole__anti_grade() -> i32 {
    return 3;
}

fn flat_point__anti_grade() -> i32 {
    return 3;
}

fn line__anti_grade() -> i32 {
    return 2;
}

fn plane__anti_grade() -> i32 {
    return 1;
}

fn round_point__anti_grade() -> i32 {
    return 4;
}

fn scalar__anti_grade() -> i32 {
    return 5;
}

fn sphere__anti_grade() -> i32 {
    return 1;
}

fn anti_scalar__grade() -> i32 {
    return 5;
}

fn circle__grade() -> i32 {
    return 3;
}

fn dipole__grade() -> i32 {
    return 2;
}

fn flat_point__grade() -> i32 {
    return 2;
}

fn line__grade() -> i32 {
    return 3;
}

fn plane__grade() -> i32 {
    return 4;
}

fn round_point__grade() -> i32 {
    return 1;
}

fn scalar__grade() -> i32 {
    return 0;
}

fn sphere__grade() -> i32 {
    return 4;
}

fn anti_scalar__anti_sqrt(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(sqrt(self_.g0));
}

fn dual_num__anti_sqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let sqrt_t: f32 = sqrt(t);
    return DualNum(vec2<f32>(s / (2.0 * sqrt_t), sqrt_t));
}

fn dual_num__sqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let sqrt_s: f32 = sqrt(s);
    return DualNum(vec2<f32>(sqrt_s, t / (2.0 * sqrt_s)));
}

fn scalar__sqrt(self_: Scalar) -> Scalar {
    return Scalar(sqrt(self_.g0));
}

fn anti_scalar__anti_inverse(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), anti_scalar__anti_dot__anti_scalar(self_, self_)));
}

fn circle__anti_inverse(self_: Circle) -> Circle {
    return circle__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), circle__anti_dot__circle(self_, self_)));
}

fn dipole__anti_inverse(self_: Dipole) -> Dipole {
    return dipole__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), dipole__anti_dot__dipole(self_, self_)));
}

fn dual_num__anti_inverse(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(-1.0 * s / (t * t), 1.0 / t));
}

fn flat_point__anti_inverse(self_: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), flat_point__anti_dot__flat_point(self_, self_)));
}

fn flector__anti_inverse(self_: Flector) -> Flector {
    return flector__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), flector__anti_dot__flector(self_, self_)));
}

fn line__anti_inverse(self_: Line) -> Line {
    return line__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), line__anti_dot__line(self_, self_)));
}

fn motor__anti_inverse(self_: Motor) -> Motor {
    return motor__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), motor__anti_dot__motor(self_, self_)));
}

fn multi_vector__anti_inverse(self_: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), multi_vector__anti_dot__multi_vector(self_, self_)));
}

fn plane__anti_inverse(self_: Plane) -> Plane {
    return plane__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), plane__anti_dot__plane(self_, self_)));
}

fn rotor__anti_inverse(self_: Rotor) -> Rotor {
    return rotor__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), rotor__anti_dot__rotor(self_, self_)));
}

fn round_point__anti_inverse(self_: RoundPoint) -> RoundPoint {
    return round_point__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), round_point__anti_dot__round_point(self_, self_)));
}

fn scalar__anti_inverse(self_: Scalar) -> Scalar {
    return scalar__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), scalar__anti_dot__scalar(self_, self_)));
}

fn sphere__anti_inverse(self_: Sphere) -> Sphere {
    return sphere__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), sphere__anti_dot__sphere(self_, self_)));
}

fn transflector__anti_inverse(self_: Transflector) -> Transflector {
    return transflector__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), transflector__anti_dot__transflector(self_, self_)));
}

fn translator__anti_inverse(self_: Translator) -> Translator {
    return translator__anti_wedge_dot__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__unit(), translator__anti_dot__translator(self_, self_)));
}

fn anti_scalar__inverse(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), anti_scalar__dot__anti_scalar(self_, self_)));
}

fn circle__inverse(self_: Circle) -> Circle {
    return circle__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), circle__dot__circle(self_, self_)));
}

fn dipole__inverse(self_: Dipole) -> Dipole {
    return dipole__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), dipole__dot__dipole(self_, self_)));
}

fn dual_num__inverse(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(1.0 / s, -1.0 * t / (s * s)));
}

fn flat_point__inverse(self_: FlatPoint) -> FlatPoint {
    return flat_point__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), flat_point__dot__flat_point(self_, self_)));
}

fn flector__inverse(self_: Flector) -> Flector {
    return flector__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), flector__dot__flector(self_, self_)));
}

fn line__inverse(self_: Line) -> Line {
    return line__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), line__dot__line(self_, self_)));
}

fn motor__inverse(self_: Motor) -> Motor {
    return motor__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), motor__dot__motor(self_, self_)));
}

fn multi_vector__inverse(self_: MultiVector) -> MultiVector {
    return multi_vector__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), multi_vector__dot__multi_vector(self_, self_)));
}

fn plane__inverse(self_: Plane) -> Plane {
    return plane__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), plane__dot__plane(self_, self_)));
}

fn rotor__inverse(self_: Rotor) -> Rotor {
    return rotor__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), rotor__dot__rotor(self_, self_)));
}

fn round_point__inverse(self_: RoundPoint) -> RoundPoint {
    return round_point__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), round_point__dot__round_point(self_, self_)));
}

fn scalar__inverse(self_: Scalar) -> Scalar {
    return scalar__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), scalar__dot__scalar(self_, self_)));
}

fn sphere__inverse(self_: Sphere) -> Sphere {
    return sphere__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), sphere__dot__sphere(self_, self_)));
}

fn transflector__inverse(self_: Transflector) -> Transflector {
    return transflector__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), transflector__dot__transflector(self_, self_)));
}

fn translator__inverse(self_: Translator) -> Translator {
    return translator__wedge_dot__scalar(self_, scalar__div__scalar(scalar__unit(), translator__dot__translator(self_, self_)));
}

fn dual_num__anti_cos(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(-1.0 * s * sin(t), cos(t)));
}

fn anti_scalar__anti_cosh(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(cosh(self_.g0));
}

fn dual_num__anti_cosh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(s * sinh(t), cosh(t)));
}

fn anti_scalar__anti_exp(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(exp(self_.g0));
}

fn dual_num__anti_exp(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let exp_t: f32 = exp(t);
    return DualNum(vec2<f32>(s * exp_t, exp_t));
}

fn anti_scalar__anti_inverse_sqrt(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(1.0 / sqrt(self_.g0));
}

fn dual_num__anti_inverse_sqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let sqrt_t: f32 = sqrt(t);
    return DualNum(vec2<f32>(-1.0 * s / (2.0 * t * sqrt_t), 1.0 / sqrt_t));
}

fn anti_scalar__anti_pow(self_: AntiScalar, other: f32) -> AntiScalar {
    return AntiScalar(pow(self_.g0, other));
}

fn dual_num__anti_pow(self_: DualNum, other: f32) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(other * pow(t, other - 1.0) * s, pow(t, other)));
}

fn dual_num__anti_sin(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(s * cos(t), sin(t)));
}

fn anti_scalar__anti_sinh(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(sinh(self_.g0));
}

fn dual_num__anti_sinh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(s * cosh(t), sinh(t)));
}

fn dual_num__anti_tan(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let tan_t: f32 = tan(t);
    return DualNum(vec2<f32>(s * (1.0 + tan_t * tan_t), tan_t));
}

fn anti_scalar__anti_tanh(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(tanh(self_.g0));
}

fn dual_num__anti_tanh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let tanh_t: f32 = tanh(t);
    return DualNum(vec2<f32>(s * (1.0 - tanh_t * tanh_t), tanh_t));
}

fn dual_num__cos(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(cos(s), -1.0 * t * sin(s)));
}

fn dual_num__cosh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(cosh(s), t * sinh(s)));
}

fn scalar__cosh(self_: Scalar) -> Scalar {
    return Scalar(cosh(self_.g0));
}

fn dual_num__exp(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let exp_s: f32 = exp(s);
    return DualNum(vec2<f32>(exp_s, t * exp_s));
}

fn scalar__exp(self_: Scalar) -> Scalar {
    return Scalar(exp(self_.g0));
}

fn dual_num__inverse_sqrt(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let sqrt_s: f32 = sqrt(s);
    return DualNum(vec2<f32>(1.0 / sqrt_s, -1.0 * t / (2.0 * s * sqrt_s)));
}

fn scalar__inverse_sqrt(self_: Scalar) -> Scalar {
    return Scalar(1.0 / sqrt(self_.g0));
}

fn dual_num__pow(self_: DualNum, other: f32) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(pow(s, other), other * pow(s, other - 1.0) * t));
}

fn scalar__pow(self_: Scalar, other: f32) -> Scalar {
    return Scalar(pow(self_.g0, other));
}

fn dual_num__sin(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(sin(s), t * cos(s)));
}

fn dual_num__sinh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    return DualNum(vec2<f32>(sinh(s), t * cosh(s)));
}

fn scalar__sinh(self_: Scalar) -> Scalar {
    return Scalar(sinh(self_.g0));
}

fn dual_num__tan(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let tan_s: f32 = tan(s);
    return DualNum(vec2<f32>(tan_s, t * (1.0 + tan_s * tan_s)));
}

fn dual_num__tanh(self_: DualNum) -> DualNum {
    let s: f32 = self_.g0.x;
    let t: f32 = self_.g0.y;
    let tanh_s: f32 = tanh(s);
    return DualNum(vec2<f32>(tanh_s, t * (1.0 - tanh_s * tanh_s)));
}

fn scalar__tanh(self_: Scalar) -> Scalar {
    return Scalar(tanh(self_.g0));
}

fn anti_scalar__bulk_norm_squared(self_: AntiScalar) -> Scalar {
    return anti_scalar__dot__anti_scalar(self_, self_);
}

fn circle__bulk_norm_squared(self_: Circle) -> Scalar {
    return circle__dot__circle(self_, self_);
}

fn dipole__bulk_norm_squared(self_: Dipole) -> Scalar {
    return dipole__dot__dipole(self_, self_);
}

fn dual_num__bulk_norm_squared(self_: DualNum) -> Scalar {
    return dual_num__dot__dual_num(self_, self_);
}

fn flat_point__bulk_norm_squared(self_: FlatPoint) -> Scalar {
    return flat_point__dot__flat_point(self_, self_);
}

fn flector__bulk_norm_squared(self_: Flector) -> Scalar {
    return flector__dot__flector(self_, self_);
}

fn line__bulk_norm_squared(self_: Line) -> Scalar {
    return line__dot__line(self_, self_);
}

fn motor__bulk_norm_squared(self_: Motor) -> Scalar {
    return motor__dot__motor(self_, self_);
}

fn multi_vector__bulk_norm_squared(self_: MultiVector) -> Scalar {
    return multi_vector__dot__multi_vector(self_, self_);
}

fn plane__bulk_norm_squared(self_: Plane) -> Scalar {
    return plane__dot__plane(self_, self_);
}

fn rotor__bulk_norm_squared(self_: Rotor) -> Scalar {
    return rotor__dot__rotor(self_, self_);
}

fn round_point__bulk_norm_squared(self_: RoundPoint) -> Scalar {
    return round_point__dot__round_point(self_, self_);
}

fn scalar__bulk_norm_squared(self_: Scalar) -> Scalar {
    return scalar__dot__scalar(self_, self_);
}

fn sphere__bulk_norm_squared(self_: Sphere) -> Scalar {
    return sphere__dot__sphere(self_, self_);
}

fn transflector__bulk_norm_squared(self_: Transflector) -> Scalar {
    return transflector__dot__transflector(self_, self_);
}

fn translator__bulk_norm_squared(self_: Translator) -> Scalar {
    return translator__dot__translator(self_, self_);
}

fn anti_scalar__bulk_norm(self_: AntiScalar) -> Scalar {
    return scalar__sqrt(anti_scalar__dot__anti_scalar(self_, self_));
}

fn circle__bulk_norm(self_: Circle) -> Scalar {
    return scalar__sqrt(circle__dot__circle(self_, self_));
}

fn dipole__bulk_norm(self_: Dipole) -> Scalar {
    return scalar__sqrt(dipole__dot__dipole(self_, self_));
}

fn dual_num__bulk_norm(self_: DualNum) -> Scalar {
    return scalar__sqrt(dual_num__dot__dual_num(self_, self_));
}

fn flat_point__bulk_norm(self_: FlatPoint) -> Scalar {
    return scalar__sqrt(flat_point__dot__flat_point(self_, self_));
}

fn flector__bulk_norm(self_: Flector) -> Scalar {
    return scalar__sqrt(flector__dot__flector(self_, self_));
}

fn line__bulk_norm(self_: Line) -> Scalar {
    return scalar__sqrt(line__dot__line(self_, self_));
}

fn motor__bulk_norm(self_: Motor) -> Scalar {
    return scalar__sqrt(motor__dot__motor(self_, self_));
}

fn multi_vector__bulk_norm(self_: MultiVector) -> Scalar {
    return scalar__sqrt(multi_vector__dot__multi_vector(self_, self_));
}

fn plane__bulk_norm(self_: Plane) -> Scalar {
    return scalar__sqrt(plane__dot__plane(self_, self_));
}

fn rotor__bulk_norm(self_: Rotor) -> Scalar {
    return scalar__sqrt(rotor__dot__rotor(self_, self_));
}

fn round_point__bulk_norm(self_: RoundPoint) -> Scalar {
    return scalar__sqrt(round_point__dot__round_point(self_, self_));
}

fn scalar__bulk_norm(self_: Scalar) -> Scalar {
    return scalar__sqrt(scalar__dot__scalar(self_, self_));
}

fn sphere__bulk_norm(self_: Sphere) -> Scalar {
    return scalar__sqrt(sphere__dot__sphere(self_, self_));
}

fn transflector__bulk_norm(self_: Transflector) -> Scalar {
    return scalar__sqrt(transflector__dot__transflector(self_, self_));
}

fn translator__bulk_norm(self_: Translator) -> Scalar {
    return scalar__sqrt(translator__dot__translator(self_, self_));
}

fn anti_scalar__weight_norm_squared(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__anti_dot__anti_scalar(self_, self_);
}

fn circle__weight_norm_squared(self_: Circle) -> AntiScalar {
    return circle__anti_dot__circle(self_, self_);
}

fn dipole__weight_norm_squared(self_: Dipole) -> AntiScalar {
    return dipole__anti_dot__dipole(self_, self_);
}

fn dual_num__weight_norm_squared(self_: DualNum) -> AntiScalar {
    return dual_num__anti_dot__dual_num(self_, self_);
}

fn flat_point__weight_norm_squared(self_: FlatPoint) -> AntiScalar {
    return flat_point__anti_dot__flat_point(self_, self_);
}

fn flector__weight_norm_squared(self_: Flector) -> AntiScalar {
    return flector__anti_dot__flector(self_, self_);
}

fn line__weight_norm_squared(self_: Line) -> AntiScalar {
    return line__anti_dot__line(self_, self_);
}

fn motor__weight_norm_squared(self_: Motor) -> AntiScalar {
    return motor__anti_dot__motor(self_, self_);
}

fn multi_vector__weight_norm_squared(self_: MultiVector) -> AntiScalar {
    return multi_vector__anti_dot__multi_vector(self_, self_);
}

fn plane__weight_norm_squared(self_: Plane) -> AntiScalar {
    return plane__anti_dot__plane(self_, self_);
}

fn rotor__weight_norm_squared(self_: Rotor) -> AntiScalar {
    return rotor__anti_dot__rotor(self_, self_);
}

fn round_point__weight_norm_squared(self_: RoundPoint) -> AntiScalar {
    return round_point__anti_dot__round_point(self_, self_);
}

fn scalar__weight_norm_squared(self_: Scalar) -> AntiScalar {
    return scalar__anti_dot__scalar(self_, self_);
}

fn sphere__weight_norm_squared(self_: Sphere) -> AntiScalar {
    return sphere__anti_dot__sphere(self_, self_);
}

fn transflector__weight_norm_squared(self_: Transflector) -> AntiScalar {
    return transflector__anti_dot__transflector(self_, self_);
}

fn translator__weight_norm_squared(self_: Translator) -> AntiScalar {
    return translator__anti_dot__translator(self_, self_);
}

fn anti_scalar__weight_norm(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__anti_sqrt(anti_scalar__anti_dot__anti_scalar(self_, self_));
}

fn circle__weight_norm(self_: Circle) -> AntiScalar {
    return anti_scalar__anti_sqrt(circle__anti_dot__circle(self_, self_));
}

fn dipole__weight_norm(self_: Dipole) -> AntiScalar {
    return anti_scalar__anti_sqrt(dipole__anti_dot__dipole(self_, self_));
}

fn dual_num__weight_norm(self_: DualNum) -> AntiScalar {
    return anti_scalar__anti_sqrt(dual_num__anti_dot__dual_num(self_, self_));
}

fn flat_point__weight_norm(self_: FlatPoint) -> AntiScalar {
    return anti_scalar__anti_sqrt(flat_point__anti_dot__flat_point(self_, self_));
}

fn flector__weight_norm(self_: Flector) -> AntiScalar {
    return anti_scalar__anti_sqrt(flector__anti_dot__flector(self_, self_));
}

fn line__weight_norm(self_: Line) -> AntiScalar {
    return anti_scalar__anti_sqrt(line__anti_dot__line(self_, self_));
}

fn motor__weight_norm(self_: Motor) -> AntiScalar {
    return anti_scalar__anti_sqrt(motor__anti_dot__motor(self_, self_));
}

fn multi_vector__weight_norm(self_: MultiVector) -> AntiScalar {
    return anti_scalar__anti_sqrt(multi_vector__anti_dot__multi_vector(self_, self_));
}

fn plane__weight_norm(self_: Plane) -> AntiScalar {
    return anti_scalar__anti_sqrt(plane__anti_dot__plane(self_, self_));
}

fn rotor__weight_norm(self_: Rotor) -> AntiScalar {
    return anti_scalar__anti_sqrt(rotor__anti_dot__rotor(self_, self_));
}

fn round_point__weight_norm(self_: RoundPoint) -> AntiScalar {
    return anti_scalar__anti_sqrt(round_point__anti_dot__round_point(self_, self_));
}

fn scalar__weight_norm(self_: Scalar) -> AntiScalar {
    return anti_scalar__anti_sqrt(scalar__anti_dot__scalar(self_, self_));
}

fn sphere__weight_norm(self_: Sphere) -> AntiScalar {
    return anti_scalar__anti_sqrt(sphere__anti_dot__sphere(self_, self_));
}

fn transflector__weight_norm(self_: Transflector) -> AntiScalar {
    return anti_scalar__anti_sqrt(transflector__anti_dot__transflector(self_, self_));
}

fn translator__weight_norm(self_: Translator) -> AntiScalar {
    return anti_scalar__anti_sqrt(translator__anti_dot__translator(self_, self_));
}

fn anti_scalar__geometric_norm(self_: AntiScalar) -> DualNum {
    return scalar__add__anti_scalar(anti_scalar__bulk_norm(self_), anti_scalar__weight_norm(self_));
}

fn circle__geometric_norm(self_: Circle) -> DualNum {
    return scalar__add__anti_scalar(circle__bulk_norm(self_), circle__weight_norm(self_));
}

fn dipole__geometric_norm(self_: Dipole) -> DualNum {
    return scalar__add__anti_scalar(dipole__bulk_norm(self_), dipole__weight_norm(self_));
}

fn dual_num__geometric_norm(self_: DualNum) -> DualNum {
    return scalar__add__anti_scalar(dual_num__bulk_norm(self_), dual_num__weight_norm(self_));
}

fn flat_point__geometric_norm(self_: FlatPoint) -> DualNum {
    return scalar__add__anti_scalar(flat_point__bulk_norm(self_), flat_point__weight_norm(self_));
}

fn flector__geometric_norm(self_: Flector) -> DualNum {
    return scalar__add__anti_scalar(flector__bulk_norm(self_), flector__weight_norm(self_));
}

fn line__geometric_norm(self_: Line) -> DualNum {
    return scalar__add__anti_scalar(line__bulk_norm(self_), line__weight_norm(self_));
}

fn motor__geometric_norm(self_: Motor) -> DualNum {
    return scalar__add__anti_scalar(motor__bulk_norm(self_), motor__weight_norm(self_));
}

fn multi_vector__geometric_norm(self_: MultiVector) -> DualNum {
    return scalar__add__anti_scalar(multi_vector__bulk_norm(self_), multi_vector__weight_norm(self_));
}

fn plane__geometric_norm(self_: Plane) -> DualNum {
    return scalar__add__anti_scalar(plane__bulk_norm(self_), plane__weight_norm(self_));
}

fn rotor__geometric_norm(self_: Rotor) -> DualNum {
    return scalar__add__anti_scalar(rotor__bulk_norm(self_), rotor__weight_norm(self_));
}

fn round_point__geometric_norm(self_: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(self_), round_point__weight_norm(self_));
}

fn scalar__geometric_norm(self_: Scalar) -> DualNum {
    return scalar__add__anti_scalar(scalar__bulk_norm(self_), scalar__weight_norm(self_));
}

fn sphere__geometric_norm(self_: Sphere) -> DualNum {
    return scalar__add__anti_scalar(sphere__bulk_norm(self_), sphere__weight_norm(self_));
}

fn transflector__geometric_norm(self_: Transflector) -> DualNum {
    return scalar__add__anti_scalar(transflector__bulk_norm(self_), transflector__weight_norm(self_));
}

fn translator__geometric_norm(self_: Translator) -> DualNum {
    return scalar__add__anti_scalar(translator__bulk_norm(self_), translator__weight_norm(self_));
}

fn anti_scalar__unitized_norm_squared(self_: AntiScalar) -> f32 {
    return anti_scalar__bulk_norm_squared(self_).g0 / anti_scalar__weight_norm_squared(self_).g0;
}

fn circle__unitized_norm_squared(self_: Circle) -> f32 {
    return circle__bulk_norm_squared(self_).g0 / circle__weight_norm_squared(self_).g0;
}

fn dipole__unitized_norm_squared(self_: Dipole) -> f32 {
    return dipole__bulk_norm_squared(self_).g0 / dipole__weight_norm_squared(self_).g0;
}

fn dual_num__unitized_norm_squared(self_: DualNum) -> f32 {
    return dual_num__bulk_norm_squared(self_).g0 / dual_num__weight_norm_squared(self_).g0;
}

fn flat_point__unitized_norm_squared(self_: FlatPoint) -> f32 {
    return flat_point__bulk_norm_squared(self_).g0 / flat_point__weight_norm_squared(self_).g0;
}

fn flector__unitized_norm_squared(self_: Flector) -> f32 {
    return flector__bulk_norm_squared(self_).g0 / flector__weight_norm_squared(self_).g0;
}

fn line__unitized_norm_squared(self_: Line) -> f32 {
    return line__bulk_norm_squared(self_).g0 / line__weight_norm_squared(self_).g0;
}

fn motor__unitized_norm_squared(self_: Motor) -> f32 {
    return motor__bulk_norm_squared(self_).g0 / motor__weight_norm_squared(self_).g0;
}

fn multi_vector__unitized_norm_squared(self_: MultiVector) -> f32 {
    return multi_vector__bulk_norm_squared(self_).g0 / multi_vector__weight_norm_squared(self_).g0;
}

fn plane__unitized_norm_squared(self_: Plane) -> f32 {
    return plane__bulk_norm_squared(self_).g0 / plane__weight_norm_squared(self_).g0;
}

fn rotor__unitized_norm_squared(self_: Rotor) -> f32 {
    return rotor__bulk_norm_squared(self_).g0 / rotor__weight_norm_squared(self_).g0;
}

fn round_point__unitized_norm_squared(self_: RoundPoint) -> f32 {
    return round_point__bulk_norm_squared(self_).g0 / round_point__weight_norm_squared(self_).g0;
}

fn scalar__unitized_norm_squared(self_: Scalar) -> f32 {
    return scalar__bulk_norm_squared(self_).g0 / scalar__weight_norm_squared(self_).g0;
}

fn sphere__unitized_norm_squared(self_: Sphere) -> f32 {
    return sphere__bulk_norm_squared(self_).g0 / sphere__weight_norm_squared(self_).g0;
}

fn transflector__unitized_norm_squared(self_: Transflector) -> f32 {
    return transflector__bulk_norm_squared(self_).g0 / transflector__weight_norm_squared(self_).g0;
}

fn translator__unitized_norm_squared(self_: Translator) -> f32 {
    return translator__bulk_norm_squared(self_).g0 / translator__weight_norm_squared(self_).g0;
}

fn anti_scalar__unitized_norm(self_: AntiScalar) -> f32 {
    return sqrt(anti_scalar__unitized_norm_squared(self_));
}

fn circle__unitized_norm(self_: Circle) -> f32 {
    return sqrt(circle__unitized_norm_squared(self_));
}

fn dipole__unitized_norm(self_: Dipole) -> f32 {
    return sqrt(dipole__unitized_norm_squared(self_));
}

fn dual_num__unitized_norm(self_: DualNum) -> f32 {
    return sqrt(dual_num__unitized_norm_squared(self_));
}

fn flat_point__unitized_norm(self_: FlatPoint) -> f32 {
    return sqrt(flat_point__unitized_norm_squared(self_));
}

fn flector__unitized_norm(self_: Flector) -> f32 {
    return sqrt(flector__unitized_norm_squared(self_));
}

fn line__unitized_norm(self_: Line) -> f32 {
    return sqrt(line__unitized_norm_squared(self_));
}

fn motor__unitized_norm(self_: Motor) -> f32 {
    return sqrt(motor__unitized_norm_squared(self_));
}

fn multi_vector__unitized_norm(self_: MultiVector) -> f32 {
    return sqrt(multi_vector__unitized_norm_squared(self_));
}

fn plane__unitized_norm(self_: Plane) -> f32 {
    return sqrt(plane__unitized_norm_squared(self_));
}

fn rotor__unitized_norm(self_: Rotor) -> f32 {
    return sqrt(rotor__unitized_norm_squared(self_));
}

fn round_point__unitized_norm(self_: RoundPoint) -> f32 {
    return sqrt(round_point__unitized_norm_squared(self_));
}

fn scalar__unitized_norm(self_: Scalar) -> f32 {
    return sqrt(scalar__unitized_norm_squared(self_));
}

fn sphere__unitized_norm(self_: Sphere) -> f32 {
    return sqrt(sphere__unitized_norm_squared(self_));
}

fn transflector__unitized_norm(self_: Transflector) -> f32 {
    return sqrt(transflector__unitized_norm_squared(self_));
}

fn translator__unitized_norm(self_: Translator) -> f32 {
    return sqrt(translator__unitized_norm_squared(self_));
}

fn anti_scalar__unitize(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__wedge_dot__scalar(self_, Scalar(1.0 / anti_scalar__weight_norm(self_).g0));
}

fn circle__unitize(self_: Circle) -> Circle {
    return circle__wedge_dot__scalar(self_, Scalar(1.0 / circle__weight_norm(self_).g0));
}

fn dipole__unitize(self_: Dipole) -> Dipole {
    return dipole__wedge_dot__scalar(self_, Scalar(1.0 / dipole__weight_norm(self_).g0));
}

fn dual_num__unitize(self_: DualNum) -> DualNum {
    return dual_num__wedge_dot__scalar(self_, Scalar(1.0 / dual_num__weight_norm(self_).g0));
}

fn flat_point__unitize(self_: FlatPoint) -> FlatPoint {
    return flat_point__wedge_dot__scalar(self_, Scalar(1.0 / flat_point__weight_norm(self_).g0));
}

fn flector__unitize(self_: Flector) -> Flector {
    return flector__wedge_dot__scalar(self_, Scalar(1.0 / flector__weight_norm(self_).g0));
}

fn line__unitize(self_: Line) -> Line {
    return line__wedge_dot__scalar(self_, Scalar(1.0 / line__weight_norm(self_).g0));
}

fn motor__unitize(self_: Motor) -> Motor {
    return motor__wedge_dot__scalar(self_, Scalar(1.0 / motor__weight_norm(self_).g0));
}

fn multi_vector__unitize(self_: MultiVector) -> MultiVector {
    return multi_vector__wedge_dot__scalar(self_, Scalar(1.0 / multi_vector__weight_norm(self_).g0));
}

fn plane__unitize(self_: Plane) -> Plane {
    return plane__wedge_dot__scalar(self_, Scalar(1.0 / plane__weight_norm(self_).g0));
}

fn rotor__unitize(self_: Rotor) -> Rotor {
    return rotor__wedge_dot__scalar(self_, Scalar(1.0 / rotor__weight_norm(self_).g0));
}

fn round_point__unitize(self_: RoundPoint) -> RoundPoint {
    return round_point__wedge_dot__scalar(self_, Scalar(1.0 / round_point__weight_norm(self_).g0));
}

fn scalar__unitize(self_: Scalar) -> Scalar {
    return scalar__wedge_dot__scalar(self_, Scalar(1.0 / scalar__weight_norm(self_).g0));
}

fn sphere__unitize(self_: Sphere) -> Sphere {
    return sphere__wedge_dot__scalar(self_, Scalar(1.0 / sphere__weight_norm(self_).g0));
}

fn transflector__unitize(self_: Transflector) -> Transflector {
    return transflector__wedge_dot__scalar(self_, Scalar(1.0 / transflector__weight_norm(self_).g0));
}

fn translator__unitize(self_: Translator) -> Translator {
    return translator__wedge_dot__scalar(self_, Scalar(1.0 / translator__weight_norm(self_).g0));
}

fn anti_scalar__sandwich__circle(self_: AntiScalar, other: Circle) -> Circle {
    return circle__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__circle(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return dipole__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__dipole(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__flat_point(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__flat_point(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__flector(self_: AntiScalar, other: Flector) -> Flector {
    return flector__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__flector(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__line(self_: AntiScalar, other: Line) -> Line {
    return line__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__line(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__motor(self_: AntiScalar, other: Motor) -> Motor {
    return motor__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__motor(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__multi_vector(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__plane(self_: AntiScalar, other: Plane) -> Plane {
    return plane__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__plane(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return rotor__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__rotor(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__round_point(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return round_point__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__round_point(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return sphere__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__sphere(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return transflector__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__transflector(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__translator(self_: AntiScalar, other: Translator) -> Translator {
    return translator__anti_wedge_dot__anti_scalar(anti_scalar__anti_wedge_dot__translator(self_, other), anti_scalar__anti_reversal(self_));
}

fn circle__sandwich__circle(self_: Circle, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__circle(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__dipole(self_: Circle, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__dipole(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__flat_point(self_: Circle, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__flat_point(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__flector(self_: Circle, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__flector(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__line(self_: Circle, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__line(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__motor(self_: Circle, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__motor(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__multi_vector(self_, other), circle__anti_reversal(self_));
}

fn circle__sandwich__plane(self_: Circle, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__plane(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__rotor(self_: Circle, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__rotor(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__round_point(self_: Circle, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__round_point(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__sphere(self_: Circle, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__sphere(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__transflector(self_: Circle, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__transflector(self_, other), circle__anti_reversal(self_)));
}

fn circle__sandwich__translator(self_: Circle, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__circle(circle__anti_wedge_dot__translator(self_, other), circle__anti_reversal(self_)));
}

fn dipole__sandwich__circle(self_: Dipole, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__circle(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__dipole(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__flat_point(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__flat_point(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__flector(self_: Dipole, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__flector(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__line(self_: Dipole, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__line(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__motor(self_: Dipole, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__motor(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__multi_vector(self_, other), dipole__anti_reversal(self_));
}

fn dipole__sandwich__plane(self_: Dipole, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__plane(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__rotor(self_: Dipole, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__rotor(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__round_point(self_: Dipole, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__round_point(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__sphere(self_: Dipole, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__sphere(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__transflector(self_: Dipole, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__transflector(self_, other), dipole__anti_reversal(self_)));
}

fn dipole__sandwich__translator(self_: Dipole, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__dipole(dipole__anti_wedge_dot__translator(self_, other), dipole__anti_reversal(self_)));
}

fn dual_num__sandwich__circle(self_: DualNum, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__circle(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__dipole(self_: DualNum, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__dipole(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__flat_point(self_: DualNum, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__flat_point(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__flector(self_: DualNum, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__flector(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__line(self_: DualNum, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__line(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__motor(self_: DualNum, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__motor(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__multi_vector(self_, other), dual_num__anti_reversal(self_));
}

fn dual_num__sandwich__plane(self_: DualNum, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__plane(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__rotor(self_: DualNum, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__rotor(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__round_point(self_: DualNum, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__round_point(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__sphere(self_: DualNum, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__sphere(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__transflector(self_: DualNum, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__transflector(self_, other), dual_num__anti_reversal(self_)));
}

fn dual_num__sandwich__translator(self_: DualNum, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__dual_num(dual_num__anti_wedge_dot__translator(self_, other), dual_num__anti_reversal(self_)));
}

fn flat_point__sandwich__circle(self_: FlatPoint, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__circle(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__dipole(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return translator__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__flat_point(self_, other), flat_point__anti_reversal(self_));
}

fn flat_point__sandwich__flector(self_: FlatPoint, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__flector(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__line(self_: FlatPoint, other: Line) -> Line {
    return multi_vector__into__line(transflector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__line(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__motor(self_: FlatPoint, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__motor(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__multi_vector(self_, other), flat_point__anti_reversal(self_));
}

fn flat_point__sandwich__plane(self_: FlatPoint, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__plane(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__rotor(self_: FlatPoint, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__rotor(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__round_point(self_: FlatPoint, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__round_point(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__sphere(self_: FlatPoint, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__sphere(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__transflector(self_: FlatPoint, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__transflector(self_, other), flat_point__anti_reversal(self_)));
}

fn flat_point__sandwich__translator(self_: FlatPoint, other: Translator) -> Translator {
    return flat_point__anti_wedge_dot__flat_point(flat_point__anti_wedge_dot__translator(self_, other), flat_point__anti_reversal(self_));
}

fn flector__sandwich__circle(self_: Flector, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__circle(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__dipole(self_: Flector, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__dipole(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__flat_point(self_: Flector, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__flat_point(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__flector(self_: Flector, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__flector(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__line(self_: Flector, other: Line) -> Line {
    return multi_vector__into__line(flector__anti_wedge_dot__flector(flector__anti_wedge_dot__line(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__motor(self_: Flector, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__anti_wedge_dot__flector(flector__anti_wedge_dot__motor(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__multi_vector(self_, other), flector__anti_reversal(self_));
}

fn flector__sandwich__plane(self_: Flector, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__plane(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__rotor(self_: Flector, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__anti_wedge_dot__flector(flector__anti_wedge_dot__rotor(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__round_point(self_: Flector, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__round_point(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__sphere(self_: Flector, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__sphere(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__transflector(self_: Flector, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__flector(flector__anti_wedge_dot__transflector(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__translator(self_: Flector, other: Translator) -> Translator {
    return multi_vector__into__translator(flector__anti_wedge_dot__flector(flector__anti_wedge_dot__translator(self_, other), flector__anti_reversal(self_)));
}

fn line__sandwich__circle(self_: Line, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__circle(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__dipole(self_: Line, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__dipole(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__flat_point(self_: Line, other: FlatPoint) -> FlatPoint {
    return flector__into__flat_point(transflector__anti_wedge_dot__line(line__anti_wedge_dot__flat_point(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__flector(self_: Line, other: Flector) -> Flector {
    return flector__anti_wedge_dot__line(line__anti_wedge_dot__flector(self_, other), line__anti_reversal(self_));
}

fn line__sandwich__line(self_: Line, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__line(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__motor(self_: Line, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__motor(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__multi_vector(self_, other), line__anti_reversal(self_));
}

fn line__sandwich__plane(self_: Line, other: Plane) -> Plane {
    return flector__into__plane(flector__anti_wedge_dot__line(line__anti_wedge_dot__plane(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__rotor(self_: Line, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__rotor(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__round_point(self_: Line, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__round_point(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__sphere(self_: Line, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__sphere(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__transflector(self_: Line, other: Transflector) -> Transflector {
    return flector__into__transflector(flector__anti_wedge_dot__line(line__anti_wedge_dot__transflector(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__translator(self_: Line, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__line(line__anti_wedge_dot__translator(self_, other), line__anti_reversal(self_)));
}

fn motor__sandwich__circle(self_: Motor, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__circle(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__dipole(self_: Motor, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__dipole(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__flat_point(self_: Motor, other: FlatPoint) -> FlatPoint {
    return flector__into__flat_point(flector__anti_wedge_dot__motor(motor__anti_wedge_dot__flat_point(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__flector(self_: Motor, other: Flector) -> Flector {
    return flector__anti_wedge_dot__motor(motor__anti_wedge_dot__flector(self_, other), motor__anti_reversal(self_));
}

fn motor__sandwich__line(self_: Motor, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__line(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__motor(self_: Motor, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__motor(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__multi_vector(self_, other), motor__anti_reversal(self_));
}

fn motor__sandwich__plane(self_: Motor, other: Plane) -> Plane {
    return flector__into__plane(flector__anti_wedge_dot__motor(motor__anti_wedge_dot__plane(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__rotor(self_: Motor, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__rotor(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__round_point(self_: Motor, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__round_point(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__sphere(self_: Motor, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__sphere(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__transflector(self_: Motor, other: Transflector) -> Transflector {
    return flector__into__transflector(flector__anti_wedge_dot__motor(motor__anti_wedge_dot__transflector(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__translator(self_: Motor, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__motor(motor__anti_wedge_dot__translator(self_, other), motor__anti_reversal(self_)));
}

fn multi_vector__sandwich__circle(self_: MultiVector, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__circle(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__dipole(self_: MultiVector, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__dipole(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__flat_point(self_: MultiVector, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__flat_point(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__flector(self_: MultiVector, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__flector(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__line(self_: MultiVector, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__line(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__motor(self_: MultiVector, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__motor(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__multi_vector(self_, other), multi_vector__anti_reversal(self_));
}

fn multi_vector__sandwich__plane(self_: MultiVector, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__plane(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__rotor(self_: MultiVector, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__rotor(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__round_point(self_: MultiVector, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__round_point(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__sphere(self_: MultiVector, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__sphere(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__transflector(self_: MultiVector, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__transflector(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__translator(self_: MultiVector, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__multi_vector(multi_vector__anti_wedge_dot__translator(self_, other), multi_vector__anti_reversal(self_)));
}

fn plane__sandwich__circle(self_: Plane, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__circle(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__dipole(self_: Plane, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__dipole(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__flat_point(self_: Plane, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__flat_point(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__flector(self_: Plane, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__flector(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__line(self_: Plane, other: Line) -> Line {
    return multi_vector__into__line(flector__anti_wedge_dot__plane(plane__anti_wedge_dot__line(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__motor(self_: Plane, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__anti_wedge_dot__plane(plane__anti_wedge_dot__motor(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__multi_vector(self_, other), plane__anti_reversal(self_));
}

fn plane__sandwich__plane(self_: Plane, other: Plane) -> Plane {
    return flector__into__plane(motor__anti_wedge_dot__plane(plane__anti_wedge_dot__plane(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__rotor(self_: Plane, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__anti_wedge_dot__plane(plane__anti_wedge_dot__rotor(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__round_point(self_: Plane, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__round_point(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__sphere(self_: Plane, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__sphere(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__transflector(self_: Plane, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__plane(plane__anti_wedge_dot__transflector(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__translator(self_: Plane, other: Translator) -> Translator {
    return multi_vector__into__translator(transflector__anti_wedge_dot__plane(plane__anti_wedge_dot__translator(self_, other), plane__anti_reversal(self_)));
}

fn rotor__sandwich__circle(self_: Rotor, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__circle(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__dipole(self_: Rotor, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__dipole(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__flat_point(self_: Rotor, other: FlatPoint) -> FlatPoint {
    return flector__into__flat_point(flector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__flat_point(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__flector(self_: Rotor, other: Flector) -> Flector {
    return flector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__flector(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__line(self_: Rotor, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__line(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__motor(self_: Rotor, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__motor(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__multi_vector(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__plane(self_: Rotor, other: Plane) -> Plane {
    return flector__into__plane(flector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__plane(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return rotor__anti_wedge_dot__rotor(rotor__anti_wedge_dot__rotor(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__round_point(self_: Rotor, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__round_point(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__sphere(self_: Rotor, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__sphere(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__transflector(self_: Rotor, other: Transflector) -> Transflector {
    return flector__into__transflector(flector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__transflector(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__translator(self_: Rotor, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__rotor(rotor__anti_wedge_dot__translator(self_, other), rotor__anti_reversal(self_)));
}

fn round_point__sandwich__circle(self_: RoundPoint, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__circle(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__dipole(self_: RoundPoint, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__dipole(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__flat_point(self_: RoundPoint, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__flat_point(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__flector(self_: RoundPoint, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__flector(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__line(self_: RoundPoint, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__line(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__motor(self_: RoundPoint, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__motor(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__multi_vector(self_, other), round_point__anti_reversal(self_));
}

fn round_point__sandwich__plane(self_: RoundPoint, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__plane(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__rotor(self_: RoundPoint, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__rotor(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__round_point(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__sphere(self_: RoundPoint, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__sphere(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__transflector(self_: RoundPoint, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__transflector(self_, other), round_point__anti_reversal(self_)));
}

fn round_point__sandwich__translator(self_: RoundPoint, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__round_point(round_point__anti_wedge_dot__translator(self_, other), round_point__anti_reversal(self_)));
}

fn scalar__sandwich__circle(self_: Scalar, other: Circle) -> Circle {
    return dipole__anti_wedge_dot__scalar(scalar__anti_wedge_dot__circle(self_, other), scalar__anti_reversal(self_));
}

fn scalar__sandwich__dipole(self_: Scalar, other: Dipole) -> Dipole {
    return circle__anti_wedge_dot__scalar(scalar__anti_wedge_dot__dipole(self_, other), scalar__anti_reversal(self_));
}

fn scalar__sandwich__flat_point(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return dipole__into__flat_point(circle__anti_wedge_dot__scalar(scalar__anti_wedge_dot__flat_point(self_, other), scalar__anti_reversal(self_)));
}

fn scalar__sandwich__flector(self_: Scalar, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__scalar(scalar__anti_wedge_dot__flector(self_, other), scalar__anti_reversal(self_)));
}

fn scalar__sandwich__line(self_: Scalar, other: Line) -> Line {
    return circle__into__line(dipole__anti_wedge_dot__scalar(scalar__anti_wedge_dot__line(self_, other), scalar__anti_reversal(self_)));
}

fn scalar__sandwich__motor(self_: Scalar, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__scalar(scalar__anti_wedge_dot__motor(self_, other), scalar__anti_reversal(self_)));
}

fn scalar__sandwich__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__scalar(scalar__anti_wedge_dot__multi_vector(self_, other), scalar__anti_reversal(self_));
}

fn scalar__sandwich__plane(self_: Scalar, other: Plane) -> Plane {
    return sphere__into__plane(round_point__anti_wedge_dot__scalar(scalar__anti_wedge_dot__plane(self_, other), scalar__anti_reversal(self_)));
}

fn scalar__sandwich__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__scalar(scalar__anti_wedge_dot__rotor(self_, other), scalar__anti_reversal(self_)));
}

fn scalar__sandwich__round_point(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return sphere__anti_wedge_dot__scalar(scalar__anti_wedge_dot__round_point(self_, other), scalar__anti_reversal(self_));
}

fn scalar__sandwich__sphere(self_: Scalar, other: Sphere) -> Sphere {
    return round_point__anti_wedge_dot__scalar(scalar__anti_wedge_dot__sphere(self_, other), scalar__anti_reversal(self_));
}

fn scalar__sandwich__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__scalar(scalar__anti_wedge_dot__transflector(self_, other), scalar__anti_reversal(self_)));
}

fn scalar__sandwich__translator(self_: Scalar, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__scalar(scalar__anti_wedge_dot__translator(self_, other), scalar__anti_reversal(self_)));
}

fn sphere__sandwich__circle(self_: Sphere, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__circle(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__dipole(self_: Sphere, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__dipole(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__flat_point(self_: Sphere, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__flat_point(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__flector(self_: Sphere, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__flector(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__line(self_: Sphere, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__line(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__motor(self_: Sphere, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__motor(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__multi_vector(self_, other), sphere__anti_reversal(self_));
}

fn sphere__sandwich__plane(self_: Sphere, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__plane(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__rotor(self_: Sphere, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__rotor(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__round_point(self_: Sphere, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__round_point(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__sphere(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__transflector(self_: Sphere, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__transflector(self_, other), sphere__anti_reversal(self_)));
}

fn sphere__sandwich__translator(self_: Sphere, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__anti_wedge_dot__sphere(sphere__anti_wedge_dot__translator(self_, other), sphere__anti_reversal(self_)));
}

fn transflector__sandwich__circle(self_: Transflector, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__circle(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__dipole(self_: Transflector, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__dipole(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__flat_point(self_: Transflector, other: FlatPoint) -> FlatPoint {
    return multi_vector__into__flat_point(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__flat_point(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__flector(self_: Transflector, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__flector(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__line(self_: Transflector, other: Line) -> Line {
    return multi_vector__into__line(flector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__line(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__motor(self_: Transflector, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__motor(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__multi_vector(self_, other), transflector__anti_reversal(self_));
}

fn transflector__sandwich__plane(self_: Transflector, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__plane(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__rotor(self_: Transflector, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__rotor(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__round_point(self_: Transflector, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__round_point(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__sphere(self_: Transflector, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__sphere(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__transflector(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__translator(self_: Transflector, other: Translator) -> Translator {
    return multi_vector__into__translator(transflector__anti_wedge_dot__transflector(transflector__anti_wedge_dot__translator(self_, other), transflector__anti_reversal(self_)));
}

fn translator__sandwich__circle(self_: Translator, other: Circle) -> Circle {
    return multi_vector__into__circle(multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__circle(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__dipole(self_: Translator, other: Dipole) -> Dipole {
    return multi_vector__into__dipole(multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__dipole(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__flat_point(self_: Translator, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge_dot__translator(translator__anti_wedge_dot__flat_point(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__flector(self_: Translator, other: Flector) -> Flector {
    return flector__anti_wedge_dot__translator(translator__anti_wedge_dot__flector(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__line(self_: Translator, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__line(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__motor(self_: Translator, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__motor(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__multi_vector(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__plane(self_: Translator, other: Plane) -> Plane {
    return transflector__into__plane(transflector__anti_wedge_dot__translator(translator__anti_wedge_dot__plane(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__rotor(self_: Translator, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__rotor(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__round_point(self_: Translator, other: RoundPoint) -> RoundPoint {
    return multi_vector__into__round_point(multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__round_point(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__sphere(self_: Translator, other: Sphere) -> Sphere {
    return multi_vector__into__sphere(multi_vector__anti_wedge_dot__translator(translator__anti_wedge_dot__sphere(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__transflector(self_: Translator, other: Transflector) -> Transflector {
    return transflector__anti_wedge_dot__translator(translator__anti_wedge_dot__transflector(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__translator(self_: Translator, other: Translator) -> Translator {
    return translator__anti_wedge_dot__translator(translator__anti_wedge_dot__translator(self_, other), translator__anti_reversal(self_));
}

fn flat_point__point_inversion__circle(self_: FlatPoint, other: Circle) -> Circle {
    return flat_point__sandwich__circle(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return flat_point__sandwich__dipole(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flat_point__sandwich__flat_point(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__flector(self_: FlatPoint, other: Flector) -> Flector {
    return flat_point__sandwich__flector(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__line(self_: FlatPoint, other: Line) -> Line {
    return flat_point__sandwich__line(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__motor(self_: FlatPoint, other: Motor) -> Motor {
    return flat_point__sandwich__motor(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flat_point__sandwich__multi_vector(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__plane(self_: FlatPoint, other: Plane) -> Plane {
    return flat_point__sandwich__plane(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__rotor(self_: FlatPoint, other: Rotor) -> Rotor {
    return flat_point__sandwich__rotor(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__round_point(self_: FlatPoint, other: RoundPoint) -> RoundPoint {
    return flat_point__sandwich__round_point(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__sphere(self_: FlatPoint, other: Sphere) -> Sphere {
    return flat_point__sandwich__sphere(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__transflector(self_: FlatPoint, other: Transflector) -> Transflector {
    return flat_point__sandwich__transflector(flat_point__unitize(self_), other);
}

fn flat_point__point_inversion__translator(self_: FlatPoint, other: Translator) -> Translator {
    return flat_point__sandwich__translator(flat_point__unitize(self_), other);
}

fn plane__reflect__circle(self_: Plane, other: Circle) -> Circle {
    return plane__sandwich__circle(plane__unitize(self_), other);
}

fn plane__reflect__dipole(self_: Plane, other: Dipole) -> Dipole {
    return plane__sandwich__dipole(plane__unitize(self_), other);
}

fn plane__reflect__flat_point(self_: Plane, other: FlatPoint) -> FlatPoint {
    return plane__sandwich__flat_point(plane__unitize(self_), other);
}

fn plane__reflect__flector(self_: Plane, other: Flector) -> Flector {
    return plane__sandwich__flector(plane__unitize(self_), other);
}

fn plane__reflect__line(self_: Plane, other: Line) -> Line {
    return plane__sandwich__line(plane__unitize(self_), other);
}

fn plane__reflect__motor(self_: Plane, other: Motor) -> Motor {
    return plane__sandwich__motor(plane__unitize(self_), other);
}

fn plane__reflect__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__sandwich__multi_vector(plane__unitize(self_), other);
}

fn plane__reflect__plane(self_: Plane, other: Plane) -> Plane {
    return plane__sandwich__plane(plane__unitize(self_), other);
}

fn plane__reflect__rotor(self_: Plane, other: Rotor) -> Rotor {
    return plane__sandwich__rotor(plane__unitize(self_), other);
}

fn plane__reflect__round_point(self_: Plane, other: RoundPoint) -> RoundPoint {
    return plane__sandwich__round_point(plane__unitize(self_), other);
}

fn plane__reflect__sphere(self_: Plane, other: Sphere) -> Sphere {
    return plane__sandwich__sphere(plane__unitize(self_), other);
}

fn plane__reflect__transflector(self_: Plane, other: Transflector) -> Transflector {
    return plane__sandwich__transflector(plane__unitize(self_), other);
}

fn plane__reflect__translator(self_: Plane, other: Translator) -> Translator {
    return plane__sandwich__translator(plane__unitize(self_), other);
}

fn rotor__rotate__circle(self_: Rotor, other: Circle) -> Circle {
    return rotor__sandwich__circle(self_, other);
}

fn rotor__rotate__dipole(self_: Rotor, other: Dipole) -> Dipole {
    return rotor__sandwich__dipole(self_, other);
}

fn rotor__rotate__flat_point(self_: Rotor, other: FlatPoint) -> FlatPoint {
    return rotor__sandwich__flat_point(self_, other);
}

fn rotor__rotate__flector(self_: Rotor, other: Flector) -> Flector {
    return rotor__sandwich__flector(self_, other);
}

fn rotor__rotate__line(self_: Rotor, other: Line) -> Line {
    return rotor__sandwich__line(self_, other);
}

fn rotor__rotate__motor(self_: Rotor, other: Motor) -> Motor {
    return rotor__sandwich__motor(self_, other);
}

fn rotor__rotate__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return rotor__sandwich__multi_vector(self_, other);
}

fn rotor__rotate__plane(self_: Rotor, other: Plane) -> Plane {
    return rotor__sandwich__plane(self_, other);
}

fn rotor__rotate__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return rotor__sandwich__rotor(self_, other);
}

fn rotor__rotate__round_point(self_: Rotor, other: RoundPoint) -> RoundPoint {
    return rotor__sandwich__round_point(self_, other);
}

fn rotor__rotate__sphere(self_: Rotor, other: Sphere) -> Sphere {
    return rotor__sandwich__sphere(self_, other);
}

fn rotor__rotate__transflector(self_: Rotor, other: Transflector) -> Transflector {
    return rotor__sandwich__transflector(self_, other);
}

fn rotor__rotate__translator(self_: Rotor, other: Translator) -> Translator {
    return rotor__sandwich__translator(self_, other);
}

fn transflector__transflect__circle(self_: Transflector, other: Circle) -> Circle {
    return transflector__sandwich__circle(self_, other);
}

fn transflector__transflect__dipole(self_: Transflector, other: Dipole) -> Dipole {
    return transflector__sandwich__dipole(self_, other);
}

fn transflector__transflect__flat_point(self_: Transflector, other: FlatPoint) -> FlatPoint {
    return transflector__sandwich__flat_point(self_, other);
}

fn transflector__transflect__flector(self_: Transflector, other: Flector) -> Flector {
    return transflector__sandwich__flector(self_, other);
}

fn transflector__transflect__line(self_: Transflector, other: Line) -> Line {
    return transflector__sandwich__line(self_, other);
}

fn transflector__transflect__motor(self_: Transflector, other: Motor) -> Motor {
    return transflector__sandwich__motor(self_, other);
}

fn transflector__transflect__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__sandwich__multi_vector(self_, other);
}

fn transflector__transflect__plane(self_: Transflector, other: Plane) -> Plane {
    return transflector__sandwich__plane(self_, other);
}

fn transflector__transflect__rotor(self_: Transflector, other: Rotor) -> Rotor {
    return transflector__sandwich__rotor(self_, other);
}

fn transflector__transflect__round_point(self_: Transflector, other: RoundPoint) -> RoundPoint {
    return transflector__sandwich__round_point(self_, other);
}

fn transflector__transflect__sphere(self_: Transflector, other: Sphere) -> Sphere {
    return transflector__sandwich__sphere(self_, other);
}

fn transflector__transflect__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return transflector__sandwich__transflector(self_, other);
}

fn transflector__transflect__translator(self_: Transflector, other: Translator) -> Translator {
    return transflector__sandwich__translator(self_, other);
}

fn translator__translate__circle(self_: Translator, other: Circle) -> Circle {
    return translator__sandwich__circle(self_, other);
}

fn translator__translate__dipole(self_: Translator, other: Dipole) -> Dipole {
    return translator__sandwich__dipole(self_, other);
}

fn translator__translate__flat_point(self_: Translator, other: FlatPoint) -> FlatPoint {
    return translator__sandwich__flat_point(self_, other);
}

fn translator__translate__flector(self_: Translator, other: Flector) -> Flector {
    return translator__sandwich__flector(self_, other);
}

fn translator__translate__line(self_: Translator, other: Line) -> Line {
    return translator__sandwich__line(self_, other);
}

fn translator__translate__motor(self_: Translator, other: Motor) -> Motor {
    return translator__sandwich__motor(self_, other);
}

fn translator__translate__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__sandwich__multi_vector(self_, other);
}

fn translator__translate__plane(self_: Translator, other: Plane) -> Plane {
    return translator__sandwich__plane(self_, other);
}

fn translator__translate__rotor(self_: Translator, other: Rotor) -> Rotor {
    return translator__sandwich__rotor(self_, other);
}

fn translator__translate__round_point(self_: Translator, other: RoundPoint) -> RoundPoint {
    return translator__sandwich__round_point(self_, other);
}

fn translator__translate__sphere(self_: Translator, other: Sphere) -> Sphere {
    return translator__sandwich__sphere(self_, other);
}

fn translator__translate__transflector(self_: Translator, other: Transflector) -> Transflector {
    return translator__sandwich__transflector(self_, other);
}

fn translator__translate__translator(self_: Translator, other: Translator) -> Translator {
    return translator__sandwich__translator(self_, other);
}

fn anti_scalar__geometric_anti_quotient__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return anti_scalar__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__circle(self_: AntiScalar, other: Circle) -> Circle {
    return anti_scalar__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__dipole(self_: AntiScalar, other: Dipole) -> Dipole {
    return anti_scalar__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__dual_num(self_: AntiScalar, other: DualNum) -> DualNum {
    return anti_scalar__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__flat_point(self_: AntiScalar, other: FlatPoint) -> FlatPoint {
    return anti_scalar__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__flector(self_: AntiScalar, other: Flector) -> Flector {
    return anti_scalar__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__line(self_: AntiScalar, other: Line) -> Line {
    return anti_scalar__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__motor(self_: AntiScalar, other: Motor) -> Motor {
    return anti_scalar__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return anti_scalar__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__plane(self_: AntiScalar, other: Plane) -> Plane {
    return anti_scalar__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return anti_scalar__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__round_point(self_: AntiScalar, other: RoundPoint) -> RoundPoint {
    return anti_scalar__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return anti_scalar__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__sphere(self_: AntiScalar, other: Sphere) -> Sphere {
    return anti_scalar__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return anti_scalar__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__translator(self_: AntiScalar, other: Translator) -> Translator {
    return anti_scalar__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn circle__geometric_anti_quotient__anti_scalar(self_: Circle, other: AntiScalar) -> Circle {
    return circle__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn circle__geometric_anti_quotient__circle(self_: Circle, other: Circle) -> MultiVector {
    return circle__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn circle__geometric_anti_quotient__dipole(self_: Circle, other: Dipole) -> MultiVector {
    return circle__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn circle__geometric_anti_quotient__dual_num(self_: Circle, other: DualNum) -> MultiVector {
    return circle__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn circle__geometric_anti_quotient__flat_point(self_: Circle, other: FlatPoint) -> MultiVector {
    return circle__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn circle__geometric_anti_quotient__flector(self_: Circle, other: Flector) -> MultiVector {
    return circle__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn circle__geometric_anti_quotient__line(self_: Circle, other: Line) -> MultiVector {
    return circle__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn circle__geometric_anti_quotient__motor(self_: Circle, other: Motor) -> MultiVector {
    return circle__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn circle__geometric_anti_quotient__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn circle__geometric_anti_quotient__plane(self_: Circle, other: Plane) -> MultiVector {
    return circle__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn circle__geometric_anti_quotient__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return circle__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn circle__geometric_anti_quotient__round_point(self_: Circle, other: RoundPoint) -> MultiVector {
    return circle__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn circle__geometric_anti_quotient__scalar(self_: Circle, other: Scalar) -> Dipole {
    return circle__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn circle__geometric_anti_quotient__sphere(self_: Circle, other: Sphere) -> MultiVector {
    return circle__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn circle__geometric_anti_quotient__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return circle__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn circle__geometric_anti_quotient__translator(self_: Circle, other: Translator) -> MultiVector {
    return circle__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__anti_scalar(self_: Dipole, other: AntiScalar) -> Dipole {
    return dipole__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__circle(self_: Dipole, other: Circle) -> MultiVector {
    return dipole__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return dipole__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__dual_num(self_: Dipole, other: DualNum) -> MultiVector {
    return dipole__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__flat_point(self_: Dipole, other: FlatPoint) -> MultiVector {
    return dipole__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__line(self_: Dipole, other: Line) -> MultiVector {
    return dipole__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__plane(self_: Dipole, other: Plane) -> MultiVector {
    return dipole__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return dipole__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__round_point(self_: Dipole, other: RoundPoint) -> MultiVector {
    return dipole__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__scalar(self_: Dipole, other: Scalar) -> Circle {
    return dipole__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return dipole__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return dipole__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn dipole__geometric_anti_quotient__translator(self_: Dipole, other: Translator) -> MultiVector {
    return dipole__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__anti_scalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return dual_num__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__circle(self_: DualNum, other: Circle) -> MultiVector {
    return dual_num__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return dual_num__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return dual_num__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__flat_point(self_: DualNum, other: FlatPoint) -> MultiVector {
    return dual_num__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__flector(self_: DualNum, other: Flector) -> MultiVector {
    return dual_num__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__line(self_: DualNum, other: Line) -> MultiVector {
    return dual_num__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__motor(self_: DualNum, other: Motor) -> MultiVector {
    return dual_num__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return dual_num__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__plane(self_: DualNum, other: Plane) -> MultiVector {
    return dual_num__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__rotor(self_: DualNum, other: Rotor) -> MultiVector {
    return dual_num__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__round_point(self_: DualNum, other: RoundPoint) -> MultiVector {
    return dual_num__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__scalar(self_: DualNum, other: Scalar) -> DualNum {
    return dual_num__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return dual_num__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__transflector(self_: DualNum, other: Transflector) -> MultiVector {
    return dual_num__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn dual_num__geometric_anti_quotient__translator(self_: DualNum, other: Translator) -> MultiVector {
    return dual_num__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__anti_scalar(self_: FlatPoint, other: AntiScalar) -> FlatPoint {
    return flat_point__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return flat_point__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return flat_point__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__dual_num(self_: FlatPoint, other: DualNum) -> MultiVector {
    return flat_point__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__flat_point(self_: FlatPoint, other: FlatPoint) -> Translator {
    return flat_point__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flat_point__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__line(self_: FlatPoint, other: Line) -> Transflector {
    return flat_point__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__motor(self_: FlatPoint, other: Motor) -> Flector {
    return flat_point__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flat_point__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return flat_point__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__rotor(self_: FlatPoint, other: Rotor) -> Flector {
    return flat_point__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__round_point(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return flat_point__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__scalar(self_: FlatPoint, other: Scalar) -> Circle {
    return flat_point__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return flat_point__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return flat_point__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn flat_point__geometric_anti_quotient__translator(self_: FlatPoint, other: Translator) -> FlatPoint {
    return flat_point__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn flector__geometric_anti_quotient__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return flector__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn flector__geometric_anti_quotient__circle(self_: Flector, other: Circle) -> MultiVector {
    return flector__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn flector__geometric_anti_quotient__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return flector__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn flector__geometric_anti_quotient__dual_num(self_: Flector, other: DualNum) -> MultiVector {
    return flector__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn flector__geometric_anti_quotient__flat_point(self_: Flector, other: FlatPoint) -> MultiVector {
    return flector__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn flector__geometric_anti_quotient__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn flector__geometric_anti_quotient__line(self_: Flector, other: Line) -> Flector {
    return flector__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn flector__geometric_anti_quotient__motor(self_: Flector, other: Motor) -> Flector {
    return flector__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn flector__geometric_anti_quotient__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn flector__geometric_anti_quotient__plane(self_: Flector, other: Plane) -> MultiVector {
    return flector__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn flector__geometric_anti_quotient__rotor(self_: Flector, other: Rotor) -> Flector {
    return flector__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn flector__geometric_anti_quotient__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return flector__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn flector__geometric_anti_quotient__scalar(self_: Flector, other: Scalar) -> MultiVector {
    return flector__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn flector__geometric_anti_quotient__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return flector__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn flector__geometric_anti_quotient__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return flector__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn flector__geometric_anti_quotient__translator(self_: Flector, other: Translator) -> Flector {
    return flector__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn line__geometric_anti_quotient__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return line__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn line__geometric_anti_quotient__circle(self_: Line, other: Circle) -> MultiVector {
    return line__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn line__geometric_anti_quotient__dipole(self_: Line, other: Dipole) -> MultiVector {
    return line__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn line__geometric_anti_quotient__dual_num(self_: Line, other: DualNum) -> MultiVector {
    return line__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn line__geometric_anti_quotient__flat_point(self_: Line, other: FlatPoint) -> Transflector {
    return line__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn line__geometric_anti_quotient__flector(self_: Line, other: Flector) -> Flector {
    return line__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn line__geometric_anti_quotient__line(self_: Line, other: Line) -> MultiVector {
    return line__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn line__geometric_anti_quotient__motor(self_: Line, other: Motor) -> MultiVector {
    return line__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn line__geometric_anti_quotient__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn line__geometric_anti_quotient__plane(self_: Line, other: Plane) -> Flector {
    return line__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn line__geometric_anti_quotient__rotor(self_: Line, other: Rotor) -> MultiVector {
    return line__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn line__geometric_anti_quotient__round_point(self_: Line, other: RoundPoint) -> MultiVector {
    return line__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn line__geometric_anti_quotient__scalar(self_: Line, other: Scalar) -> Dipole {
    return line__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn line__geometric_anti_quotient__sphere(self_: Line, other: Sphere) -> MultiVector {
    return line__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn line__geometric_anti_quotient__transflector(self_: Line, other: Transflector) -> Flector {
    return line__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn line__geometric_anti_quotient__translator(self_: Line, other: Translator) -> MultiVector {
    return line__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn motor__geometric_anti_quotient__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return motor__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn motor__geometric_anti_quotient__circle(self_: Motor, other: Circle) -> MultiVector {
    return motor__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn motor__geometric_anti_quotient__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return motor__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn motor__geometric_anti_quotient__dual_num(self_: Motor, other: DualNum) -> MultiVector {
    return motor__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn motor__geometric_anti_quotient__flat_point(self_: Motor, other: FlatPoint) -> Flector {
    return motor__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn motor__geometric_anti_quotient__flector(self_: Motor, other: Flector) -> Flector {
    return motor__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn motor__geometric_anti_quotient__line(self_: Motor, other: Line) -> MultiVector {
    return motor__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn motor__geometric_anti_quotient__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn motor__geometric_anti_quotient__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn motor__geometric_anti_quotient__plane(self_: Motor, other: Plane) -> Flector {
    return motor__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn motor__geometric_anti_quotient__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return motor__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn motor__geometric_anti_quotient__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return motor__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn motor__geometric_anti_quotient__scalar(self_: Motor, other: Scalar) -> MultiVector {
    return motor__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn motor__geometric_anti_quotient__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return motor__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn motor__geometric_anti_quotient__transflector(self_: Motor, other: Transflector) -> Flector {
    return motor__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn motor__geometric_anti_quotient__translator(self_: Motor, other: Translator) -> MultiVector {
    return motor__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return multi_vector__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return multi_vector__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return multi_vector__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn plane__geometric_anti_quotient__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return plane__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn plane__geometric_anti_quotient__circle(self_: Plane, other: Circle) -> MultiVector {
    return plane__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn plane__geometric_anti_quotient__dipole(self_: Plane, other: Dipole) -> MultiVector {
    return plane__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn plane__geometric_anti_quotient__dual_num(self_: Plane, other: DualNum) -> MultiVector {
    return plane__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn plane__geometric_anti_quotient__flat_point(self_: Plane, other: FlatPoint) -> MultiVector {
    return plane__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn plane__geometric_anti_quotient__flector(self_: Plane, other: Flector) -> MultiVector {
    return plane__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn plane__geometric_anti_quotient__line(self_: Plane, other: Line) -> Flector {
    return plane__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn plane__geometric_anti_quotient__motor(self_: Plane, other: Motor) -> Flector {
    return plane__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn plane__geometric_anti_quotient__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn plane__geometric_anti_quotient__plane(self_: Plane, other: Plane) -> Motor {
    return plane__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn plane__geometric_anti_quotient__rotor(self_: Plane, other: Rotor) -> Flector {
    return plane__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn plane__geometric_anti_quotient__round_point(self_: Plane, other: RoundPoint) -> MultiVector {
    return plane__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn plane__geometric_anti_quotient__scalar(self_: Plane, other: Scalar) -> RoundPoint {
    return plane__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn plane__geometric_anti_quotient__sphere(self_: Plane, other: Sphere) -> MultiVector {
    return plane__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn plane__geometric_anti_quotient__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return plane__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn plane__geometric_anti_quotient__translator(self_: Plane, other: Translator) -> Transflector {
    return plane__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return rotor__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__circle(self_: Rotor, other: Circle) -> MultiVector {
    return rotor__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return rotor__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__dual_num(self_: Rotor, other: DualNum) -> MultiVector {
    return rotor__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__flat_point(self_: Rotor, other: FlatPoint) -> Flector {
    return rotor__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__flector(self_: Rotor, other: Flector) -> Flector {
    return rotor__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__line(self_: Rotor, other: Line) -> MultiVector {
    return rotor__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__motor(self_: Rotor, other: Motor) -> MultiVector {
    return rotor__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return rotor__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__plane(self_: Rotor, other: Plane) -> Flector {
    return rotor__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return rotor__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return rotor__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__scalar(self_: Rotor, other: Scalar) -> MultiVector {
    return rotor__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return rotor__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__transflector(self_: Rotor, other: Transflector) -> Flector {
    return rotor__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__translator(self_: Rotor, other: Translator) -> MultiVector {
    return rotor__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__anti_scalar(self_: RoundPoint, other: AntiScalar) -> RoundPoint {
    return round_point__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return round_point__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return round_point__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__dual_num(self_: RoundPoint, other: DualNum) -> MultiVector {
    return round_point__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__flat_point(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return round_point__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return round_point__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__line(self_: RoundPoint, other: Line) -> MultiVector {
    return round_point__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return round_point__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return round_point__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return round_point__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return round_point__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__round_point(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return round_point__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__scalar(self_: RoundPoint, other: Scalar) -> Sphere {
    return round_point__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return round_point__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return round_point__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn round_point__geometric_anti_quotient__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return round_point__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return scalar__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__circle(self_: Scalar, other: Circle) -> Dipole {
    return scalar__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__dipole(self_: Scalar, other: Dipole) -> Circle {
    return scalar__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__dual_num(self_: Scalar, other: DualNum) -> DualNum {
    return scalar__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__flat_point(self_: Scalar, other: FlatPoint) -> Circle {
    return scalar__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__flector(self_: Scalar, other: Flector) -> MultiVector {
    return scalar__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__line(self_: Scalar, other: Line) -> Dipole {
    return scalar__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__motor(self_: Scalar, other: Motor) -> MultiVector {
    return scalar__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return scalar__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__plane(self_: Scalar, other: Plane) -> RoundPoint {
    return scalar__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__rotor(self_: Scalar, other: Rotor) -> MultiVector {
    return scalar__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__round_point(self_: Scalar, other: RoundPoint) -> Sphere {
    return scalar__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__scalar(self_: Scalar, other: Scalar) -> AntiScalar {
    return scalar__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__sphere(self_: Scalar, other: Sphere) -> RoundPoint {
    return scalar__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__transflector(self_: Scalar, other: Transflector) -> MultiVector {
    return scalar__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__translator(self_: Scalar, other: Translator) -> MultiVector {
    return scalar__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__anti_scalar(self_: Sphere, other: AntiScalar) -> Sphere {
    return sphere__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__circle(self_: Sphere, other: Circle) -> MultiVector {
    return sphere__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return sphere__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__dual_num(self_: Sphere, other: DualNum) -> MultiVector {
    return sphere__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__flat_point(self_: Sphere, other: FlatPoint) -> MultiVector {
    return sphere__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__line(self_: Sphere, other: Line) -> MultiVector {
    return sphere__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__plane(self_: Sphere, other: Plane) -> MultiVector {
    return sphere__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return sphere__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__round_point(self_: Sphere, other: RoundPoint) -> MultiVector {
    return sphere__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__scalar(self_: Sphere, other: Scalar) -> RoundPoint {
    return sphere__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return sphere__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return sphere__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn sphere__geometric_anti_quotient__translator(self_: Sphere, other: Translator) -> MultiVector {
    return sphere__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return transflector__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__circle(self_: Transflector, other: Circle) -> MultiVector {
    return transflector__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return transflector__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__dual_num(self_: Transflector, other: DualNum) -> MultiVector {
    return transflector__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__flat_point(self_: Transflector, other: FlatPoint) -> MultiVector {
    return transflector__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__flector(self_: Transflector, other: Flector) -> MultiVector {
    return transflector__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__line(self_: Transflector, other: Line) -> Flector {
    return transflector__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__motor(self_: Transflector, other: Motor) -> Flector {
    return transflector__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__plane(self_: Transflector, other: Plane) -> MultiVector {
    return transflector__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__rotor(self_: Transflector, other: Rotor) -> Flector {
    return transflector__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return transflector__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__scalar(self_: Transflector, other: Scalar) -> MultiVector {
    return transflector__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return transflector__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__translator(self_: Transflector, other: Translator) -> Transflector {
    return transflector__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn translator__geometric_anti_quotient__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return translator__anti_wedge_dot__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn translator__geometric_anti_quotient__circle(self_: Translator, other: Circle) -> MultiVector {
    return translator__anti_wedge_dot__circle(self_, circle__anti_inverse(other));
}

fn translator__geometric_anti_quotient__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return translator__anti_wedge_dot__dipole(self_, dipole__anti_inverse(other));
}

fn translator__geometric_anti_quotient__dual_num(self_: Translator, other: DualNum) -> MultiVector {
    return translator__anti_wedge_dot__dual_num(self_, dual_num__anti_inverse(other));
}

fn translator__geometric_anti_quotient__flat_point(self_: Translator, other: FlatPoint) -> FlatPoint {
    return translator__anti_wedge_dot__flat_point(self_, flat_point__anti_inverse(other));
}

fn translator__geometric_anti_quotient__flector(self_: Translator, other: Flector) -> Flector {
    return translator__anti_wedge_dot__flector(self_, flector__anti_inverse(other));
}

fn translator__geometric_anti_quotient__line(self_: Translator, other: Line) -> MultiVector {
    return translator__anti_wedge_dot__line(self_, line__anti_inverse(other));
}

fn translator__geometric_anti_quotient__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__anti_wedge_dot__motor(self_, motor__anti_inverse(other));
}

fn translator__geometric_anti_quotient__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__anti_wedge_dot__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn translator__geometric_anti_quotient__plane(self_: Translator, other: Plane) -> Transflector {
    return translator__anti_wedge_dot__plane(self_, plane__anti_inverse(other));
}

fn translator__geometric_anti_quotient__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return translator__anti_wedge_dot__rotor(self_, rotor__anti_inverse(other));
}

fn translator__geometric_anti_quotient__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return translator__anti_wedge_dot__round_point(self_, round_point__anti_inverse(other));
}

fn translator__geometric_anti_quotient__scalar(self_: Translator, other: Scalar) -> MultiVector {
    return translator__anti_wedge_dot__scalar(self_, scalar__anti_inverse(other));
}

fn translator__geometric_anti_quotient__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return translator__anti_wedge_dot__sphere(self_, sphere__anti_inverse(other));
}

fn translator__geometric_anti_quotient__transflector(self_: Translator, other: Transflector) -> Transflector {
    return translator__anti_wedge_dot__transflector(self_, transflector__anti_inverse(other));
}

fn translator__geometric_anti_quotient__translator(self_: Translator, other: Translator) -> Translator {
    return translator__anti_wedge_dot__translator(self_, translator__anti_inverse(other));
}

fn anti_scalar__geometric_quotient__anti_scalar(self_: AntiScalar, other: AntiScalar) -> Scalar {
    return anti_scalar__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn anti_scalar__geometric_quotient__circle(self_: AntiScalar, other: Circle) -> Dipole {
    return anti_scalar__wedge_dot__circle(self_, circle__inverse(other));
}

fn anti_scalar__geometric_quotient__dipole(self_: AntiScalar, other: Dipole) -> Circle {
    return anti_scalar__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn anti_scalar__geometric_quotient__dual_num(self_: AntiScalar, other: DualNum) -> DualNum {
    return anti_scalar__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn anti_scalar__geometric_quotient__flat_point(self_: AntiScalar, other: FlatPoint) -> Circle {
    return anti_scalar__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn anti_scalar__geometric_quotient__flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return anti_scalar__wedge_dot__flector(self_, flector__inverse(other));
}

fn anti_scalar__geometric_quotient__line(self_: AntiScalar, other: Line) -> Dipole {
    return anti_scalar__wedge_dot__line(self_, line__inverse(other));
}

fn anti_scalar__geometric_quotient__motor(self_: AntiScalar, other: Motor) -> MultiVector {
    return anti_scalar__wedge_dot__motor(self_, motor__inverse(other));
}

fn anti_scalar__geometric_quotient__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return anti_scalar__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn anti_scalar__geometric_quotient__plane(self_: AntiScalar, other: Plane) -> RoundPoint {
    return anti_scalar__wedge_dot__plane(self_, plane__inverse(other));
}

fn anti_scalar__geometric_quotient__rotor(self_: AntiScalar, other: Rotor) -> MultiVector {
    return anti_scalar__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn anti_scalar__geometric_quotient__round_point(self_: AntiScalar, other: RoundPoint) -> Sphere {
    return anti_scalar__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn anti_scalar__geometric_quotient__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return anti_scalar__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn anti_scalar__geometric_quotient__sphere(self_: AntiScalar, other: Sphere) -> RoundPoint {
    return anti_scalar__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn anti_scalar__geometric_quotient__transflector(self_: AntiScalar, other: Transflector) -> MultiVector {
    return anti_scalar__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn anti_scalar__geometric_quotient__translator(self_: AntiScalar, other: Translator) -> MultiVector {
    return anti_scalar__wedge_dot__translator(self_, translator__inverse(other));
}

fn circle__geometric_quotient__anti_scalar(self_: Circle, other: AntiScalar) -> Dipole {
    return circle__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn circle__geometric_quotient__circle(self_: Circle, other: Circle) -> MultiVector {
    return circle__wedge_dot__circle(self_, circle__inverse(other));
}

fn circle__geometric_quotient__dipole(self_: Circle, other: Dipole) -> MultiVector {
    return circle__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn circle__geometric_quotient__dual_num(self_: Circle, other: DualNum) -> MultiVector {
    return circle__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn circle__geometric_quotient__flat_point(self_: Circle, other: FlatPoint) -> MultiVector {
    return circle__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn circle__geometric_quotient__flector(self_: Circle, other: Flector) -> MultiVector {
    return circle__wedge_dot__flector(self_, flector__inverse(other));
}

fn circle__geometric_quotient__line(self_: Circle, other: Line) -> MultiVector {
    return circle__wedge_dot__line(self_, line__inverse(other));
}

fn circle__geometric_quotient__motor(self_: Circle, other: Motor) -> MultiVector {
    return circle__wedge_dot__motor(self_, motor__inverse(other));
}

fn circle__geometric_quotient__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn circle__geometric_quotient__plane(self_: Circle, other: Plane) -> MultiVector {
    return circle__wedge_dot__plane(self_, plane__inverse(other));
}

fn circle__geometric_quotient__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return circle__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn circle__geometric_quotient__round_point(self_: Circle, other: RoundPoint) -> MultiVector {
    return circle__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn circle__geometric_quotient__scalar(self_: Circle, other: Scalar) -> Circle {
    return circle__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn circle__geometric_quotient__sphere(self_: Circle, other: Sphere) -> MultiVector {
    return circle__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn circle__geometric_quotient__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return circle__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn circle__geometric_quotient__translator(self_: Circle, other: Translator) -> MultiVector {
    return circle__wedge_dot__translator(self_, translator__inverse(other));
}

fn dipole__geometric_quotient__anti_scalar(self_: Dipole, other: AntiScalar) -> Circle {
    return dipole__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn dipole__geometric_quotient__circle(self_: Dipole, other: Circle) -> MultiVector {
    return dipole__wedge_dot__circle(self_, circle__inverse(other));
}

fn dipole__geometric_quotient__dipole(self_: Dipole, other: Dipole) -> MultiVector {
    return dipole__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn dipole__geometric_quotient__dual_num(self_: Dipole, other: DualNum) -> MultiVector {
    return dipole__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn dipole__geometric_quotient__flat_point(self_: Dipole, other: FlatPoint) -> MultiVector {
    return dipole__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn dipole__geometric_quotient__flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole__wedge_dot__flector(self_, flector__inverse(other));
}

fn dipole__geometric_quotient__line(self_: Dipole, other: Line) -> MultiVector {
    return dipole__wedge_dot__line(self_, line__inverse(other));
}

fn dipole__geometric_quotient__motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole__wedge_dot__motor(self_, motor__inverse(other));
}

fn dipole__geometric_quotient__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn dipole__geometric_quotient__plane(self_: Dipole, other: Plane) -> MultiVector {
    return dipole__wedge_dot__plane(self_, plane__inverse(other));
}

fn dipole__geometric_quotient__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return dipole__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn dipole__geometric_quotient__round_point(self_: Dipole, other: RoundPoint) -> MultiVector {
    return dipole__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn dipole__geometric_quotient__scalar(self_: Dipole, other: Scalar) -> Dipole {
    return dipole__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn dipole__geometric_quotient__sphere(self_: Dipole, other: Sphere) -> MultiVector {
    return dipole__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn dipole__geometric_quotient__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return dipole__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn dipole__geometric_quotient__translator(self_: Dipole, other: Translator) -> MultiVector {
    return dipole__wedge_dot__translator(self_, translator__inverse(other));
}

fn dual_num__geometric_quotient__anti_scalar(self_: DualNum, other: AntiScalar) -> DualNum {
    return dual_num__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn dual_num__geometric_quotient__circle(self_: DualNum, other: Circle) -> MultiVector {
    return dual_num__wedge_dot__circle(self_, circle__inverse(other));
}

fn dual_num__geometric_quotient__dipole(self_: DualNum, other: Dipole) -> MultiVector {
    return dual_num__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn dual_num__geometric_quotient__dual_num(self_: DualNum, other: DualNum) -> DualNum {
    return dual_num__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn dual_num__geometric_quotient__flat_point(self_: DualNum, other: FlatPoint) -> MultiVector {
    return dual_num__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn dual_num__geometric_quotient__flector(self_: DualNum, other: Flector) -> MultiVector {
    return dual_num__wedge_dot__flector(self_, flector__inverse(other));
}

fn dual_num__geometric_quotient__line(self_: DualNum, other: Line) -> MultiVector {
    return dual_num__wedge_dot__line(self_, line__inverse(other));
}

fn dual_num__geometric_quotient__motor(self_: DualNum, other: Motor) -> MultiVector {
    return dual_num__wedge_dot__motor(self_, motor__inverse(other));
}

fn dual_num__geometric_quotient__multi_vector(self_: DualNum, other: MultiVector) -> MultiVector {
    return dual_num__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn dual_num__geometric_quotient__plane(self_: DualNum, other: Plane) -> MultiVector {
    return dual_num__wedge_dot__plane(self_, plane__inverse(other));
}

fn dual_num__geometric_quotient__rotor(self_: DualNum, other: Rotor) -> MultiVector {
    return dual_num__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn dual_num__geometric_quotient__round_point(self_: DualNum, other: RoundPoint) -> MultiVector {
    return dual_num__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn dual_num__geometric_quotient__scalar(self_: DualNum, other: Scalar) -> DualNum {
    return dual_num__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn dual_num__geometric_quotient__sphere(self_: DualNum, other: Sphere) -> MultiVector {
    return dual_num__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn dual_num__geometric_quotient__transflector(self_: DualNum, other: Transflector) -> MultiVector {
    return dual_num__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn dual_num__geometric_quotient__translator(self_: DualNum, other: Translator) -> MultiVector {
    return dual_num__wedge_dot__translator(self_, translator__inverse(other));
}

fn flat_point__geometric_quotient__anti_scalar(self_: FlatPoint, other: AntiScalar) -> Circle {
    return flat_point__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn flat_point__geometric_quotient__circle(self_: FlatPoint, other: Circle) -> MultiVector {
    return flat_point__wedge_dot__circle(self_, circle__inverse(other));
}

fn flat_point__geometric_quotient__dipole(self_: FlatPoint, other: Dipole) -> MultiVector {
    return flat_point__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn flat_point__geometric_quotient__dual_num(self_: FlatPoint, other: DualNum) -> MultiVector {
    return flat_point__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn flat_point__geometric_quotient__flat_point(self_: FlatPoint, other: FlatPoint) -> MultiVector {
    return flat_point__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn flat_point__geometric_quotient__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flat_point__wedge_dot__flector(self_, flector__inverse(other));
}

fn flat_point__geometric_quotient__line(self_: FlatPoint, other: Line) -> MultiVector {
    return flat_point__wedge_dot__line(self_, line__inverse(other));
}

fn flat_point__geometric_quotient__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flat_point__wedge_dot__motor(self_, motor__inverse(other));
}

fn flat_point__geometric_quotient__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flat_point__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn flat_point__geometric_quotient__plane(self_: FlatPoint, other: Plane) -> MultiVector {
    return flat_point__wedge_dot__plane(self_, plane__inverse(other));
}

fn flat_point__geometric_quotient__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return flat_point__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn flat_point__geometric_quotient__round_point(self_: FlatPoint, other: RoundPoint) -> MultiVector {
    return flat_point__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn flat_point__geometric_quotient__scalar(self_: FlatPoint, other: Scalar) -> FlatPoint {
    return flat_point__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn flat_point__geometric_quotient__sphere(self_: FlatPoint, other: Sphere) -> MultiVector {
    return flat_point__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn flat_point__geometric_quotient__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return flat_point__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn flat_point__geometric_quotient__translator(self_: FlatPoint, other: Translator) -> Circle {
    return flat_point__wedge_dot__translator(self_, translator__inverse(other));
}

fn flector__geometric_quotient__anti_scalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return flector__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn flector__geometric_quotient__circle(self_: Flector, other: Circle) -> MultiVector {
    return flector__wedge_dot__circle(self_, circle__inverse(other));
}

fn flector__geometric_quotient__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return flector__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn flector__geometric_quotient__dual_num(self_: Flector, other: DualNum) -> MultiVector {
    return flector__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn flector__geometric_quotient__flat_point(self_: Flector, other: FlatPoint) -> MultiVector {
    return flector__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn flector__geometric_quotient__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__wedge_dot__flector(self_, flector__inverse(other));
}

fn flector__geometric_quotient__line(self_: Flector, other: Line) -> MultiVector {
    return flector__wedge_dot__line(self_, line__inverse(other));
}

fn flector__geometric_quotient__motor(self_: Flector, other: Motor) -> MultiVector {
    return flector__wedge_dot__motor(self_, motor__inverse(other));
}

fn flector__geometric_quotient__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn flector__geometric_quotient__plane(self_: Flector, other: Plane) -> MultiVector {
    return flector__wedge_dot__plane(self_, plane__inverse(other));
}

fn flector__geometric_quotient__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return flector__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn flector__geometric_quotient__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return flector__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn flector__geometric_quotient__scalar(self_: Flector, other: Scalar) -> Flector {
    return flector__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn flector__geometric_quotient__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return flector__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn flector__geometric_quotient__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return flector__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn flector__geometric_quotient__translator(self_: Flector, other: Translator) -> MultiVector {
    return flector__wedge_dot__translator(self_, translator__inverse(other));
}

fn line__geometric_quotient__anti_scalar(self_: Line, other: AntiScalar) -> Dipole {
    return line__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn line__geometric_quotient__circle(self_: Line, other: Circle) -> MultiVector {
    return line__wedge_dot__circle(self_, circle__inverse(other));
}

fn line__geometric_quotient__dipole(self_: Line, other: Dipole) -> MultiVector {
    return line__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn line__geometric_quotient__dual_num(self_: Line, other: DualNum) -> MultiVector {
    return line__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn line__geometric_quotient__flat_point(self_: Line, other: FlatPoint) -> MultiVector {
    return line__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn line__geometric_quotient__flector(self_: Line, other: Flector) -> MultiVector {
    return line__wedge_dot__flector(self_, flector__inverse(other));
}

fn line__geometric_quotient__line(self_: Line, other: Line) -> MultiVector {
    return line__wedge_dot__line(self_, line__inverse(other));
}

fn line__geometric_quotient__motor(self_: Line, other: Motor) -> MultiVector {
    return line__wedge_dot__motor(self_, motor__inverse(other));
}

fn line__geometric_quotient__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn line__geometric_quotient__plane(self_: Line, other: Plane) -> MultiVector {
    return line__wedge_dot__plane(self_, plane__inverse(other));
}

fn line__geometric_quotient__rotor(self_: Line, other: Rotor) -> MultiVector {
    return line__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn line__geometric_quotient__round_point(self_: Line, other: RoundPoint) -> MultiVector {
    return line__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn line__geometric_quotient__scalar(self_: Line, other: Scalar) -> Line {
    return line__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn line__geometric_quotient__sphere(self_: Line, other: Sphere) -> MultiVector {
    return line__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn line__geometric_quotient__transflector(self_: Line, other: Transflector) -> MultiVector {
    return line__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn line__geometric_quotient__translator(self_: Line, other: Translator) -> MultiVector {
    return line__wedge_dot__translator(self_, translator__inverse(other));
}

fn motor__geometric_quotient__anti_scalar(self_: Motor, other: AntiScalar) -> MultiVector {
    return motor__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn motor__geometric_quotient__circle(self_: Motor, other: Circle) -> MultiVector {
    return motor__wedge_dot__circle(self_, circle__inverse(other));
}

fn motor__geometric_quotient__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return motor__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn motor__geometric_quotient__dual_num(self_: Motor, other: DualNum) -> MultiVector {
    return motor__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn motor__geometric_quotient__flat_point(self_: Motor, other: FlatPoint) -> MultiVector {
    return motor__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn motor__geometric_quotient__flector(self_: Motor, other: Flector) -> MultiVector {
    return motor__wedge_dot__flector(self_, flector__inverse(other));
}

fn motor__geometric_quotient__line(self_: Motor, other: Line) -> MultiVector {
    return motor__wedge_dot__line(self_, line__inverse(other));
}

fn motor__geometric_quotient__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__wedge_dot__motor(self_, motor__inverse(other));
}

fn motor__geometric_quotient__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn motor__geometric_quotient__plane(self_: Motor, other: Plane) -> MultiVector {
    return motor__wedge_dot__plane(self_, plane__inverse(other));
}

fn motor__geometric_quotient__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return motor__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn motor__geometric_quotient__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return motor__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn motor__geometric_quotient__scalar(self_: Motor, other: Scalar) -> Motor {
    return motor__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn motor__geometric_quotient__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return motor__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn motor__geometric_quotient__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return motor__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn motor__geometric_quotient__translator(self_: Motor, other: Translator) -> MultiVector {
    return motor__wedge_dot__translator(self_, translator__inverse(other));
}

fn multi_vector__geometric_quotient__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return multi_vector__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn multi_vector__geometric_quotient__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__wedge_dot__circle(self_, circle__inverse(other));
}

fn multi_vector__geometric_quotient__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn multi_vector__geometric_quotient__dual_num(self_: MultiVector, other: DualNum) -> MultiVector {
    return multi_vector__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn multi_vector__geometric_quotient__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn multi_vector__geometric_quotient__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge_dot__flector(self_, flector__inverse(other));
}

fn multi_vector__geometric_quotient__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__wedge_dot__line(self_, line__inverse(other));
}

fn multi_vector__geometric_quotient__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__wedge_dot__motor(self_, motor__inverse(other));
}

fn multi_vector__geometric_quotient__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn multi_vector__geometric_quotient__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__wedge_dot__plane(self_, plane__inverse(other));
}

fn multi_vector__geometric_quotient__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn multi_vector__geometric_quotient__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn multi_vector__geometric_quotient__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return multi_vector__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn multi_vector__geometric_quotient__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn multi_vector__geometric_quotient__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn multi_vector__geometric_quotient__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__wedge_dot__translator(self_, translator__inverse(other));
}

fn plane__geometric_quotient__anti_scalar(self_: Plane, other: AntiScalar) -> RoundPoint {
    return plane__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn plane__geometric_quotient__circle(self_: Plane, other: Circle) -> MultiVector {
    return plane__wedge_dot__circle(self_, circle__inverse(other));
}

fn plane__geometric_quotient__dipole(self_: Plane, other: Dipole) -> MultiVector {
    return plane__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn plane__geometric_quotient__dual_num(self_: Plane, other: DualNum) -> MultiVector {
    return plane__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn plane__geometric_quotient__flat_point(self_: Plane, other: FlatPoint) -> MultiVector {
    return plane__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn plane__geometric_quotient__flector(self_: Plane, other: Flector) -> MultiVector {
    return plane__wedge_dot__flector(self_, flector__inverse(other));
}

fn plane__geometric_quotient__line(self_: Plane, other: Line) -> MultiVector {
    return plane__wedge_dot__line(self_, line__inverse(other));
}

fn plane__geometric_quotient__motor(self_: Plane, other: Motor) -> MultiVector {
    return plane__wedge_dot__motor(self_, motor__inverse(other));
}

fn plane__geometric_quotient__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn plane__geometric_quotient__plane(self_: Plane, other: Plane) -> MultiVector {
    return plane__wedge_dot__plane(self_, plane__inverse(other));
}

fn plane__geometric_quotient__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return plane__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn plane__geometric_quotient__round_point(self_: Plane, other: RoundPoint) -> MultiVector {
    return plane__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn plane__geometric_quotient__scalar(self_: Plane, other: Scalar) -> Plane {
    return plane__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn plane__geometric_quotient__sphere(self_: Plane, other: Sphere) -> MultiVector {
    return plane__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn plane__geometric_quotient__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return plane__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn plane__geometric_quotient__translator(self_: Plane, other: Translator) -> MultiVector {
    return plane__wedge_dot__translator(self_, translator__inverse(other));
}

fn rotor__geometric_quotient__anti_scalar(self_: Rotor, other: AntiScalar) -> MultiVector {
    return rotor__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn rotor__geometric_quotient__circle(self_: Rotor, other: Circle) -> MultiVector {
    return rotor__wedge_dot__circle(self_, circle__inverse(other));
}

fn rotor__geometric_quotient__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return rotor__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn rotor__geometric_quotient__dual_num(self_: Rotor, other: DualNum) -> MultiVector {
    return rotor__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn rotor__geometric_quotient__flat_point(self_: Rotor, other: FlatPoint) -> MultiVector {
    return rotor__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn rotor__geometric_quotient__flector(self_: Rotor, other: Flector) -> MultiVector {
    return rotor__wedge_dot__flector(self_, flector__inverse(other));
}

fn rotor__geometric_quotient__line(self_: Rotor, other: Line) -> MultiVector {
    return rotor__wedge_dot__line(self_, line__inverse(other));
}

fn rotor__geometric_quotient__motor(self_: Rotor, other: Motor) -> MultiVector {
    return rotor__wedge_dot__motor(self_, motor__inverse(other));
}

fn rotor__geometric_quotient__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return rotor__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn rotor__geometric_quotient__plane(self_: Rotor, other: Plane) -> MultiVector {
    return rotor__wedge_dot__plane(self_, plane__inverse(other));
}

fn rotor__geometric_quotient__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn rotor__geometric_quotient__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return rotor__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn rotor__geometric_quotient__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return rotor__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn rotor__geometric_quotient__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return rotor__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn rotor__geometric_quotient__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return rotor__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn rotor__geometric_quotient__translator(self_: Rotor, other: Translator) -> MultiVector {
    return rotor__wedge_dot__translator(self_, translator__inverse(other));
}

fn round_point__geometric_quotient__anti_scalar(self_: RoundPoint, other: AntiScalar) -> Sphere {
    return round_point__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn round_point__geometric_quotient__circle(self_: RoundPoint, other: Circle) -> MultiVector {
    return round_point__wedge_dot__circle(self_, circle__inverse(other));
}

fn round_point__geometric_quotient__dipole(self_: RoundPoint, other: Dipole) -> MultiVector {
    return round_point__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn round_point__geometric_quotient__dual_num(self_: RoundPoint, other: DualNum) -> MultiVector {
    return round_point__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn round_point__geometric_quotient__flat_point(self_: RoundPoint, other: FlatPoint) -> MultiVector {
    return round_point__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn round_point__geometric_quotient__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return round_point__wedge_dot__flector(self_, flector__inverse(other));
}

fn round_point__geometric_quotient__line(self_: RoundPoint, other: Line) -> MultiVector {
    return round_point__wedge_dot__line(self_, line__inverse(other));
}

fn round_point__geometric_quotient__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return round_point__wedge_dot__motor(self_, motor__inverse(other));
}

fn round_point__geometric_quotient__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return round_point__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn round_point__geometric_quotient__plane(self_: RoundPoint, other: Plane) -> MultiVector {
    return round_point__wedge_dot__plane(self_, plane__inverse(other));
}

fn round_point__geometric_quotient__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return round_point__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn round_point__geometric_quotient__round_point(self_: RoundPoint, other: RoundPoint) -> MultiVector {
    return round_point__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn round_point__geometric_quotient__scalar(self_: RoundPoint, other: Scalar) -> RoundPoint {
    return round_point__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn round_point__geometric_quotient__sphere(self_: RoundPoint, other: Sphere) -> MultiVector {
    return round_point__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn round_point__geometric_quotient__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return round_point__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn round_point__geometric_quotient__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return round_point__wedge_dot__translator(self_, translator__inverse(other));
}

fn scalar__geometric_quotient__anti_scalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return scalar__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn scalar__geometric_quotient__circle(self_: Scalar, other: Circle) -> Circle {
    return scalar__wedge_dot__circle(self_, circle__inverse(other));
}

fn scalar__geometric_quotient__dipole(self_: Scalar, other: Dipole) -> Dipole {
    return scalar__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn scalar__geometric_quotient__dual_num(self_: Scalar, other: DualNum) -> DualNum {
    return scalar__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn scalar__geometric_quotient__flat_point(self_: Scalar, other: FlatPoint) -> FlatPoint {
    return scalar__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn scalar__geometric_quotient__flector(self_: Scalar, other: Flector) -> Flector {
    return scalar__wedge_dot__flector(self_, flector__inverse(other));
}

fn scalar__geometric_quotient__line(self_: Scalar, other: Line) -> Line {
    return scalar__wedge_dot__line(self_, line__inverse(other));
}

fn scalar__geometric_quotient__motor(self_: Scalar, other: Motor) -> Motor {
    return scalar__wedge_dot__motor(self_, motor__inverse(other));
}

fn scalar__geometric_quotient__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return scalar__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn scalar__geometric_quotient__plane(self_: Scalar, other: Plane) -> Plane {
    return scalar__wedge_dot__plane(self_, plane__inverse(other));
}

fn scalar__geometric_quotient__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return scalar__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn scalar__geometric_quotient__round_point(self_: Scalar, other: RoundPoint) -> RoundPoint {
    return scalar__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn scalar__geometric_quotient__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return scalar__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn scalar__geometric_quotient__sphere(self_: Scalar, other: Sphere) -> Sphere {
    return scalar__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn scalar__geometric_quotient__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return scalar__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn scalar__geometric_quotient__translator(self_: Scalar, other: Translator) -> Translator {
    return scalar__wedge_dot__translator(self_, translator__inverse(other));
}

fn sphere__geometric_quotient__anti_scalar(self_: Sphere, other: AntiScalar) -> RoundPoint {
    return sphere__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn sphere__geometric_quotient__circle(self_: Sphere, other: Circle) -> MultiVector {
    return sphere__wedge_dot__circle(self_, circle__inverse(other));
}

fn sphere__geometric_quotient__dipole(self_: Sphere, other: Dipole) -> MultiVector {
    return sphere__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn sphere__geometric_quotient__dual_num(self_: Sphere, other: DualNum) -> MultiVector {
    return sphere__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn sphere__geometric_quotient__flat_point(self_: Sphere, other: FlatPoint) -> MultiVector {
    return sphere__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn sphere__geometric_quotient__flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere__wedge_dot__flector(self_, flector__inverse(other));
}

fn sphere__geometric_quotient__line(self_: Sphere, other: Line) -> MultiVector {
    return sphere__wedge_dot__line(self_, line__inverse(other));
}

fn sphere__geometric_quotient__motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere__wedge_dot__motor(self_, motor__inverse(other));
}

fn sphere__geometric_quotient__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn sphere__geometric_quotient__plane(self_: Sphere, other: Plane) -> MultiVector {
    return sphere__wedge_dot__plane(self_, plane__inverse(other));
}

fn sphere__geometric_quotient__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return sphere__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn sphere__geometric_quotient__round_point(self_: Sphere, other: RoundPoint) -> MultiVector {
    return sphere__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn sphere__geometric_quotient__scalar(self_: Sphere, other: Scalar) -> Sphere {
    return sphere__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn sphere__geometric_quotient__sphere(self_: Sphere, other: Sphere) -> MultiVector {
    return sphere__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn sphere__geometric_quotient__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return sphere__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn sphere__geometric_quotient__translator(self_: Sphere, other: Translator) -> MultiVector {
    return sphere__wedge_dot__translator(self_, translator__inverse(other));
}

fn transflector__geometric_quotient__anti_scalar(self_: Transflector, other: AntiScalar) -> MultiVector {
    return transflector__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn transflector__geometric_quotient__circle(self_: Transflector, other: Circle) -> MultiVector {
    return transflector__wedge_dot__circle(self_, circle__inverse(other));
}

fn transflector__geometric_quotient__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return transflector__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn transflector__geometric_quotient__dual_num(self_: Transflector, other: DualNum) -> MultiVector {
    return transflector__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn transflector__geometric_quotient__flat_point(self_: Transflector, other: FlatPoint) -> MultiVector {
    return transflector__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn transflector__geometric_quotient__flector(self_: Transflector, other: Flector) -> MultiVector {
    return transflector__wedge_dot__flector(self_, flector__inverse(other));
}

fn transflector__geometric_quotient__line(self_: Transflector, other: Line) -> MultiVector {
    return transflector__wedge_dot__line(self_, line__inverse(other));
}

fn transflector__geometric_quotient__motor(self_: Transflector, other: Motor) -> MultiVector {
    return transflector__wedge_dot__motor(self_, motor__inverse(other));
}

fn transflector__geometric_quotient__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn transflector__geometric_quotient__plane(self_: Transflector, other: Plane) -> MultiVector {
    return transflector__wedge_dot__plane(self_, plane__inverse(other));
}

fn transflector__geometric_quotient__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return transflector__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn transflector__geometric_quotient__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return transflector__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn transflector__geometric_quotient__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return transflector__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn transflector__geometric_quotient__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return transflector__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn transflector__geometric_quotient__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn transflector__geometric_quotient__translator(self_: Transflector, other: Translator) -> MultiVector {
    return transflector__wedge_dot__translator(self_, translator__inverse(other));
}

fn translator__geometric_quotient__anti_scalar(self_: Translator, other: AntiScalar) -> MultiVector {
    return translator__wedge_dot__anti_scalar(self_, anti_scalar__inverse(other));
}

fn translator__geometric_quotient__circle(self_: Translator, other: Circle) -> MultiVector {
    return translator__wedge_dot__circle(self_, circle__inverse(other));
}

fn translator__geometric_quotient__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return translator__wedge_dot__dipole(self_, dipole__inverse(other));
}

fn translator__geometric_quotient__dual_num(self_: Translator, other: DualNum) -> MultiVector {
    return translator__wedge_dot__dual_num(self_, dual_num__inverse(other));
}

fn translator__geometric_quotient__flat_point(self_: Translator, other: FlatPoint) -> Circle {
    return translator__wedge_dot__flat_point(self_, flat_point__inverse(other));
}

fn translator__geometric_quotient__flector(self_: Translator, other: Flector) -> MultiVector {
    return translator__wedge_dot__flector(self_, flector__inverse(other));
}

fn translator__geometric_quotient__line(self_: Translator, other: Line) -> MultiVector {
    return translator__wedge_dot__line(self_, line__inverse(other));
}

fn translator__geometric_quotient__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__wedge_dot__motor(self_, motor__inverse(other));
}

fn translator__geometric_quotient__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__wedge_dot__multi_vector(self_, multi_vector__inverse(other));
}

fn translator__geometric_quotient__plane(self_: Translator, other: Plane) -> MultiVector {
    return translator__wedge_dot__plane(self_, plane__inverse(other));
}

fn translator__geometric_quotient__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return translator__wedge_dot__rotor(self_, rotor__inverse(other));
}

fn translator__geometric_quotient__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return translator__wedge_dot__round_point(self_, round_point__inverse(other));
}

fn translator__geometric_quotient__scalar(self_: Translator, other: Scalar) -> Translator {
    return translator__wedge_dot__scalar(self_, scalar__inverse(other));
}

fn translator__geometric_quotient__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return translator__wedge_dot__sphere(self_, sphere__inverse(other));
}

fn translator__geometric_quotient__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return translator__wedge_dot__transflector(self_, transflector__inverse(other));
}

fn translator__geometric_quotient__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__wedge_dot__translator(self_, translator__inverse(other));
}

fn circle__contraction__circle(self_: Circle, other: Circle) -> Scalar {
    return circle__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn circle__contraction__dipole(self_: Circle, other: Dipole) -> RoundPoint {
    return circle__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn circle__contraction__flat_point(self_: Circle, other: FlatPoint) -> RoundPoint {
    return circle__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn circle__contraction__flector(self_: Circle, other: Flector) -> MultiVector {
    return circle__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn circle__contraction__line(self_: Circle, other: Line) -> Scalar {
    return circle__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn circle__contraction__motor(self_: Circle, other: Motor) -> MultiVector {
    return circle__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn circle__contraction__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn circle__contraction__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return circle__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn circle__contraction__round_point(self_: Circle, other: RoundPoint) -> Dipole {
    return circle__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn circle__contraction__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return circle__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn circle__contraction__translator(self_: Circle, other: Translator) -> MultiVector {
    return circle__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn dipole__contraction__dipole(self_: Dipole, other: Dipole) -> Scalar {
    return dipole__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn dipole__contraction__flat_point(self_: Dipole, other: FlatPoint) -> Scalar {
    return dipole__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn dipole__contraction__flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn dipole__contraction__motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn dipole__contraction__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn dipole__contraction__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return dipole__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn dipole__contraction__round_point(self_: Dipole, other: RoundPoint) -> RoundPoint {
    return dipole__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn dipole__contraction__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return dipole__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn dipole__contraction__translator(self_: Dipole, other: Translator) -> MultiVector {
    return dipole__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn flat_point__contraction__dipole(self_: FlatPoint, other: Dipole) -> Scalar {
    return flat_point__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn flat_point__contraction__flat_point(self_: FlatPoint, other: FlatPoint) -> Scalar {
    return flat_point__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn flat_point__contraction__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn flat_point__contraction__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn flat_point__contraction__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn flat_point__contraction__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn flat_point__contraction__round_point(self_: FlatPoint, other: RoundPoint) -> RoundPoint {
    return flat_point__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn flat_point__contraction__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn flat_point__contraction__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn flector__contraction__circle(self_: Flector, other: Circle) -> RoundPoint {
    return flector__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn flector__contraction__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return flector__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn flector__contraction__flat_point(self_: Flector, other: FlatPoint) -> MultiVector {
    return flector__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn flector__contraction__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn flector__contraction__line(self_: Flector, other: Line) -> RoundPoint {
    return flector__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn flector__contraction__motor(self_: Flector, other: Motor) -> MultiVector {
    return flector__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn flector__contraction__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn flector__contraction__plane(self_: Flector, other: Plane) -> Scalar {
    return flector__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn flector__contraction__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return flector__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn flector__contraction__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return flector__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn flector__contraction__sphere(self_: Flector, other: Sphere) -> Scalar {
    return flector__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn flector__contraction__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return flector__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn flector__contraction__translator(self_: Flector, other: Translator) -> MultiVector {
    return flector__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn line__contraction__circle(self_: Line, other: Circle) -> Scalar {
    return line__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn line__contraction__dipole(self_: Line, other: Dipole) -> RoundPoint {
    return line__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn line__contraction__flat_point(self_: Line, other: FlatPoint) -> RoundPoint {
    return line__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn line__contraction__flector(self_: Line, other: Flector) -> MultiVector {
    return line__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn line__contraction__line(self_: Line, other: Line) -> Scalar {
    return line__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn line__contraction__motor(self_: Line, other: Motor) -> MultiVector {
    return line__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn line__contraction__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn line__contraction__rotor(self_: Line, other: Rotor) -> MultiVector {
    return line__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn line__contraction__round_point(self_: Line, other: RoundPoint) -> Dipole {
    return line__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn line__contraction__transflector(self_: Line, other: Transflector) -> MultiVector {
    return line__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn line__contraction__translator(self_: Line, other: Translator) -> MultiVector {
    return line__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn motor__contraction__circle(self_: Motor, other: Circle) -> MultiVector {
    return motor__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn motor__contraction__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return motor__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn motor__contraction__flat_point(self_: Motor, other: FlatPoint) -> MultiVector {
    return motor__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn motor__contraction__flector(self_: Motor, other: Flector) -> MultiVector {
    return motor__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn motor__contraction__line(self_: Motor, other: Line) -> MultiVector {
    return motor__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn motor__contraction__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn motor__contraction__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn motor__contraction__plane(self_: Motor, other: Plane) -> RoundPoint {
    return motor__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn motor__contraction__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return motor__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn motor__contraction__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return motor__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn motor__contraction__sphere(self_: Motor, other: Sphere) -> RoundPoint {
    return motor__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn motor__contraction__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return motor__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn motor__contraction__translator(self_: Motor, other: Translator) -> MultiVector {
    return motor__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn multi_vector__contraction__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn multi_vector__contraction__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn multi_vector__contraction__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn multi_vector__contraction__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn multi_vector__contraction__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn multi_vector__contraction__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn multi_vector__contraction__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn multi_vector__contraction__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn multi_vector__contraction__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn multi_vector__contraction__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn multi_vector__contraction__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn multi_vector__contraction__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn multi_vector__contraction__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn plane__contraction__circle(self_: Plane, other: Circle) -> RoundPoint {
    return plane__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn plane__contraction__dipole(self_: Plane, other: Dipole) -> Dipole {
    return plane__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn plane__contraction__flat_point(self_: Plane, other: FlatPoint) -> Dipole {
    return plane__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn plane__contraction__flector(self_: Plane, other: Flector) -> MultiVector {
    return plane__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn plane__contraction__line(self_: Plane, other: Line) -> RoundPoint {
    return plane__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn plane__contraction__motor(self_: Plane, other: Motor) -> MultiVector {
    return plane__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn plane__contraction__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn plane__contraction__plane(self_: Plane, other: Plane) -> Scalar {
    return plane__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn plane__contraction__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return plane__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn plane__contraction__round_point(self_: Plane, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn plane__contraction__sphere(self_: Plane, other: Sphere) -> Scalar {
    return plane__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn plane__contraction__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return plane__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn plane__contraction__translator(self_: Plane, other: Translator) -> MultiVector {
    return plane__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn rotor__contraction__circle(self_: Rotor, other: Circle) -> MultiVector {
    return rotor__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn rotor__contraction__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return rotor__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn rotor__contraction__flat_point(self_: Rotor, other: FlatPoint) -> MultiVector {
    return rotor__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn rotor__contraction__flector(self_: Rotor, other: Flector) -> MultiVector {
    return rotor__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn rotor__contraction__line(self_: Rotor, other: Line) -> MultiVector {
    return rotor__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn rotor__contraction__motor(self_: Rotor, other: Motor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn rotor__contraction__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return rotor__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn rotor__contraction__plane(self_: Rotor, other: Plane) -> RoundPoint {
    return rotor__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn rotor__contraction__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn rotor__contraction__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return rotor__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn rotor__contraction__sphere(self_: Rotor, other: Sphere) -> RoundPoint {
    return rotor__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn rotor__contraction__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return rotor__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn rotor__contraction__translator(self_: Rotor, other: Translator) -> MultiVector {
    return rotor__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn round_point__contraction__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return round_point__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn round_point__contraction__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return round_point__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn round_point__contraction__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return round_point__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn round_point__contraction__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return round_point__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn round_point__contraction__round_point(self_: RoundPoint, other: RoundPoint) -> Scalar {
    return round_point__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn round_point__contraction__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return round_point__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn round_point__contraction__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return round_point__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn sphere__contraction__circle(self_: Sphere, other: Circle) -> RoundPoint {
    return sphere__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn sphere__contraction__dipole(self_: Sphere, other: Dipole) -> Dipole {
    return sphere__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn sphere__contraction__flat_point(self_: Sphere, other: FlatPoint) -> Dipole {
    return sphere__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn sphere__contraction__flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn sphere__contraction__line(self_: Sphere, other: Line) -> RoundPoint {
    return sphere__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn sphere__contraction__motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn sphere__contraction__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn sphere__contraction__plane(self_: Sphere, other: Plane) -> Scalar {
    return sphere__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn sphere__contraction__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return sphere__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn sphere__contraction__round_point(self_: Sphere, other: RoundPoint) -> Circle {
    return sphere__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn sphere__contraction__sphere(self_: Sphere, other: Sphere) -> Scalar {
    return sphere__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn sphere__contraction__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return sphere__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn sphere__contraction__translator(self_: Sphere, other: Translator) -> MultiVector {
    return sphere__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn transflector__contraction__circle(self_: Transflector, other: Circle) -> RoundPoint {
    return transflector__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn transflector__contraction__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return transflector__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn transflector__contraction__flat_point(self_: Transflector, other: FlatPoint) -> MultiVector {
    return transflector__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn transflector__contraction__flector(self_: Transflector, other: Flector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn transflector__contraction__line(self_: Transflector, other: Line) -> RoundPoint {
    return transflector__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn transflector__contraction__motor(self_: Transflector, other: Motor) -> MultiVector {
    return transflector__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn transflector__contraction__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn transflector__contraction__plane(self_: Transflector, other: Plane) -> Scalar {
    return transflector__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn transflector__contraction__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return transflector__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn transflector__contraction__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return transflector__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn transflector__contraction__sphere(self_: Transflector, other: Sphere) -> Scalar {
    return transflector__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn transflector__contraction__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn transflector__contraction__translator(self_: Transflector, other: Translator) -> MultiVector {
    return transflector__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn translator__contraction__circle(self_: Translator, other: Circle) -> MultiVector {
    return translator__anti_wedge__dipole(self_, circle__anti_dual(other));
}

fn translator__contraction__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return translator__anti_wedge__circle(self_, dipole__anti_dual(other));
}

fn translator__contraction__flat_point(self_: Translator, other: FlatPoint) -> MultiVector {
    return translator__anti_wedge__circle(self_, flat_point__anti_dual(other));
}

fn translator__contraction__flector(self_: Translator, other: Flector) -> MultiVector {
    return translator__anti_wedge__multi_vector(self_, flector__anti_dual(other));
}

fn translator__contraction__line(self_: Translator, other: Line) -> MultiVector {
    return translator__anti_wedge__dipole(self_, line__anti_dual(other));
}

fn translator__contraction__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__anti_wedge__multi_vector(self_, motor__anti_dual(other));
}

fn translator__contraction__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn translator__contraction__plane(self_: Translator, other: Plane) -> RoundPoint {
    return translator__anti_wedge__round_point(self_, plane__anti_dual(other));
}

fn translator__contraction__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return translator__anti_wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn translator__contraction__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return translator__anti_wedge__sphere(self_, round_point__anti_dual(other));
}

fn translator__contraction__sphere(self_: Translator, other: Sphere) -> RoundPoint {
    return translator__anti_wedge__round_point(self_, sphere__anti_dual(other));
}

fn translator__contraction__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return translator__anti_wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn translator__contraction__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(self_, translator__anti_dual(other));
}

fn circle__expansion__circle(self_: Circle, other: Circle) -> AntiScalar {
    return circle__wedge__dipole(self_, circle__anti_dual(other));
}

fn circle__expansion__flector(self_: Circle, other: Flector) -> MultiVector {
    return circle__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn circle__expansion__line(self_: Circle, other: Line) -> AntiScalar {
    return circle__wedge__dipole(self_, line__anti_dual(other));
}

fn circle__expansion__motor(self_: Circle, other: Motor) -> MultiVector {
    return circle__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn circle__expansion__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return circle__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn circle__expansion__plane(self_: Circle, other: Plane) -> Sphere {
    return circle__wedge__round_point(self_, plane__anti_dual(other));
}

fn circle__expansion__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return circle__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn circle__expansion__sphere(self_: Circle, other: Sphere) -> Sphere {
    return circle__wedge__round_point(self_, sphere__anti_dual(other));
}

fn circle__expansion__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return circle__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn circle__expansion__translator(self_: Circle, other: Translator) -> MultiVector {
    return circle__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn dipole__expansion__circle(self_: Dipole, other: Circle) -> Sphere {
    return dipole__wedge__dipole(self_, circle__anti_dual(other));
}

fn dipole__expansion__dipole(self_: Dipole, other: Dipole) -> AntiScalar {
    return dipole__wedge__circle(self_, dipole__anti_dual(other));
}

fn dipole__expansion__flat_point(self_: Dipole, other: FlatPoint) -> AntiScalar {
    return dipole__wedge__circle(self_, flat_point__anti_dual(other));
}

fn dipole__expansion__flector(self_: Dipole, other: Flector) -> MultiVector {
    return dipole__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn dipole__expansion__line(self_: Dipole, other: Line) -> Sphere {
    return dipole__wedge__dipole(self_, line__anti_dual(other));
}

fn dipole__expansion__motor(self_: Dipole, other: Motor) -> MultiVector {
    return dipole__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn dipole__expansion__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return dipole__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn dipole__expansion__plane(self_: Dipole, other: Plane) -> Circle {
    return dipole__wedge__round_point(self_, plane__anti_dual(other));
}

fn dipole__expansion__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return dipole__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn dipole__expansion__sphere(self_: Dipole, other: Sphere) -> Circle {
    return dipole__wedge__round_point(self_, sphere__anti_dual(other));
}

fn dipole__expansion__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return dipole__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn dipole__expansion__translator(self_: Dipole, other: Translator) -> MultiVector {
    return dipole__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn flat_point__expansion__circle(self_: FlatPoint, other: Circle) -> Plane {
    return flat_point__wedge__dipole(self_, circle__anti_dual(other));
}

fn flat_point__expansion__dipole(self_: FlatPoint, other: Dipole) -> AntiScalar {
    return flat_point__wedge__circle(self_, dipole__anti_dual(other));
}

fn flat_point__expansion__flat_point(self_: FlatPoint, other: FlatPoint) -> AntiScalar {
    return flat_point__wedge__circle(self_, flat_point__anti_dual(other));
}

fn flat_point__expansion__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flat_point__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn flat_point__expansion__line(self_: FlatPoint, other: Line) -> Plane {
    return flat_point__wedge__dipole(self_, line__anti_dual(other));
}

fn flat_point__expansion__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flat_point__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn flat_point__expansion__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return flat_point__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn flat_point__expansion__plane(self_: FlatPoint, other: Plane) -> Line {
    return flat_point__wedge__round_point(self_, plane__anti_dual(other));
}

fn flat_point__expansion__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return flat_point__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn flat_point__expansion__sphere(self_: FlatPoint, other: Sphere) -> Line {
    return flat_point__wedge__round_point(self_, sphere__anti_dual(other));
}

fn flat_point__expansion__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return flat_point__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn flat_point__expansion__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return flat_point__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn flector__expansion__circle(self_: Flector, other: Circle) -> Plane {
    return flector__wedge__dipole(self_, circle__anti_dual(other));
}

fn flector__expansion__dipole(self_: Flector, other: Dipole) -> AntiScalar {
    return flector__wedge__circle(self_, dipole__anti_dual(other));
}

fn flector__expansion__flat_point(self_: Flector, other: FlatPoint) -> AntiScalar {
    return flector__wedge__circle(self_, flat_point__anti_dual(other));
}

fn flector__expansion__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn flector__expansion__line(self_: Flector, other: Line) -> Plane {
    return flector__wedge__dipole(self_, line__anti_dual(other));
}

fn flector__expansion__motor(self_: Flector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn flector__expansion__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn flector__expansion__plane(self_: Flector, other: Plane) -> Motor {
    return flector__wedge__round_point(self_, plane__anti_dual(other));
}

fn flector__expansion__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn flector__expansion__sphere(self_: Flector, other: Sphere) -> Motor {
    return flector__wedge__round_point(self_, sphere__anti_dual(other));
}

fn flector__expansion__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return flector__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn flector__expansion__translator(self_: Flector, other: Translator) -> MultiVector {
    return flector__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn line__expansion__circle(self_: Line, other: Circle) -> AntiScalar {
    return line__wedge__dipole(self_, circle__anti_dual(other));
}

fn line__expansion__flector(self_: Line, other: Flector) -> MultiVector {
    return line__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn line__expansion__line(self_: Line, other: Line) -> AntiScalar {
    return line__wedge__dipole(self_, line__anti_dual(other));
}

fn line__expansion__motor(self_: Line, other: Motor) -> MultiVector {
    return line__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn line__expansion__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn line__expansion__plane(self_: Line, other: Plane) -> Plane {
    return line__wedge__round_point(self_, plane__anti_dual(other));
}

fn line__expansion__rotor(self_: Line, other: Rotor) -> MultiVector {
    return line__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn line__expansion__sphere(self_: Line, other: Sphere) -> Plane {
    return line__wedge__round_point(self_, sphere__anti_dual(other));
}

fn line__expansion__transflector(self_: Line, other: Transflector) -> MultiVector {
    return line__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn line__expansion__translator(self_: Line, other: Translator) -> MultiVector {
    return line__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn motor__expansion__circle(self_: Motor, other: Circle) -> AntiScalar {
    return motor__wedge__dipole(self_, circle__anti_dual(other));
}

fn motor__expansion__flector(self_: Motor, other: Flector) -> MultiVector {
    return motor__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn motor__expansion__line(self_: Motor, other: Line) -> AntiScalar {
    return motor__wedge__dipole(self_, line__anti_dual(other));
}

fn motor__expansion__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn motor__expansion__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn motor__expansion__plane(self_: Motor, other: Plane) -> Plane {
    return motor__wedge__round_point(self_, plane__anti_dual(other));
}

fn motor__expansion__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return motor__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn motor__expansion__sphere(self_: Motor, other: Sphere) -> Plane {
    return motor__wedge__round_point(self_, sphere__anti_dual(other));
}

fn motor__expansion__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return motor__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn motor__expansion__translator(self_: Motor, other: Translator) -> MultiVector {
    return motor__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn multi_vector__expansion__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(self_, circle__anti_dual(other));
}

fn multi_vector__expansion__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(self_, dipole__anti_dual(other));
}

fn multi_vector__expansion__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__wedge__circle(self_, flat_point__anti_dual(other));
}

fn multi_vector__expansion__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn multi_vector__expansion__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(self_, line__anti_dual(other));
}

fn multi_vector__expansion__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn multi_vector__expansion__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn multi_vector__expansion__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__wedge__round_point(self_, plane__anti_dual(other));
}

fn multi_vector__expansion__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn multi_vector__expansion__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__wedge__sphere(self_, round_point__anti_dual(other));
}

fn multi_vector__expansion__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(self_, sphere__anti_dual(other));
}

fn multi_vector__expansion__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn multi_vector__expansion__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn plane__expansion__flector(self_: Plane, other: Flector) -> MultiVector {
    return plane__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn plane__expansion__motor(self_: Plane, other: Motor) -> MultiVector {
    return plane__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn plane__expansion__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn plane__expansion__plane(self_: Plane, other: Plane) -> AntiScalar {
    return plane__wedge__round_point(self_, plane__anti_dual(other));
}

fn plane__expansion__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return plane__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn plane__expansion__sphere(self_: Plane, other: Sphere) -> AntiScalar {
    return plane__wedge__round_point(self_, sphere__anti_dual(other));
}

fn plane__expansion__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return plane__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn plane__expansion__translator(self_: Plane, other: Translator) -> MultiVector {
    return plane__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn rotor__expansion__circle(self_: Rotor, other: Circle) -> AntiScalar {
    return rotor__wedge__dipole(self_, circle__anti_dual(other));
}

fn rotor__expansion__flector(self_: Rotor, other: Flector) -> MultiVector {
    return rotor__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn rotor__expansion__line(self_: Rotor, other: Line) -> AntiScalar {
    return rotor__wedge__dipole(self_, line__anti_dual(other));
}

fn rotor__expansion__motor(self_: Rotor, other: Motor) -> MultiVector {
    return rotor__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn rotor__expansion__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return rotor__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn rotor__expansion__plane(self_: Rotor, other: Plane) -> Plane {
    return rotor__wedge__round_point(self_, plane__anti_dual(other));
}

fn rotor__expansion__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn rotor__expansion__sphere(self_: Rotor, other: Sphere) -> Plane {
    return rotor__wedge__round_point(self_, sphere__anti_dual(other));
}

fn rotor__expansion__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return rotor__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn rotor__expansion__translator(self_: Rotor, other: Translator) -> MultiVector {
    return rotor__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn round_point__expansion__circle(self_: RoundPoint, other: Circle) -> Circle {
    return round_point__wedge__dipole(self_, circle__anti_dual(other));
}

fn round_point__expansion__dipole(self_: RoundPoint, other: Dipole) -> Sphere {
    return round_point__wedge__circle(self_, dipole__anti_dual(other));
}

fn round_point__expansion__flat_point(self_: RoundPoint, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(self_, flat_point__anti_dual(other));
}

fn round_point__expansion__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return round_point__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn round_point__expansion__line(self_: RoundPoint, other: Line) -> Circle {
    return round_point__wedge__dipole(self_, line__anti_dual(other));
}

fn round_point__expansion__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return round_point__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn round_point__expansion__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return round_point__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn round_point__expansion__plane(self_: RoundPoint, other: Plane) -> Dipole {
    return round_point__wedge__round_point(self_, plane__anti_dual(other));
}

fn round_point__expansion__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return round_point__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn round_point__expansion__round_point(self_: RoundPoint, other: RoundPoint) -> AntiScalar {
    return round_point__wedge__sphere(self_, round_point__anti_dual(other));
}

fn round_point__expansion__sphere(self_: RoundPoint, other: Sphere) -> Dipole {
    return round_point__wedge__round_point(self_, sphere__anti_dual(other));
}

fn round_point__expansion__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return round_point__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn round_point__expansion__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return round_point__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn sphere__expansion__flector(self_: Sphere, other: Flector) -> MultiVector {
    return sphere__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn sphere__expansion__motor(self_: Sphere, other: Motor) -> MultiVector {
    return sphere__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn sphere__expansion__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return sphere__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn sphere__expansion__plane(self_: Sphere, other: Plane) -> AntiScalar {
    return sphere__wedge__round_point(self_, plane__anti_dual(other));
}

fn sphere__expansion__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return sphere__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn sphere__expansion__sphere(self_: Sphere, other: Sphere) -> AntiScalar {
    return sphere__wedge__round_point(self_, sphere__anti_dual(other));
}

fn sphere__expansion__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return sphere__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn sphere__expansion__translator(self_: Sphere, other: Translator) -> MultiVector {
    return sphere__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn transflector__expansion__circle(self_: Transflector, other: Circle) -> Plane {
    return transflector__wedge__dipole(self_, circle__anti_dual(other));
}

fn transflector__expansion__dipole(self_: Transflector, other: Dipole) -> AntiScalar {
    return transflector__wedge__circle(self_, dipole__anti_dual(other));
}

fn transflector__expansion__flat_point(self_: Transflector, other: FlatPoint) -> AntiScalar {
    return transflector__wedge__circle(self_, flat_point__anti_dual(other));
}

fn transflector__expansion__flector(self_: Transflector, other: Flector) -> MultiVector {
    return transflector__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn transflector__expansion__line(self_: Transflector, other: Line) -> Plane {
    return transflector__wedge__dipole(self_, line__anti_dual(other));
}

fn transflector__expansion__motor(self_: Transflector, other: Motor) -> MultiVector {
    return transflector__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn transflector__expansion__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn transflector__expansion__plane(self_: Transflector, other: Plane) -> Motor {
    return transflector__wedge__round_point(self_, plane__anti_dual(other));
}

fn transflector__expansion__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return transflector__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn transflector__expansion__sphere(self_: Transflector, other: Sphere) -> Motor {
    return transflector__wedge__round_point(self_, sphere__anti_dual(other));
}

fn transflector__expansion__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn transflector__expansion__translator(self_: Transflector, other: Translator) -> MultiVector {
    return transflector__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn translator__expansion__circle(self_: Translator, other: Circle) -> AntiScalar {
    return translator__wedge__dipole(self_, circle__anti_dual(other));
}

fn translator__expansion__flector(self_: Translator, other: Flector) -> MultiVector {
    return translator__wedge__multi_vector(self_, flector__anti_dual(other));
}

fn translator__expansion__line(self_: Translator, other: Line) -> AntiScalar {
    return translator__wedge__dipole(self_, line__anti_dual(other));
}

fn translator__expansion__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__wedge__multi_vector(self_, motor__anti_dual(other));
}

fn translator__expansion__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__wedge__multi_vector(self_, multi_vector__anti_dual(other));
}

fn translator__expansion__plane(self_: Translator, other: Plane) -> Plane {
    return translator__wedge__round_point(self_, plane__anti_dual(other));
}

fn translator__expansion__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return translator__wedge__multi_vector(self_, rotor__anti_dual(other));
}

fn translator__expansion__sphere(self_: Translator, other: Sphere) -> Plane {
    return translator__wedge__round_point(self_, sphere__anti_dual(other));
}

fn translator__expansion__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return translator__wedge__multi_vector(self_, transflector__anti_dual(other));
}

fn translator__expansion__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(self_, translator__anti_dual(other));
}

fn circle__anti_project_orthogonally_onto__circle(self_: Circle, other: Circle) -> Circle {
    return circle__wedge__scalar(other, circle__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__dipole(self_: Circle, other: Dipole) -> Circle {
    return dipole__wedge__round_point(other, circle__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__flat_point(self_: Circle, other: FlatPoint) -> Line {
    return flat_point__wedge__round_point(other, circle__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__flector(self_: Circle, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__line(self_: Circle, other: Line) -> Line {
    return line__wedge__scalar(other, circle__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__motor(self_: Circle, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__round_point(self_: Circle, other: RoundPoint) -> Circle {
    return round_point__wedge__dipole(other, circle__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn circle__anti_project_orthogonally_onto__translator(self_: Circle, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole__wedge__scalar(other, dipole__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__flat_point(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flat_point__wedge__scalar(other, dipole__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__round_point(self_: Dipole, other: RoundPoint) -> Dipole {
    return round_point__wedge__round_point(other, dipole__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn dipole__anti_project_orthogonally_onto__translator(self_: Dipole, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole__wedge__scalar(other, flat_point__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flat_point__wedge__scalar(other, flat_point__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__round_point(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return round_point__wedge__round_point(other, flat_point__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn flat_point__anti_project_orthogonally_onto__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__circle(self_: Flector, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, flector__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, flector__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__flat_point(self_: Flector, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, flector__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__line(self_: Flector, other: Line) -> Plane {
    return line__wedge__round_point(other, flector__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__motor(self_: Flector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__plane(self_: Flector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, flector__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, flector__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__sphere(self_: Flector, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, flector__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__translator(self_: Flector, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__circle(self_: Line, other: Circle) -> Circle {
    return circle__wedge__scalar(other, line__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__dipole(self_: Line, other: Dipole) -> Circle {
    return dipole__wedge__round_point(other, line__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__flat_point(self_: Line, other: FlatPoint) -> Line {
    return flat_point__wedge__round_point(other, line__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__flector(self_: Line, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__line(self_: Line, other: Line) -> Line {
    return line__wedge__scalar(other, line__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__motor(self_: Line, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__rotor(self_: Line, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__round_point(self_: Line, other: RoundPoint) -> Circle {
    return round_point__wedge__dipole(other, line__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__transflector(self_: Line, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__translator(self_: Line, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__circle(self_: Motor, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, motor__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, motor__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__flat_point(self_: Motor, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, motor__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__line(self_: Motor, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, motor__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__plane(self_: Motor, other: Plane) -> AntiScalar {
    return plane__wedge__round_point(other, motor__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, motor__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__sphere(self_: Motor, other: Sphere) -> AntiScalar {
    return sphere__wedge__round_point(other, motor__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__translator(self_: Motor, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, multi_vector__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, multi_vector__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, multi_vector__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, multi_vector__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__wedge__multi_vector(other, multi_vector__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, multi_vector__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere__wedge__multi_vector(other, multi_vector__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__circle(self_: Plane, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, plane__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__dipole(self_: Plane, other: Dipole) -> Sphere {
    return dipole__wedge__dipole(other, plane__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__flat_point(self_: Plane, other: FlatPoint) -> Plane {
    return flat_point__wedge__dipole(other, plane__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__flector(self_: Plane, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__line(self_: Plane, other: Line) -> Plane {
    return line__wedge__round_point(other, plane__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__motor(self_: Plane, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__wedge__scalar(other, plane__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__round_point(self_: Plane, other: RoundPoint) -> Sphere {
    return round_point__wedge__circle(other, plane__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, plane__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__translator(self_: Plane, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__circle(self_: Rotor, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, rotor__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, rotor__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__flat_point(self_: Rotor, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, rotor__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__line(self_: Rotor, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, rotor__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__motor(self_: Rotor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__plane(self_: Rotor, other: Plane) -> AntiScalar {
    return plane__wedge__round_point(other, rotor__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, rotor__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__sphere(self_: Rotor, other: Sphere) -> AntiScalar {
    return sphere__wedge__round_point(other, rotor__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__translator(self_: Rotor, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn round_point__anti_project_orthogonally_onto__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn round_point__anti_project_orthogonally_onto__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn round_point__anti_project_orthogonally_onto__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn round_point__anti_project_orthogonally_onto__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn round_point__anti_project_orthogonally_onto__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return round_point__wedge__scalar(other, round_point__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn round_point__anti_project_orthogonally_onto__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn round_point__anti_project_orthogonally_onto__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__circle(self_: Sphere, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, sphere__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__dipole(self_: Sphere, other: Dipole) -> Sphere {
    return dipole__wedge__dipole(other, sphere__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__flat_point(self_: Sphere, other: FlatPoint) -> Plane {
    return flat_point__wedge__dipole(other, sphere__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__line(self_: Sphere, other: Line) -> Plane {
    return line__wedge__round_point(other, sphere__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__plane(self_: Sphere, other: Plane) -> Plane {
    return plane__wedge__scalar(other, sphere__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__round_point(self_: Sphere, other: RoundPoint) -> Sphere {
    return round_point__wedge__circle(other, sphere__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, sphere__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn sphere__anti_project_orthogonally_onto__translator(self_: Sphere, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__circle(self_: Transflector, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, transflector__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, transflector__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__flat_point(self_: Transflector, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, transflector__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__flector(self_: Transflector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__line(self_: Transflector, other: Line) -> Plane {
    return line__wedge__round_point(other, transflector__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__motor(self_: Transflector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__plane(self_: Transflector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, transflector__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, transflector__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__sphere(self_: Transflector, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, transflector__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__translator(self_: Transflector, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__circle(self_: Translator, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, translator__anti_wedge__dipole(self_, circle__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, translator__anti_wedge__circle(self_, dipole__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__flat_point(self_: Translator, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, translator__anti_wedge__circle(self_, flat_point__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__flector(self_: Translator, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__line(self_: Translator, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, translator__anti_wedge__dipole(self_, line__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__motor(self_: Translator, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__plane(self_: Translator, other: Plane) -> AntiScalar {
    return plane__wedge__round_point(other, translator__anti_wedge__round_point(self_, plane__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, translator__anti_wedge__sphere(self_, round_point__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__sphere(self_: Translator, other: Sphere) -> AntiScalar {
    return sphere__wedge__round_point(other, translator__anti_wedge__round_point(self_, sphere__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn circle__anti_project_via_horizon_onto__circle(self_: Circle, other: Circle) -> Circle {
    return circle__wedge__scalar(other, circle__anti_wedge__dipole(self_, circle__dual(other)));
}

fn circle__anti_project_via_horizon_onto__dipole(self_: Circle, other: Dipole) -> Circle {
    return dipole__wedge__round_point(other, circle__anti_wedge__circle(self_, dipole__dual(other)));
}

fn circle__anti_project_via_horizon_onto__flat_point(self_: Circle, other: FlatPoint) -> Line {
    return flat_point__wedge__round_point(other, circle__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn circle__anti_project_via_horizon_onto__flector(self_: Circle, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn circle__anti_project_via_horizon_onto__line(self_: Circle, other: Line) -> Line {
    return line__wedge__scalar(other, circle__anti_wedge__dipole(self_, line__dual(other)));
}

fn circle__anti_project_via_horizon_onto__motor(self_: Circle, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn circle__anti_project_via_horizon_onto__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn circle__anti_project_via_horizon_onto__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn circle__anti_project_via_horizon_onto__round_point(self_: Circle, other: RoundPoint) -> Circle {
    return round_point__wedge__dipole(other, circle__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn circle__anti_project_via_horizon_onto__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn circle__anti_project_via_horizon_onto__translator(self_: Circle, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, circle__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole__wedge__scalar(other, dipole__anti_wedge__circle(self_, dipole__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__flat_point(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flat_point__wedge__scalar(other, dipole__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__round_point(self_: Dipole, other: RoundPoint) -> Dipole {
    return round_point__wedge__round_point(other, dipole__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn dipole__anti_project_via_horizon_onto__translator(self_: Dipole, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, dipole__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole__wedge__scalar(other, flat_point__anti_wedge__circle(self_, dipole__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flat_point__wedge__scalar(other, flat_point__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__round_point(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return round_point__wedge__round_point(other, flat_point__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn flat_point__anti_project_via_horizon_onto__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, flat_point__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn flector__anti_project_via_horizon_onto__circle(self_: Flector, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, flector__anti_wedge__dipole(self_, circle__dual(other)));
}

fn flector__anti_project_via_horizon_onto__dipole(self_: Flector, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, flector__anti_wedge__circle(self_, dipole__dual(other)));
}

fn flector__anti_project_via_horizon_onto__flat_point(self_: Flector, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, flector__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn flector__anti_project_via_horizon_onto__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn flector__anti_project_via_horizon_onto__line(self_: Flector, other: Line) -> Plane {
    return line__wedge__round_point(other, flector__anti_wedge__dipole(self_, line__dual(other)));
}

fn flector__anti_project_via_horizon_onto__motor(self_: Flector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn flector__anti_project_via_horizon_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn flector__anti_project_via_horizon_onto__plane(self_: Flector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, flector__anti_wedge__round_point(self_, plane__dual(other)));
}

fn flector__anti_project_via_horizon_onto__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn flector__anti_project_via_horizon_onto__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, flector__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn flector__anti_project_via_horizon_onto__sphere(self_: Flector, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, flector__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn flector__anti_project_via_horizon_onto__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn flector__anti_project_via_horizon_onto__translator(self_: Flector, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, flector__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn line__anti_project_via_horizon_onto__circle(self_: Line, other: Circle) -> Circle {
    return circle__wedge__scalar(other, line__anti_wedge__dipole(self_, circle__dual(other)));
}

fn line__anti_project_via_horizon_onto__dipole(self_: Line, other: Dipole) -> Circle {
    return dipole__wedge__round_point(other, line__anti_wedge__circle(self_, dipole__dual(other)));
}

fn line__anti_project_via_horizon_onto__flat_point(self_: Line, other: FlatPoint) -> Line {
    return flat_point__wedge__round_point(other, line__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn line__anti_project_via_horizon_onto__flector(self_: Line, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn line__anti_project_via_horizon_onto__line(self_: Line, other: Line) -> Line {
    return line__wedge__scalar(other, line__anti_wedge__dipole(self_, line__dual(other)));
}

fn line__anti_project_via_horizon_onto__motor(self_: Line, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn line__anti_project_via_horizon_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn line__anti_project_via_horizon_onto__rotor(self_: Line, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn line__anti_project_via_horizon_onto__round_point(self_: Line, other: RoundPoint) -> Circle {
    return round_point__wedge__dipole(other, line__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn line__anti_project_via_horizon_onto__transflector(self_: Line, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn line__anti_project_via_horizon_onto__translator(self_: Line, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, line__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn motor__anti_project_via_horizon_onto__circle(self_: Motor, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, motor__anti_wedge__dipole(self_, circle__dual(other)));
}

fn motor__anti_project_via_horizon_onto__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, motor__anti_wedge__circle(self_, dipole__dual(other)));
}

fn motor__anti_project_via_horizon_onto__flat_point(self_: Motor, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, motor__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn motor__anti_project_via_horizon_onto__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn motor__anti_project_via_horizon_onto__line(self_: Motor, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, motor__anti_wedge__dipole(self_, line__dual(other)));
}

fn motor__anti_project_via_horizon_onto__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn motor__anti_project_via_horizon_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn motor__anti_project_via_horizon_onto__plane(self_: Motor, other: Plane) -> AntiScalar {
    return plane__wedge__round_point(other, motor__anti_wedge__round_point(self_, plane__dual(other)));
}

fn motor__anti_project_via_horizon_onto__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn motor__anti_project_via_horizon_onto__round_point(self_: Motor, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, motor__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn motor__anti_project_via_horizon_onto__sphere(self_: Motor, other: Sphere) -> AntiScalar {
    return sphere__wedge__round_point(other, motor__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn motor__anti_project_via_horizon_onto__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn motor__anti_project_via_horizon_onto__translator(self_: Motor, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, motor__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, multi_vector__anti_wedge__dipole(self_, circle__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, multi_vector__anti_wedge__circle(self_, dipole__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, multi_vector__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, multi_vector__anti_wedge__dipole(self_, line__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__wedge__multi_vector(other, multi_vector__anti_wedge__round_point(self_, plane__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, multi_vector__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere__wedge__multi_vector(other, multi_vector__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn plane__anti_project_via_horizon_onto__circle(self_: Plane, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, plane__anti_wedge__dipole(self_, circle__dual(other)));
}

fn plane__anti_project_via_horizon_onto__dipole(self_: Plane, other: Dipole) -> Sphere {
    return dipole__wedge__dipole(other, plane__anti_wedge__circle(self_, dipole__dual(other)));
}

fn plane__anti_project_via_horizon_onto__flat_point(self_: Plane, other: FlatPoint) -> Plane {
    return flat_point__wedge__dipole(other, plane__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn plane__anti_project_via_horizon_onto__flector(self_: Plane, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn plane__anti_project_via_horizon_onto__line(self_: Plane, other: Line) -> Plane {
    return line__wedge__round_point(other, plane__anti_wedge__dipole(self_, line__dual(other)));
}

fn plane__anti_project_via_horizon_onto__motor(self_: Plane, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn plane__anti_project_via_horizon_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn plane__anti_project_via_horizon_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__wedge__scalar(other, plane__anti_wedge__round_point(self_, plane__dual(other)));
}

fn plane__anti_project_via_horizon_onto__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn plane__anti_project_via_horizon_onto__round_point(self_: Plane, other: RoundPoint) -> Sphere {
    return round_point__wedge__circle(other, plane__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn plane__anti_project_via_horizon_onto__sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, plane__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn plane__anti_project_via_horizon_onto__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn plane__anti_project_via_horizon_onto__translator(self_: Plane, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, plane__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__circle(self_: Rotor, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, rotor__anti_wedge__dipole(self_, circle__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, rotor__anti_wedge__circle(self_, dipole__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__flat_point(self_: Rotor, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, rotor__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__line(self_: Rotor, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, rotor__anti_wedge__dipole(self_, line__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__motor(self_: Rotor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__plane(self_: Rotor, other: Plane) -> AntiScalar {
    return plane__wedge__round_point(other, rotor__anti_wedge__round_point(self_, plane__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__round_point(self_: Rotor, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, rotor__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__sphere(self_: Rotor, other: Sphere) -> AntiScalar {
    return sphere__wedge__round_point(other, rotor__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__translator(self_: Rotor, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, rotor__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn round_point__anti_project_via_horizon_onto__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn round_point__anti_project_via_horizon_onto__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn round_point__anti_project_via_horizon_onto__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn round_point__anti_project_via_horizon_onto__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn round_point__anti_project_via_horizon_onto__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return round_point__wedge__scalar(other, round_point__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn round_point__anti_project_via_horizon_onto__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn round_point__anti_project_via_horizon_onto__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, round_point__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__circle(self_: Sphere, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, sphere__anti_wedge__dipole(self_, circle__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__dipole(self_: Sphere, other: Dipole) -> Sphere {
    return dipole__wedge__dipole(other, sphere__anti_wedge__circle(self_, dipole__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__flat_point(self_: Sphere, other: FlatPoint) -> Plane {
    return flat_point__wedge__dipole(other, sphere__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__line(self_: Sphere, other: Line) -> Plane {
    return line__wedge__round_point(other, sphere__anti_wedge__dipole(self_, line__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__plane(self_: Sphere, other: Plane) -> Plane {
    return plane__wedge__scalar(other, sphere__anti_wedge__round_point(self_, plane__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__round_point(self_: Sphere, other: RoundPoint) -> Sphere {
    return round_point__wedge__circle(other, sphere__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, sphere__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn sphere__anti_project_via_horizon_onto__translator(self_: Sphere, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, sphere__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__circle(self_: Transflector, other: Circle) -> Sphere {
    return circle__wedge__round_point(other, transflector__anti_wedge__dipole(self_, circle__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__dipole(self_: Transflector, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, transflector__anti_wedge__circle(self_, dipole__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__flat_point(self_: Transflector, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, transflector__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__flector(self_: Transflector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__line(self_: Transflector, other: Line) -> Plane {
    return line__wedge__round_point(other, transflector__anti_wedge__dipole(self_, line__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__motor(self_: Transflector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__plane(self_: Transflector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, transflector__anti_wedge__round_point(self_, plane__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, transflector__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__sphere(self_: Transflector, other: Sphere) -> Sphere {
    return sphere__wedge__scalar(other, transflector__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__translator(self_: Transflector, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, transflector__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn translator__anti_project_via_horizon_onto__circle(self_: Translator, other: Circle) -> MultiVector {
    return circle__wedge__multi_vector(other, translator__anti_wedge__dipole(self_, circle__dual(other)));
}

fn translator__anti_project_via_horizon_onto__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return dipole__wedge__multi_vector(other, translator__anti_wedge__circle(self_, dipole__dual(other)));
}

fn translator__anti_project_via_horizon_onto__flat_point(self_: Translator, other: FlatPoint) -> MultiVector {
    return flat_point__wedge__multi_vector(other, translator__anti_wedge__circle(self_, flat_point__dual(other)));
}

fn translator__anti_project_via_horizon_onto__flector(self_: Translator, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, flector__dual(other)));
}

fn translator__anti_project_via_horizon_onto__line(self_: Translator, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, translator__anti_wedge__dipole(self_, line__dual(other)));
}

fn translator__anti_project_via_horizon_onto__motor(self_: Translator, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, motor__dual(other)));
}

fn translator__anti_project_via_horizon_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn translator__anti_project_via_horizon_onto__plane(self_: Translator, other: Plane) -> AntiScalar {
    return plane__wedge__round_point(other, translator__anti_wedge__round_point(self_, plane__dual(other)));
}

fn translator__anti_project_via_horizon_onto__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, rotor__dual(other)));
}

fn translator__anti_project_via_horizon_onto__round_point(self_: Translator, other: RoundPoint) -> MultiVector {
    return round_point__wedge__multi_vector(other, translator__anti_wedge__sphere(self_, round_point__dual(other)));
}

fn translator__anti_project_via_horizon_onto__sphere(self_: Translator, other: Sphere) -> AntiScalar {
    return sphere__wedge__round_point(other, translator__anti_wedge__round_point(self_, sphere__dual(other)));
}

fn translator__anti_project_via_horizon_onto__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, transflector__dual(other)));
}

fn translator__anti_project_via_horizon_onto__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, translator__anti_wedge__multi_vector(self_, translator__dual(other)));
}

fn circle__project_orthogonally_onto__circle(self_: Circle, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, circle__wedge__dipole(self_, circle__anti_dual(other)));
}

fn circle__project_orthogonally_onto__flector(self_: Circle, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn circle__project_orthogonally_onto__line(self_: Circle, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, circle__wedge__dipole(self_, line__anti_dual(other)));
}

fn circle__project_orthogonally_onto__motor(self_: Circle, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn circle__project_orthogonally_onto__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn circle__project_orthogonally_onto__plane(self_: Circle, other: Plane) -> Circle {
    return plane__anti_wedge__sphere(other, circle__wedge__round_point(self_, plane__anti_dual(other)));
}

fn circle__project_orthogonally_onto__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn circle__project_orthogonally_onto__sphere(self_: Circle, other: Sphere) -> Circle {
    return sphere__anti_wedge__sphere(other, circle__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn circle__project_orthogonally_onto__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn circle__project_orthogonally_onto__translator(self_: Circle, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__circle(self_: Dipole, other: Circle) -> Dipole {
    return circle__anti_wedge__sphere(other, dipole__wedge__dipole(self_, circle__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, dipole__wedge__circle(self_, dipole__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__flat_point(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, dipole__wedge__circle(self_, flat_point__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__line(self_: Dipole, other: Line) -> Dipole {
    return line__anti_wedge__sphere(other, dipole__wedge__dipole(self_, line__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__plane(self_: Dipole, other: Plane) -> Dipole {
    return plane__anti_wedge__circle(other, dipole__wedge__round_point(self_, plane__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__sphere(self_: Dipole, other: Sphere) -> Dipole {
    return sphere__anti_wedge__circle(other, dipole__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn dipole__project_orthogonally_onto__translator(self_: Dipole, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__circle(self_: FlatPoint, other: Circle) -> Dipole {
    return circle__anti_wedge__plane(other, flat_point__wedge__dipole(self_, circle__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, flat_point__wedge__circle(self_, dipole__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, flat_point__wedge__circle(self_, flat_point__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__line(self_: FlatPoint, other: Line) -> FlatPoint {
    return line__anti_wedge__plane(other, flat_point__wedge__dipole(self_, line__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__plane(self_: FlatPoint, other: Plane) -> FlatPoint {
    return plane__anti_wedge__line(other, flat_point__wedge__round_point(self_, plane__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return sphere__anti_wedge__line(other, flat_point__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn flat_point__project_orthogonally_onto__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn flector__project_orthogonally_onto__circle(self_: Flector, other: Circle) -> Dipole {
    return circle__anti_wedge__plane(other, flector__wedge__dipole(self_, circle__anti_dual(other)));
}

fn flector__project_orthogonally_onto__dipole(self_: Flector, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, flector__wedge__circle(self_, dipole__anti_dual(other)));
}

fn flector__project_orthogonally_onto__flat_point(self_: Flector, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, flector__wedge__circle(self_, flat_point__anti_dual(other)));
}

fn flector__project_orthogonally_onto__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn flector__project_orthogonally_onto__line(self_: Flector, other: Line) -> FlatPoint {
    return line__anti_wedge__plane(other, flector__wedge__dipole(self_, line__anti_dual(other)));
}

fn flector__project_orthogonally_onto__motor(self_: Flector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn flector__project_orthogonally_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn flector__project_orthogonally_onto__plane(self_: Flector, other: Plane) -> Flector {
    return plane__anti_wedge__motor(other, flector__wedge__round_point(self_, plane__anti_dual(other)));
}

fn flector__project_orthogonally_onto__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn flector__project_orthogonally_onto__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return sphere__anti_wedge__motor(other, flector__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn flector__project_orthogonally_onto__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn flector__project_orthogonally_onto__translator(self_: Flector, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn line__project_orthogonally_onto__circle(self_: Line, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, line__wedge__dipole(self_, circle__anti_dual(other)));
}

fn line__project_orthogonally_onto__flector(self_: Line, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn line__project_orthogonally_onto__line(self_: Line, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, line__wedge__dipole(self_, line__anti_dual(other)));
}

fn line__project_orthogonally_onto__motor(self_: Line, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn line__project_orthogonally_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn line__project_orthogonally_onto__plane(self_: Line, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, line__wedge__round_point(self_, plane__anti_dual(other)));
}

fn line__project_orthogonally_onto__rotor(self_: Line, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn line__project_orthogonally_onto__sphere(self_: Line, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, line__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn line__project_orthogonally_onto__transflector(self_: Line, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn line__project_orthogonally_onto__translator(self_: Line, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn motor__project_orthogonally_onto__circle(self_: Motor, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, motor__wedge__dipole(self_, circle__anti_dual(other)));
}

fn motor__project_orthogonally_onto__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn motor__project_orthogonally_onto__line(self_: Motor, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, motor__wedge__dipole(self_, line__anti_dual(other)));
}

fn motor__project_orthogonally_onto__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn motor__project_orthogonally_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn motor__project_orthogonally_onto__plane(self_: Motor, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, motor__wedge__round_point(self_, plane__anti_dual(other)));
}

fn motor__project_orthogonally_onto__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn motor__project_orthogonally_onto__sphere(self_: Motor, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, motor__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn motor__project_orthogonally_onto__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn motor__project_orthogonally_onto__translator(self_: Motor, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle__anti_wedge__multi_vector(other, multi_vector__wedge__dipole(self_, circle__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole__anti_wedge__multi_vector(other, multi_vector__wedge__circle(self_, dipole__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(other, multi_vector__wedge__circle(self_, flat_point__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__anti_wedge__multi_vector(other, multi_vector__wedge__dipole(self_, line__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__anti_wedge__multi_vector(other, multi_vector__wedge__round_point(self_, plane__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return round_point__anti_wedge__multi_vector(other, multi_vector__wedge__sphere(self_, round_point__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere__anti_wedge__multi_vector(other, multi_vector__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn plane__project_orthogonally_onto__flector(self_: Plane, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn plane__project_orthogonally_onto__motor(self_: Plane, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn plane__project_orthogonally_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn plane__project_orthogonally_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, plane__wedge__round_point(self_, plane__anti_dual(other)));
}

fn plane__project_orthogonally_onto__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn plane__project_orthogonally_onto__sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere__anti_wedge__anti_scalar(other, plane__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn plane__project_orthogonally_onto__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn plane__project_orthogonally_onto__translator(self_: Plane, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__circle(self_: Rotor, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, rotor__wedge__dipole(self_, circle__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__line(self_: Rotor, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, rotor__wedge__dipole(self_, line__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__motor(self_: Rotor, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__plane(self_: Rotor, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, rotor__wedge__round_point(self_, plane__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__sphere(self_: Rotor, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, rotor__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__translator(self_: Rotor, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return circle__anti_wedge__circle(other, round_point__wedge__dipole(self_, circle__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return dipole__anti_wedge__sphere(other, round_point__wedge__circle(self_, dipole__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__flat_point(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return flat_point__anti_wedge__sphere(other, round_point__wedge__circle(self_, flat_point__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__line(self_: RoundPoint, other: Line) -> RoundPoint {
    return line__anti_wedge__circle(other, round_point__wedge__dipole(self_, line__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return plane__anti_wedge__dipole(other, round_point__wedge__round_point(self_, plane__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return round_point__anti_wedge__anti_scalar(other, round_point__wedge__sphere(self_, round_point__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return sphere__anti_wedge__dipole(other, round_point__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn round_point__project_orthogonally_onto__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__plane(self_: Sphere, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, sphere__wedge__round_point(self_, plane__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere__anti_wedge__anti_scalar(other, sphere__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn sphere__project_orthogonally_onto__translator(self_: Sphere, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__circle(self_: Transflector, other: Circle) -> Dipole {
    return circle__anti_wedge__plane(other, transflector__wedge__dipole(self_, circle__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__dipole(self_: Transflector, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, transflector__wedge__circle(self_, dipole__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__flat_point(self_: Transflector, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, transflector__wedge__circle(self_, flat_point__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__flector(self_: Transflector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__line(self_: Transflector, other: Line) -> FlatPoint {
    return line__anti_wedge__plane(other, transflector__wedge__dipole(self_, line__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__motor(self_: Transflector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__plane(self_: Transflector, other: Plane) -> Flector {
    return plane__anti_wedge__motor(other, transflector__wedge__round_point(self_, plane__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return sphere__anti_wedge__motor(other, transflector__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__translator(self_: Transflector, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn translator__project_orthogonally_onto__circle(self_: Translator, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, translator__wedge__dipole(self_, circle__anti_dual(other)));
}

fn translator__project_orthogonally_onto__flector(self_: Translator, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, flector__anti_dual(other)));
}

fn translator__project_orthogonally_onto__line(self_: Translator, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, translator__wedge__dipole(self_, line__anti_dual(other)));
}

fn translator__project_orthogonally_onto__motor(self_: Translator, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, motor__anti_dual(other)));
}

fn translator__project_orthogonally_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, multi_vector__anti_dual(other)));
}

fn translator__project_orthogonally_onto__plane(self_: Translator, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, translator__wedge__round_point(self_, plane__anti_dual(other)));
}

fn translator__project_orthogonally_onto__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, rotor__anti_dual(other)));
}

fn translator__project_orthogonally_onto__sphere(self_: Translator, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, translator__wedge__round_point(self_, sphere__anti_dual(other)));
}

fn translator__project_orthogonally_onto__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, transflector__anti_dual(other)));
}

fn translator__project_orthogonally_onto__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, translator__anti_dual(other)));
}

fn circle__project_via_origin_onto__circle(self_: Circle, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, circle__wedge__dipole(self_, circle__dual(other)));
}

fn circle__project_via_origin_onto__flector(self_: Circle, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, flector__dual(other)));
}

fn circle__project_via_origin_onto__line(self_: Circle, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, circle__wedge__dipole(self_, line__dual(other)));
}

fn circle__project_via_origin_onto__motor(self_: Circle, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, motor__dual(other)));
}

fn circle__project_via_origin_onto__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn circle__project_via_origin_onto__plane(self_: Circle, other: Plane) -> Circle {
    return plane__anti_wedge__sphere(other, circle__wedge__round_point(self_, plane__dual(other)));
}

fn circle__project_via_origin_onto__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, rotor__dual(other)));
}

fn circle__project_via_origin_onto__sphere(self_: Circle, other: Sphere) -> Circle {
    return sphere__anti_wedge__sphere(other, circle__wedge__round_point(self_, sphere__dual(other)));
}

fn circle__project_via_origin_onto__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, transflector__dual(other)));
}

fn circle__project_via_origin_onto__translator(self_: Circle, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, circle__wedge__multi_vector(self_, translator__dual(other)));
}

fn dipole__project_via_origin_onto__circle(self_: Dipole, other: Circle) -> Dipole {
    return circle__anti_wedge__sphere(other, dipole__wedge__dipole(self_, circle__dual(other)));
}

fn dipole__project_via_origin_onto__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, dipole__wedge__circle(self_, dipole__dual(other)));
}

fn dipole__project_via_origin_onto__flat_point(self_: Dipole, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, dipole__wedge__circle(self_, flat_point__dual(other)));
}

fn dipole__project_via_origin_onto__flector(self_: Dipole, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, flector__dual(other)));
}

fn dipole__project_via_origin_onto__line(self_: Dipole, other: Line) -> Dipole {
    return line__anti_wedge__sphere(other, dipole__wedge__dipole(self_, line__dual(other)));
}

fn dipole__project_via_origin_onto__motor(self_: Dipole, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, motor__dual(other)));
}

fn dipole__project_via_origin_onto__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn dipole__project_via_origin_onto__plane(self_: Dipole, other: Plane) -> Dipole {
    return plane__anti_wedge__circle(other, dipole__wedge__round_point(self_, plane__dual(other)));
}

fn dipole__project_via_origin_onto__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, rotor__dual(other)));
}

fn dipole__project_via_origin_onto__sphere(self_: Dipole, other: Sphere) -> Dipole {
    return sphere__anti_wedge__circle(other, dipole__wedge__round_point(self_, sphere__dual(other)));
}

fn dipole__project_via_origin_onto__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, transflector__dual(other)));
}

fn dipole__project_via_origin_onto__translator(self_: Dipole, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, dipole__wedge__multi_vector(self_, translator__dual(other)));
}

fn flat_point__project_via_origin_onto__circle(self_: FlatPoint, other: Circle) -> Dipole {
    return circle__anti_wedge__plane(other, flat_point__wedge__dipole(self_, circle__dual(other)));
}

fn flat_point__project_via_origin_onto__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, flat_point__wedge__circle(self_, dipole__dual(other)));
}

fn flat_point__project_via_origin_onto__flat_point(self_: FlatPoint, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, flat_point__wedge__circle(self_, flat_point__dual(other)));
}

fn flat_point__project_via_origin_onto__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, flector__dual(other)));
}

fn flat_point__project_via_origin_onto__line(self_: FlatPoint, other: Line) -> FlatPoint {
    return line__anti_wedge__plane(other, flat_point__wedge__dipole(self_, line__dual(other)));
}

fn flat_point__project_via_origin_onto__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, motor__dual(other)));
}

fn flat_point__project_via_origin_onto__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn flat_point__project_via_origin_onto__plane(self_: FlatPoint, other: Plane) -> FlatPoint {
    return plane__anti_wedge__line(other, flat_point__wedge__round_point(self_, plane__dual(other)));
}

fn flat_point__project_via_origin_onto__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, rotor__dual(other)));
}

fn flat_point__project_via_origin_onto__sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return sphere__anti_wedge__line(other, flat_point__wedge__round_point(self_, sphere__dual(other)));
}

fn flat_point__project_via_origin_onto__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, transflector__dual(other)));
}

fn flat_point__project_via_origin_onto__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, flat_point__wedge__multi_vector(self_, translator__dual(other)));
}

fn flector__project_via_origin_onto__circle(self_: Flector, other: Circle) -> Dipole {
    return circle__anti_wedge__plane(other, flector__wedge__dipole(self_, circle__dual(other)));
}

fn flector__project_via_origin_onto__dipole(self_: Flector, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, flector__wedge__circle(self_, dipole__dual(other)));
}

fn flector__project_via_origin_onto__flat_point(self_: Flector, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, flector__wedge__circle(self_, flat_point__dual(other)));
}

fn flector__project_via_origin_onto__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, flector__dual(other)));
}

fn flector__project_via_origin_onto__line(self_: Flector, other: Line) -> FlatPoint {
    return line__anti_wedge__plane(other, flector__wedge__dipole(self_, line__dual(other)));
}

fn flector__project_via_origin_onto__motor(self_: Flector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, motor__dual(other)));
}

fn flector__project_via_origin_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn flector__project_via_origin_onto__plane(self_: Flector, other: Plane) -> Flector {
    return plane__anti_wedge__motor(other, flector__wedge__round_point(self_, plane__dual(other)));
}

fn flector__project_via_origin_onto__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, rotor__dual(other)));
}

fn flector__project_via_origin_onto__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return sphere__anti_wedge__motor(other, flector__wedge__round_point(self_, sphere__dual(other)));
}

fn flector__project_via_origin_onto__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, transflector__dual(other)));
}

fn flector__project_via_origin_onto__translator(self_: Flector, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, flector__wedge__multi_vector(self_, translator__dual(other)));
}

fn line__project_via_origin_onto__circle(self_: Line, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, line__wedge__dipole(self_, circle__dual(other)));
}

fn line__project_via_origin_onto__flector(self_: Line, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, flector__dual(other)));
}

fn line__project_via_origin_onto__line(self_: Line, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, line__wedge__dipole(self_, line__dual(other)));
}

fn line__project_via_origin_onto__motor(self_: Line, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, motor__dual(other)));
}

fn line__project_via_origin_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn line__project_via_origin_onto__plane(self_: Line, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, line__wedge__round_point(self_, plane__dual(other)));
}

fn line__project_via_origin_onto__rotor(self_: Line, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, rotor__dual(other)));
}

fn line__project_via_origin_onto__sphere(self_: Line, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, line__wedge__round_point(self_, sphere__dual(other)));
}

fn line__project_via_origin_onto__transflector(self_: Line, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, transflector__dual(other)));
}

fn line__project_via_origin_onto__translator(self_: Line, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, line__wedge__multi_vector(self_, translator__dual(other)));
}

fn motor__project_via_origin_onto__circle(self_: Motor, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, motor__wedge__dipole(self_, circle__dual(other)));
}

fn motor__project_via_origin_onto__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, flector__dual(other)));
}

fn motor__project_via_origin_onto__line(self_: Motor, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, motor__wedge__dipole(self_, line__dual(other)));
}

fn motor__project_via_origin_onto__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, motor__dual(other)));
}

fn motor__project_via_origin_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn motor__project_via_origin_onto__plane(self_: Motor, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, motor__wedge__round_point(self_, plane__dual(other)));
}

fn motor__project_via_origin_onto__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, rotor__dual(other)));
}

fn motor__project_via_origin_onto__sphere(self_: Motor, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, motor__wedge__round_point(self_, sphere__dual(other)));
}

fn motor__project_via_origin_onto__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, transflector__dual(other)));
}

fn motor__project_via_origin_onto__translator(self_: Motor, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, motor__wedge__multi_vector(self_, translator__dual(other)));
}

fn multi_vector__project_via_origin_onto__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return circle__anti_wedge__multi_vector(other, multi_vector__wedge__dipole(self_, circle__dual(other)));
}

fn multi_vector__project_via_origin_onto__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return dipole__anti_wedge__multi_vector(other, multi_vector__wedge__circle(self_, dipole__dual(other)));
}

fn multi_vector__project_via_origin_onto__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return flat_point__anti_wedge__multi_vector(other, multi_vector__wedge__circle(self_, flat_point__dual(other)));
}

fn multi_vector__project_via_origin_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, flector__dual(other)));
}

fn multi_vector__project_via_origin_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__anti_wedge__multi_vector(other, multi_vector__wedge__dipole(self_, line__dual(other)));
}

fn multi_vector__project_via_origin_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, motor__dual(other)));
}

fn multi_vector__project_via_origin_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn multi_vector__project_via_origin_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__anti_wedge__multi_vector(other, multi_vector__wedge__round_point(self_, plane__dual(other)));
}

fn multi_vector__project_via_origin_onto__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, rotor__dual(other)));
}

fn multi_vector__project_via_origin_onto__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return round_point__anti_wedge__multi_vector(other, multi_vector__wedge__sphere(self_, round_point__dual(other)));
}

fn multi_vector__project_via_origin_onto__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return sphere__anti_wedge__multi_vector(other, multi_vector__wedge__round_point(self_, sphere__dual(other)));
}

fn multi_vector__project_via_origin_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, transflector__dual(other)));
}

fn multi_vector__project_via_origin_onto__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector(self_, translator__dual(other)));
}

fn plane__project_via_origin_onto__flector(self_: Plane, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, flector__dual(other)));
}

fn plane__project_via_origin_onto__motor(self_: Plane, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, motor__dual(other)));
}

fn plane__project_via_origin_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn plane__project_via_origin_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, plane__wedge__round_point(self_, plane__dual(other)));
}

fn plane__project_via_origin_onto__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, rotor__dual(other)));
}

fn plane__project_via_origin_onto__sphere(self_: Plane, other: Sphere) -> Sphere {
    return sphere__anti_wedge__anti_scalar(other, plane__wedge__round_point(self_, sphere__dual(other)));
}

fn plane__project_via_origin_onto__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, transflector__dual(other)));
}

fn plane__project_via_origin_onto__translator(self_: Plane, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, plane__wedge__multi_vector(self_, translator__dual(other)));
}

fn rotor__project_via_origin_onto__circle(self_: Rotor, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, rotor__wedge__dipole(self_, circle__dual(other)));
}

fn rotor__project_via_origin_onto__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, flector__dual(other)));
}

fn rotor__project_via_origin_onto__line(self_: Rotor, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, rotor__wedge__dipole(self_, line__dual(other)));
}

fn rotor__project_via_origin_onto__motor(self_: Rotor, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, motor__dual(other)));
}

fn rotor__project_via_origin_onto__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn rotor__project_via_origin_onto__plane(self_: Rotor, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, rotor__wedge__round_point(self_, plane__dual(other)));
}

fn rotor__project_via_origin_onto__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, rotor__dual(other)));
}

fn rotor__project_via_origin_onto__sphere(self_: Rotor, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, rotor__wedge__round_point(self_, sphere__dual(other)));
}

fn rotor__project_via_origin_onto__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, transflector__dual(other)));
}

fn rotor__project_via_origin_onto__translator(self_: Rotor, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, rotor__wedge__multi_vector(self_, translator__dual(other)));
}

fn round_point__project_via_origin_onto__circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return circle__anti_wedge__circle(other, round_point__wedge__dipole(self_, circle__dual(other)));
}

fn round_point__project_via_origin_onto__dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return dipole__anti_wedge__sphere(other, round_point__wedge__circle(self_, dipole__dual(other)));
}

fn round_point__project_via_origin_onto__flat_point(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return flat_point__anti_wedge__sphere(other, round_point__wedge__circle(self_, flat_point__dual(other)));
}

fn round_point__project_via_origin_onto__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, flector__dual(other)));
}

fn round_point__project_via_origin_onto__line(self_: RoundPoint, other: Line) -> RoundPoint {
    return line__anti_wedge__circle(other, round_point__wedge__dipole(self_, line__dual(other)));
}

fn round_point__project_via_origin_onto__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, motor__dual(other)));
}

fn round_point__project_via_origin_onto__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn round_point__project_via_origin_onto__plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return plane__anti_wedge__dipole(other, round_point__wedge__round_point(self_, plane__dual(other)));
}

fn round_point__project_via_origin_onto__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, rotor__dual(other)));
}

fn round_point__project_via_origin_onto__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return round_point__anti_wedge__anti_scalar(other, round_point__wedge__sphere(self_, round_point__dual(other)));
}

fn round_point__project_via_origin_onto__sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return sphere__anti_wedge__dipole(other, round_point__wedge__round_point(self_, sphere__dual(other)));
}

fn round_point__project_via_origin_onto__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, transflector__dual(other)));
}

fn round_point__project_via_origin_onto__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, round_point__wedge__multi_vector(self_, translator__dual(other)));
}

fn sphere__project_via_origin_onto__flector(self_: Sphere, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, flector__dual(other)));
}

fn sphere__project_via_origin_onto__motor(self_: Sphere, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, motor__dual(other)));
}

fn sphere__project_via_origin_onto__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn sphere__project_via_origin_onto__plane(self_: Sphere, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, sphere__wedge__round_point(self_, plane__dual(other)));
}

fn sphere__project_via_origin_onto__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, rotor__dual(other)));
}

fn sphere__project_via_origin_onto__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return sphere__anti_wedge__anti_scalar(other, sphere__wedge__round_point(self_, sphere__dual(other)));
}

fn sphere__project_via_origin_onto__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, transflector__dual(other)));
}

fn sphere__project_via_origin_onto__translator(self_: Sphere, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, sphere__wedge__multi_vector(self_, translator__dual(other)));
}

fn transflector__project_via_origin_onto__circle(self_: Transflector, other: Circle) -> Dipole {
    return circle__anti_wedge__plane(other, transflector__wedge__dipole(self_, circle__dual(other)));
}

fn transflector__project_via_origin_onto__dipole(self_: Transflector, other: Dipole) -> Dipole {
    return dipole__anti_wedge__anti_scalar(other, transflector__wedge__circle(self_, dipole__dual(other)));
}

fn transflector__project_via_origin_onto__flat_point(self_: Transflector, other: FlatPoint) -> FlatPoint {
    return flat_point__anti_wedge__anti_scalar(other, transflector__wedge__circle(self_, flat_point__dual(other)));
}

fn transflector__project_via_origin_onto__flector(self_: Transflector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, flector__dual(other)));
}

fn transflector__project_via_origin_onto__line(self_: Transflector, other: Line) -> FlatPoint {
    return line__anti_wedge__plane(other, transflector__wedge__dipole(self_, line__dual(other)));
}

fn transflector__project_via_origin_onto__motor(self_: Transflector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, motor__dual(other)));
}

fn transflector__project_via_origin_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn transflector__project_via_origin_onto__plane(self_: Transflector, other: Plane) -> Flector {
    return plane__anti_wedge__motor(other, transflector__wedge__round_point(self_, plane__dual(other)));
}

fn transflector__project_via_origin_onto__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, rotor__dual(other)));
}

fn transflector__project_via_origin_onto__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return sphere__anti_wedge__motor(other, transflector__wedge__round_point(self_, sphere__dual(other)));
}

fn transflector__project_via_origin_onto__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, transflector__dual(other)));
}

fn transflector__project_via_origin_onto__translator(self_: Transflector, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, transflector__wedge__multi_vector(self_, translator__dual(other)));
}

fn translator__project_via_origin_onto__circle(self_: Translator, other: Circle) -> Circle {
    return circle__anti_wedge__anti_scalar(other, translator__wedge__dipole(self_, circle__dual(other)));
}

fn translator__project_via_origin_onto__flector(self_: Translator, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, flector__dual(other)));
}

fn translator__project_via_origin_onto__line(self_: Translator, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, translator__wedge__dipole(self_, line__dual(other)));
}

fn translator__project_via_origin_onto__motor(self_: Translator, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, motor__dual(other)));
}

fn translator__project_via_origin_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, multi_vector__dual(other)));
}

fn translator__project_via_origin_onto__plane(self_: Translator, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, translator__wedge__round_point(self_, plane__dual(other)));
}

fn translator__project_via_origin_onto__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, rotor__dual(other)));
}

fn translator__project_via_origin_onto__sphere(self_: Translator, other: Sphere) -> Circle {
    return sphere__anti_wedge__plane(other, translator__wedge__round_point(self_, sphere__dual(other)));
}

fn translator__project_via_origin_onto__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, transflector__dual(other)));
}

fn translator__project_via_origin_onto__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector(other, translator__wedge__multi_vector(self_, translator__dual(other)));
}

fn circle__anti_reject_orthogonally_from__dipole(self_: Circle, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(circle__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn circle__anti_reject_orthogonally_from__flat_point(self_: Circle, other: FlatPoint) -> Circle {
    return anti_scalar__anti_wedge__circle(circle__wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn circle__anti_reject_orthogonally_from__flector(self_: Circle, other: Flector) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(circle__wedge__flector(self_, other), flector__anti_dual(other));
}

fn circle__anti_reject_orthogonally_from__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(circle__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn circle__anti_reject_orthogonally_from__round_point(self_: Circle, other: RoundPoint) -> Circle {
    return sphere__anti_wedge__sphere(circle__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn circle__anti_reject_orthogonally_from__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(circle__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__circle(self_: Dipole, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(dipole__wedge__circle(self_, other), circle__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return sphere__anti_wedge__circle(dipole__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__flat_point(self_: Dipole, other: FlatPoint) -> Dipole {
    return plane__anti_wedge__circle(dipole__wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__flector(self_: Dipole, other: Flector) -> MultiVector {
    return plane__anti_wedge__multi_vector(dipole__wedge__flector(self_, other), flector__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__line(self_: Dipole, other: Line) -> Dipole {
    return anti_scalar__anti_wedge__dipole(dipole__wedge__line(self_, other), line__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__motor(self_: Dipole, other: Motor) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(dipole__wedge__motor(self_, other), motor__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(dipole__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(dipole__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__round_point(self_: Dipole, other: RoundPoint) -> Dipole {
    return circle__anti_wedge__sphere(dipole__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return plane__anti_wedge__multi_vector(dipole__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn dipole__anti_reject_orthogonally_from__translator(self_: Dipole, other: Translator) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(dipole__wedge__translator(self_, other), translator__anti_dual(other));
}

fn flat_point__anti_reject_orthogonally_from__circle(self_: FlatPoint, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(flat_point__wedge__circle(self_, other), circle__anti_dual(other));
}

fn flat_point__anti_reject_orthogonally_from__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return plane__anti_wedge__circle(flat_point__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn flat_point__anti_reject_orthogonally_from__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(flat_point__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flat_point__anti_reject_orthogonally_from__round_point(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return line__anti_wedge__sphere(flat_point__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__circle(self_: Flector, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(flector__wedge__circle(self_, other), circle__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__dipole(self_: Flector, other: Dipole) -> Dipole {
    return plane__anti_wedge__circle(flector__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(flector__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return motor__anti_wedge__sphere(flector__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__dipole(self_: Line, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(line__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(line__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__round_point(self_: Line, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(line__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__dipole(self_: Motor, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(motor__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(motor__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__round_point(self_: Motor, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(motor__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__anti_wedge__dipole(multi_vector__wedge__circle(self_, other), circle__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__anti_wedge__circle(multi_vector__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__anti_wedge__circle(multi_vector__wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__anti_wedge__dipole(multi_vector__wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__anti_wedge__round_point(multi_vector__wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__anti_wedge__sphere(multi_vector__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__anti_wedge__round_point(multi_vector__wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__translator(self_, other), translator__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(plane__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__round_point(self_: Plane, other: RoundPoint) -> Sphere {
    return anti_scalar__anti_wedge__sphere(plane__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__dipole(self_: Rotor, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(rotor__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(rotor__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__round_point(self_: Rotor, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(rotor__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return sphere__anti_wedge__dipole(round_point__wedge__circle(self_, other), circle__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return circle__anti_wedge__circle(round_point__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__flat_point(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return line__anti_wedge__circle(round_point__wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return motor__anti_wedge__multi_vector(round_point__wedge__flector(self_, other), flector__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__line(self_: RoundPoint, other: Line) -> RoundPoint {
    return plane__anti_wedge__dipole(round_point__wedge__line(self_, other), line__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return plane__anti_wedge__multi_vector(round_point__wedge__motor(self_, other), motor__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(round_point__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return anti_scalar__anti_wedge__round_point(round_point__wedge__plane(self_, other), plane__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return plane__anti_wedge__multi_vector(round_point__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return dipole__anti_wedge__sphere(round_point__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return anti_scalar__anti_wedge__round_point(round_point__wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return motor__anti_wedge__multi_vector(round_point__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn round_point__anti_reject_orthogonally_from__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return plane__anti_wedge__multi_vector(round_point__wedge__translator(self_, other), translator__anti_dual(other));
}

fn sphere__anti_reject_orthogonally_from__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(sphere__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn sphere__anti_reject_orthogonally_from__round_point(self_: Sphere, other: RoundPoint) -> Sphere {
    return anti_scalar__anti_wedge__sphere(sphere__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__circle(self_: Transflector, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(transflector__wedge__circle(self_, other), circle__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__dipole(self_: Transflector, other: Dipole) -> Dipole {
    return plane__anti_wedge__circle(transflector__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(transflector__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return motor__anti_wedge__sphere(transflector__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__dipole(self_: Translator, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(translator__wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(translator__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__round_point(self_: Translator, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(translator__wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn circle__anti_reject_via_horizon_from__dipole(self_: Circle, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(circle__wedge__dipole(self_, other), dipole__dual(other));
}

fn circle__anti_reject_via_horizon_from__flat_point(self_: Circle, other: FlatPoint) -> Circle {
    return anti_scalar__anti_wedge__circle(circle__wedge__flat_point(self_, other), flat_point__dual(other));
}

fn circle__anti_reject_via_horizon_from__flector(self_: Circle, other: Flector) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(circle__wedge__flector(self_, other), flector__dual(other));
}

fn circle__anti_reject_via_horizon_from__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(circle__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn circle__anti_reject_via_horizon_from__round_point(self_: Circle, other: RoundPoint) -> Circle {
    return sphere__anti_wedge__sphere(circle__wedge__round_point(self_, other), round_point__dual(other));
}

fn circle__anti_reject_via_horizon_from__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(circle__wedge__transflector(self_, other), transflector__dual(other));
}

fn dipole__anti_reject_via_horizon_from__circle(self_: Dipole, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(dipole__wedge__circle(self_, other), circle__dual(other));
}

fn dipole__anti_reject_via_horizon_from__dipole(self_: Dipole, other: Dipole) -> Dipole {
    return sphere__anti_wedge__circle(dipole__wedge__dipole(self_, other), dipole__dual(other));
}

fn dipole__anti_reject_via_horizon_from__flat_point(self_: Dipole, other: FlatPoint) -> Dipole {
    return plane__anti_wedge__circle(dipole__wedge__flat_point(self_, other), flat_point__dual(other));
}

fn dipole__anti_reject_via_horizon_from__flector(self_: Dipole, other: Flector) -> MultiVector {
    return plane__anti_wedge__multi_vector(dipole__wedge__flector(self_, other), flector__dual(other));
}

fn dipole__anti_reject_via_horizon_from__line(self_: Dipole, other: Line) -> Dipole {
    return anti_scalar__anti_wedge__dipole(dipole__wedge__line(self_, other), line__dual(other));
}

fn dipole__anti_reject_via_horizon_from__motor(self_: Dipole, other: Motor) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(dipole__wedge__motor(self_, other), motor__dual(other));
}

fn dipole__anti_reject_via_horizon_from__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(dipole__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn dipole__anti_reject_via_horizon_from__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(dipole__wedge__rotor(self_, other), rotor__dual(other));
}

fn dipole__anti_reject_via_horizon_from__round_point(self_: Dipole, other: RoundPoint) -> Dipole {
    return circle__anti_wedge__sphere(dipole__wedge__round_point(self_, other), round_point__dual(other));
}

fn dipole__anti_reject_via_horizon_from__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return plane__anti_wedge__multi_vector(dipole__wedge__transflector(self_, other), transflector__dual(other));
}

fn dipole__anti_reject_via_horizon_from__translator(self_: Dipole, other: Translator) -> MultiVector {
    return anti_scalar__anti_wedge__multi_vector(dipole__wedge__translator(self_, other), translator__dual(other));
}

fn flat_point__anti_reject_via_horizon_from__circle(self_: FlatPoint, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(flat_point__wedge__circle(self_, other), circle__dual(other));
}

fn flat_point__anti_reject_via_horizon_from__dipole(self_: FlatPoint, other: Dipole) -> Dipole {
    return plane__anti_wedge__circle(flat_point__wedge__dipole(self_, other), dipole__dual(other));
}

fn flat_point__anti_reject_via_horizon_from__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(flat_point__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flat_point__anti_reject_via_horizon_from__round_point(self_: FlatPoint, other: RoundPoint) -> Dipole {
    return line__anti_wedge__sphere(flat_point__wedge__round_point(self_, other), round_point__dual(other));
}

fn flector__anti_reject_via_horizon_from__circle(self_: Flector, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(flector__wedge__circle(self_, other), circle__dual(other));
}

fn flector__anti_reject_via_horizon_from__dipole(self_: Flector, other: Dipole) -> Dipole {
    return plane__anti_wedge__circle(flector__wedge__dipole(self_, other), dipole__dual(other));
}

fn flector__anti_reject_via_horizon_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(flector__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flector__anti_reject_via_horizon_from__round_point(self_: Flector, other: RoundPoint) -> MultiVector {
    return motor__anti_wedge__sphere(flector__wedge__round_point(self_, other), round_point__dual(other));
}

fn line__anti_reject_via_horizon_from__dipole(self_: Line, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(line__wedge__dipole(self_, other), dipole__dual(other));
}

fn line__anti_reject_via_horizon_from__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(line__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line__anti_reject_via_horizon_from__round_point(self_: Line, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(line__wedge__round_point(self_, other), round_point__dual(other));
}

fn motor__anti_reject_via_horizon_from__dipole(self_: Motor, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(motor__wedge__dipole(self_, other), dipole__dual(other));
}

fn motor__anti_reject_via_horizon_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(motor__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn motor__anti_reject_via_horizon_from__round_point(self_: Motor, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(motor__wedge__round_point(self_, other), round_point__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__anti_wedge__dipole(multi_vector__wedge__circle(self_, other), circle__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__anti_wedge__circle(multi_vector__wedge__dipole(self_, other), dipole__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__anti_wedge__circle(multi_vector__wedge__flat_point(self_, other), flat_point__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__anti_wedge__dipole(multi_vector__wedge__line(self_, other), line__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__anti_wedge__round_point(multi_vector__wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__rotor(self_, other), rotor__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__anti_wedge__sphere(multi_vector__wedge__round_point(self_, other), round_point__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__anti_wedge__round_point(multi_vector__wedge__sphere(self_, other), sphere__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(multi_vector__wedge__translator(self_, other), translator__dual(other));
}

fn plane__anti_reject_via_horizon_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(plane__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn plane__anti_reject_via_horizon_from__round_point(self_: Plane, other: RoundPoint) -> Sphere {
    return anti_scalar__anti_wedge__sphere(plane__wedge__round_point(self_, other), round_point__dual(other));
}

fn rotor__anti_reject_via_horizon_from__dipole(self_: Rotor, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(rotor__wedge__dipole(self_, other), dipole__dual(other));
}

fn rotor__anti_reject_via_horizon_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(rotor__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn rotor__anti_reject_via_horizon_from__round_point(self_: Rotor, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(rotor__wedge__round_point(self_, other), round_point__dual(other));
}

fn round_point__anti_reject_via_horizon_from__circle(self_: RoundPoint, other: Circle) -> RoundPoint {
    return sphere__anti_wedge__dipole(round_point__wedge__circle(self_, other), circle__dual(other));
}

fn round_point__anti_reject_via_horizon_from__dipole(self_: RoundPoint, other: Dipole) -> RoundPoint {
    return circle__anti_wedge__circle(round_point__wedge__dipole(self_, other), dipole__dual(other));
}

fn round_point__anti_reject_via_horizon_from__flat_point(self_: RoundPoint, other: FlatPoint) -> RoundPoint {
    return line__anti_wedge__circle(round_point__wedge__flat_point(self_, other), flat_point__dual(other));
}

fn round_point__anti_reject_via_horizon_from__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return motor__anti_wedge__multi_vector(round_point__wedge__flector(self_, other), flector__dual(other));
}

fn round_point__anti_reject_via_horizon_from__line(self_: RoundPoint, other: Line) -> RoundPoint {
    return plane__anti_wedge__dipole(round_point__wedge__line(self_, other), line__dual(other));
}

fn round_point__anti_reject_via_horizon_from__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return plane__anti_wedge__multi_vector(round_point__wedge__motor(self_, other), motor__dual(other));
}

fn round_point__anti_reject_via_horizon_from__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(round_point__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn round_point__anti_reject_via_horizon_from__plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return anti_scalar__anti_wedge__round_point(round_point__wedge__plane(self_, other), plane__dual(other));
}

fn round_point__anti_reject_via_horizon_from__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return plane__anti_wedge__multi_vector(round_point__wedge__rotor(self_, other), rotor__dual(other));
}

fn round_point__anti_reject_via_horizon_from__round_point(self_: RoundPoint, other: RoundPoint) -> RoundPoint {
    return dipole__anti_wedge__sphere(round_point__wedge__round_point(self_, other), round_point__dual(other));
}

fn round_point__anti_reject_via_horizon_from__sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return anti_scalar__anti_wedge__round_point(round_point__wedge__sphere(self_, other), sphere__dual(other));
}

fn round_point__anti_reject_via_horizon_from__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return motor__anti_wedge__multi_vector(round_point__wedge__transflector(self_, other), transflector__dual(other));
}

fn round_point__anti_reject_via_horizon_from__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return plane__anti_wedge__multi_vector(round_point__wedge__translator(self_, other), translator__dual(other));
}

fn sphere__anti_reject_via_horizon_from__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(sphere__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn sphere__anti_reject_via_horizon_from__round_point(self_: Sphere, other: RoundPoint) -> Sphere {
    return anti_scalar__anti_wedge__sphere(sphere__wedge__round_point(self_, other), round_point__dual(other));
}

fn transflector__anti_reject_via_horizon_from__circle(self_: Transflector, other: Circle) -> Dipole {
    return anti_scalar__anti_wedge__dipole(transflector__wedge__circle(self_, other), circle__dual(other));
}

fn transflector__anti_reject_via_horizon_from__dipole(self_: Transflector, other: Dipole) -> Dipole {
    return plane__anti_wedge__circle(transflector__wedge__dipole(self_, other), dipole__dual(other));
}

fn transflector__anti_reject_via_horizon_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(transflector__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn transflector__anti_reject_via_horizon_from__round_point(self_: Transflector, other: RoundPoint) -> MultiVector {
    return motor__anti_wedge__sphere(transflector__wedge__round_point(self_, other), round_point__dual(other));
}

fn translator__anti_reject_via_horizon_from__dipole(self_: Translator, other: Dipole) -> Circle {
    return anti_scalar__anti_wedge__circle(translator__wedge__dipole(self_, other), dipole__dual(other));
}

fn translator__anti_reject_via_horizon_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(translator__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn translator__anti_reject_via_horizon_from__round_point(self_: Translator, other: RoundPoint) -> Circle {
    return plane__anti_wedge__sphere(translator__wedge__round_point(self_, other), round_point__dual(other));
}

fn circle__reject_orthogonally_from__circle(self_: Circle, other: Circle) -> Circle {
    return round_point__wedge__dipole(circle__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn circle__reject_orthogonally_from__dipole(self_: Circle, other: Dipole) -> Circle {
    return scalar__wedge__circle(circle__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn circle__reject_orthogonally_from__flat_point(self_: Circle, other: FlatPoint) -> Circle {
    return scalar__wedge__circle(circle__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn circle__reject_orthogonally_from__flector(self_: Circle, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn circle__reject_orthogonally_from__line(self_: Circle, other: Line) -> Circle {
    return round_point__wedge__dipole(circle__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn circle__reject_orthogonally_from__motor(self_: Circle, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn circle__reject_orthogonally_from__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn circle__reject_orthogonally_from__plane(self_: Circle, other: Plane) -> Circle {
    return dipole__wedge__round_point(circle__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn circle__reject_orthogonally_from__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn circle__reject_orthogonally_from__sphere(self_: Circle, other: Sphere) -> Circle {
    return dipole__wedge__round_point(circle__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn circle__reject_orthogonally_from__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn circle__reject_orthogonally_from__translator(self_: Circle, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn dipole__reject_orthogonally_from__circle(self_: Dipole, other: Circle) -> Dipole {
    return scalar__wedge__dipole(dipole__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn dipole__reject_orthogonally_from__flector(self_: Dipole, other: Flector) -> MultiVector {
    return round_point__wedge__multi_vector(dipole__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn dipole__reject_orthogonally_from__line(self_: Dipole, other: Line) -> Dipole {
    return scalar__wedge__dipole(dipole__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn dipole__reject_orthogonally_from__motor(self_: Dipole, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn dipole__reject_orthogonally_from__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn dipole__reject_orthogonally_from__plane(self_: Dipole, other: Plane) -> Dipole {
    return round_point__wedge__round_point(dipole__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn dipole__reject_orthogonally_from__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn dipole__reject_orthogonally_from__sphere(self_: Dipole, other: Sphere) -> Dipole {
    return round_point__wedge__round_point(dipole__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn dipole__reject_orthogonally_from__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return round_point__wedge__multi_vector(dipole__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn dipole__reject_orthogonally_from__translator(self_: Dipole, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__circle(self_: FlatPoint, other: Circle) -> Dipole {
    return scalar__wedge__dipole(flat_point__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return round_point__wedge__multi_vector(flat_point__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flat_point__wedge__multi_vector(flat_point__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flat_point__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__plane(self_: FlatPoint, other: Plane) -> Dipole {
    return round_point__wedge__round_point(flat_point__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return flat_point__wedge__multi_vector(flat_point__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return round_point__wedge__round_point(flat_point__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return round_point__wedge__multi_vector(flat_point__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn flat_point__reject_orthogonally_from__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return flat_point__wedge__multi_vector(flat_point__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn flector__reject_orthogonally_from__circle(self_: Flector, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(flector__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn flector__reject_orthogonally_from__dipole(self_: Flector, other: Dipole) -> Sphere {
    return round_point__wedge__circle(flector__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn flector__reject_orthogonally_from__flat_point(self_: Flector, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(flector__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn flector__reject_orthogonally_from__flector(self_: Flector, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flector__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn flector__reject_orthogonally_from__line(self_: Flector, other: Line) -> Plane {
    return flat_point__wedge__dipole(flector__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn flector__reject_orthogonally_from__motor(self_: Flector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector(flector__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn flector__reject_orthogonally_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flector__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flector__reject_orthogonally_from__plane(self_: Flector, other: Plane) -> MultiVector {
    return multi_vector__wedge__round_point(flector__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn flector__reject_orthogonally_from__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector(flector__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn flector__reject_orthogonally_from__round_point(self_: Flector, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(flector__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn flector__reject_orthogonally_from__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(flector__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn flector__reject_orthogonally_from__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flector__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn flector__reject_orthogonally_from__translator(self_: Flector, other: Translator) -> MultiVector {
    return flector__wedge__multi_vector(flector__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn line__reject_orthogonally_from__circle(self_: Line, other: Circle) -> Circle {
    return round_point__wedge__dipole(line__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn line__reject_orthogonally_from__dipole(self_: Line, other: Dipole) -> Circle {
    return scalar__wedge__circle(line__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn line__reject_orthogonally_from__flector(self_: Line, other: Flector) -> MultiVector {
    return flat_point__wedge__multi_vector(line__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn line__reject_orthogonally_from__line(self_: Line, other: Line) -> Circle {
    return round_point__wedge__dipole(line__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn line__reject_orthogonally_from__motor(self_: Line, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn line__reject_orthogonally_from__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line__reject_orthogonally_from__plane(self_: Line, other: Plane) -> Line {
    return flat_point__wedge__round_point(line__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn line__reject_orthogonally_from__rotor(self_: Line, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn line__reject_orthogonally_from__sphere(self_: Line, other: Sphere) -> Circle {
    return dipole__wedge__round_point(line__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn line__reject_orthogonally_from__transflector(self_: Line, other: Transflector) -> MultiVector {
    return flat_point__wedge__multi_vector(line__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn line__reject_orthogonally_from__translator(self_: Line, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn motor__reject_orthogonally_from__circle(self_: Motor, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(motor__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn motor__reject_orthogonally_from__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(motor__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn motor__reject_orthogonally_from__flat_point(self_: Motor, other: FlatPoint) -> AntiScalar {
    return flat_point__wedge__circle(motor__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn motor__reject_orthogonally_from__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(motor__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn motor__reject_orthogonally_from__line(self_: Motor, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(motor__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn motor__reject_orthogonally_from__motor(self_: Motor, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn motor__reject_orthogonally_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn motor__reject_orthogonally_from__plane(self_: Motor, other: Plane) -> Motor {
    return flector__wedge__round_point(motor__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn motor__reject_orthogonally_from__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn motor__reject_orthogonally_from__round_point(self_: Motor, other: RoundPoint) -> AntiScalar {
    return round_point__wedge__sphere(motor__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn motor__reject_orthogonally_from__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(motor__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn motor__reject_orthogonally_from__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return flector__wedge__multi_vector(motor__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn motor__reject_orthogonally_from__translator(self_: Motor, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(multi_vector__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(multi_vector__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__wedge__circle(multi_vector__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(multi_vector__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__wedge__round_point(multi_vector__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__wedge__sphere(multi_vector__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(multi_vector__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn plane__reject_orthogonally_from__circle(self_: Plane, other: Circle) -> Sphere {
    return dipole__wedge__dipole(plane__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn plane__reject_orthogonally_from__dipole(self_: Plane, other: Dipole) -> Sphere {
    return round_point__wedge__circle(plane__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn plane__reject_orthogonally_from__flat_point(self_: Plane, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(plane__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn plane__reject_orthogonally_from__flector(self_: Plane, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(plane__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn plane__reject_orthogonally_from__line(self_: Plane, other: Line) -> Plane {
    return flat_point__wedge__dipole(plane__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn plane__reject_orthogonally_from__motor(self_: Plane, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector(plane__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn plane__reject_orthogonally_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(plane__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn plane__reject_orthogonally_from__plane(self_: Plane, other: Plane) -> Plane {
    return line__wedge__round_point(plane__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn plane__reject_orthogonally_from__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector(plane__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn plane__reject_orthogonally_from__round_point(self_: Plane, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(plane__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn plane__reject_orthogonally_from__sphere(self_: Plane, other: Sphere) -> Sphere {
    return circle__wedge__round_point(plane__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn plane__reject_orthogonally_from__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(plane__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn plane__reject_orthogonally_from__translator(self_: Plane, other: Translator) -> MultiVector {
    return transflector__wedge__multi_vector(plane__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn rotor__reject_orthogonally_from__circle(self_: Rotor, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(rotor__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn rotor__reject_orthogonally_from__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(rotor__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn rotor__reject_orthogonally_from__flat_point(self_: Rotor, other: FlatPoint) -> AntiScalar {
    return flat_point__wedge__circle(rotor__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn rotor__reject_orthogonally_from__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(rotor__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn rotor__reject_orthogonally_from__line(self_: Rotor, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(rotor__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn rotor__reject_orthogonally_from__motor(self_: Rotor, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(rotor__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn rotor__reject_orthogonally_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(rotor__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn rotor__reject_orthogonally_from__plane(self_: Rotor, other: Plane) -> Motor {
    return flector__wedge__round_point(rotor__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn rotor__reject_orthogonally_from__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(rotor__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn rotor__reject_orthogonally_from__round_point(self_: Rotor, other: RoundPoint) -> AntiScalar {
    return round_point__wedge__sphere(rotor__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn rotor__reject_orthogonally_from__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(rotor__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn rotor__reject_orthogonally_from__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return flector__wedge__multi_vector(rotor__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn rotor__reject_orthogonally_from__translator(self_: Rotor, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(rotor__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn round_point__reject_orthogonally_from__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return scalar__wedge__multi_vector(round_point__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn round_point__reject_orthogonally_from__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return round_point__wedge__multi_vector(round_point__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn round_point__reject_orthogonally_from__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(round_point__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn round_point__reject_orthogonally_from__plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return scalar__wedge__round_point(round_point__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn round_point__reject_orthogonally_from__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return round_point__wedge__multi_vector(round_point__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn round_point__reject_orthogonally_from__sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return scalar__wedge__round_point(round_point__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn round_point__reject_orthogonally_from__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return scalar__wedge__multi_vector(round_point__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn round_point__reject_orthogonally_from__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return round_point__wedge__multi_vector(round_point__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn sphere__reject_orthogonally_from__circle(self_: Sphere, other: Circle) -> Sphere {
    return dipole__wedge__dipole(sphere__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn sphere__reject_orthogonally_from__dipole(self_: Sphere, other: Dipole) -> Sphere {
    return round_point__wedge__circle(sphere__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn sphere__reject_orthogonally_from__flat_point(self_: Sphere, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(sphere__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn sphere__reject_orthogonally_from__flector(self_: Sphere, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn sphere__reject_orthogonally_from__line(self_: Sphere, other: Line) -> Sphere {
    return dipole__wedge__dipole(sphere__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn sphere__reject_orthogonally_from__motor(self_: Sphere, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn sphere__reject_orthogonally_from__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn sphere__reject_orthogonally_from__plane(self_: Sphere, other: Plane) -> Sphere {
    return circle__wedge__round_point(sphere__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn sphere__reject_orthogonally_from__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn sphere__reject_orthogonally_from__round_point(self_: Sphere, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(sphere__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn sphere__reject_orthogonally_from__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return circle__wedge__round_point(sphere__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn sphere__reject_orthogonally_from__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn sphere__reject_orthogonally_from__translator(self_: Sphere, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn transflector__reject_orthogonally_from__circle(self_: Transflector, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(transflector__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn transflector__reject_orthogonally_from__dipole(self_: Transflector, other: Dipole) -> Sphere {
    return round_point__wedge__circle(transflector__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn transflector__reject_orthogonally_from__flat_point(self_: Transflector, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(transflector__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn transflector__reject_orthogonally_from__flector(self_: Transflector, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(transflector__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn transflector__reject_orthogonally_from__line(self_: Transflector, other: Line) -> Plane {
    return flat_point__wedge__dipole(transflector__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn transflector__reject_orthogonally_from__motor(self_: Transflector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector(transflector__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn transflector__reject_orthogonally_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(transflector__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn transflector__reject_orthogonally_from__plane(self_: Transflector, other: Plane) -> MultiVector {
    return multi_vector__wedge__round_point(transflector__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn transflector__reject_orthogonally_from__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector(transflector__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn transflector__reject_orthogonally_from__round_point(self_: Transflector, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(transflector__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn transflector__reject_orthogonally_from__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(transflector__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn transflector__reject_orthogonally_from__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(transflector__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn transflector__reject_orthogonally_from__translator(self_: Transflector, other: Translator) -> MultiVector {
    return transflector__wedge__multi_vector(transflector__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn translator__reject_orthogonally_from__circle(self_: Translator, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(translator__anti_wedge__circle(self_, other), circle__anti_dual(other));
}

fn translator__reject_orthogonally_from__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(translator__anti_wedge__dipole(self_, other), dipole__anti_dual(other));
}

fn translator__reject_orthogonally_from__flat_point(self_: Translator, other: FlatPoint) -> AntiScalar {
    return flat_point__wedge__circle(translator__anti_wedge__flat_point(self_, other), flat_point__anti_dual(other));
}

fn translator__reject_orthogonally_from__flector(self_: Translator, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(translator__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn translator__reject_orthogonally_from__line(self_: Translator, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(translator__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn translator__reject_orthogonally_from__motor(self_: Translator, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(translator__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn translator__reject_orthogonally_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(translator__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn translator__reject_orthogonally_from__plane(self_: Translator, other: Plane) -> Motor {
    return transflector__wedge__round_point(translator__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn translator__reject_orthogonally_from__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(translator__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn translator__reject_orthogonally_from__round_point(self_: Translator, other: RoundPoint) -> AntiScalar {
    return round_point__wedge__sphere(translator__anti_wedge__round_point(self_, other), round_point__anti_dual(other));
}

fn translator__reject_orthogonally_from__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(translator__anti_wedge__sphere(self_, other), sphere__anti_dual(other));
}

fn translator__reject_orthogonally_from__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(translator__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn translator__reject_orthogonally_from__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(translator__anti_wedge__translator(self_, other), translator__anti_dual(other));
}

fn circle__reject_via_origin_from__circle(self_: Circle, other: Circle) -> Circle {
    return round_point__wedge__dipole(circle__anti_wedge__circle(self_, other), circle__dual(other));
}

fn circle__reject_via_origin_from__dipole(self_: Circle, other: Dipole) -> Circle {
    return scalar__wedge__circle(circle__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn circle__reject_via_origin_from__flat_point(self_: Circle, other: FlatPoint) -> Circle {
    return scalar__wedge__circle(circle__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn circle__reject_via_origin_from__flector(self_: Circle, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__flector(self_, other), flector__dual(other));
}

fn circle__reject_via_origin_from__line(self_: Circle, other: Line) -> Circle {
    return round_point__wedge__dipole(circle__anti_wedge__line(self_, other), line__dual(other));
}

fn circle__reject_via_origin_from__motor(self_: Circle, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__motor(self_, other), motor__dual(other));
}

fn circle__reject_via_origin_from__multi_vector(self_: Circle, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn circle__reject_via_origin_from__plane(self_: Circle, other: Plane) -> Circle {
    return dipole__wedge__round_point(circle__anti_wedge__plane(self_, other), plane__dual(other));
}

fn circle__reject_via_origin_from__rotor(self_: Circle, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn circle__reject_via_origin_from__sphere(self_: Circle, other: Sphere) -> Circle {
    return dipole__wedge__round_point(circle__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn circle__reject_via_origin_from__transflector(self_: Circle, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn circle__reject_via_origin_from__translator(self_: Circle, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(circle__anti_wedge__translator(self_, other), translator__dual(other));
}

fn dipole__reject_via_origin_from__circle(self_: Dipole, other: Circle) -> Dipole {
    return scalar__wedge__dipole(dipole__anti_wedge__circle(self_, other), circle__dual(other));
}

fn dipole__reject_via_origin_from__flector(self_: Dipole, other: Flector) -> MultiVector {
    return round_point__wedge__multi_vector(dipole__anti_wedge__flector(self_, other), flector__dual(other));
}

fn dipole__reject_via_origin_from__line(self_: Dipole, other: Line) -> Dipole {
    return scalar__wedge__dipole(dipole__anti_wedge__line(self_, other), line__dual(other));
}

fn dipole__reject_via_origin_from__motor(self_: Dipole, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__motor(self_, other), motor__dual(other));
}

fn dipole__reject_via_origin_from__multi_vector(self_: Dipole, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn dipole__reject_via_origin_from__plane(self_: Dipole, other: Plane) -> Dipole {
    return round_point__wedge__round_point(dipole__anti_wedge__plane(self_, other), plane__dual(other));
}

fn dipole__reject_via_origin_from__rotor(self_: Dipole, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn dipole__reject_via_origin_from__sphere(self_: Dipole, other: Sphere) -> Dipole {
    return round_point__wedge__round_point(dipole__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn dipole__reject_via_origin_from__transflector(self_: Dipole, other: Transflector) -> MultiVector {
    return round_point__wedge__multi_vector(dipole__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn dipole__reject_via_origin_from__translator(self_: Dipole, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(dipole__anti_wedge__translator(self_, other), translator__dual(other));
}

fn flat_point__reject_via_origin_from__circle(self_: FlatPoint, other: Circle) -> Dipole {
    return scalar__wedge__dipole(flat_point__anti_wedge__circle(self_, other), circle__dual(other));
}

fn flat_point__reject_via_origin_from__flector(self_: FlatPoint, other: Flector) -> MultiVector {
    return round_point__wedge__multi_vector(flat_point__anti_wedge__flector(self_, other), flector__dual(other));
}

fn flat_point__reject_via_origin_from__motor(self_: FlatPoint, other: Motor) -> MultiVector {
    return flat_point__wedge__multi_vector(flat_point__anti_wedge__motor(self_, other), motor__dual(other));
}

fn flat_point__reject_via_origin_from__multi_vector(self_: FlatPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flat_point__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flat_point__reject_via_origin_from__plane(self_: FlatPoint, other: Plane) -> Dipole {
    return round_point__wedge__round_point(flat_point__anti_wedge__plane(self_, other), plane__dual(other));
}

fn flat_point__reject_via_origin_from__rotor(self_: FlatPoint, other: Rotor) -> MultiVector {
    return flat_point__wedge__multi_vector(flat_point__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn flat_point__reject_via_origin_from__sphere(self_: FlatPoint, other: Sphere) -> Dipole {
    return round_point__wedge__round_point(flat_point__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn flat_point__reject_via_origin_from__transflector(self_: FlatPoint, other: Transflector) -> MultiVector {
    return round_point__wedge__multi_vector(flat_point__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn flat_point__reject_via_origin_from__translator(self_: FlatPoint, other: Translator) -> MultiVector {
    return flat_point__wedge__multi_vector(flat_point__anti_wedge__translator(self_, other), translator__dual(other));
}

fn flector__reject_via_origin_from__circle(self_: Flector, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(flector__anti_wedge__circle(self_, other), circle__dual(other));
}

fn flector__reject_via_origin_from__dipole(self_: Flector, other: Dipole) -> Sphere {
    return round_point__wedge__circle(flector__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn flector__reject_via_origin_from__flat_point(self_: Flector, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(flector__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn flector__reject_via_origin_from__flector(self_: Flector, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flector__anti_wedge__flector(self_, other), flector__dual(other));
}

fn flector__reject_via_origin_from__line(self_: Flector, other: Line) -> Plane {
    return flat_point__wedge__dipole(flector__anti_wedge__line(self_, other), line__dual(other));
}

fn flector__reject_via_origin_from__motor(self_: Flector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector(flector__anti_wedge__motor(self_, other), motor__dual(other));
}

fn flector__reject_via_origin_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flector__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flector__reject_via_origin_from__plane(self_: Flector, other: Plane) -> MultiVector {
    return multi_vector__wedge__round_point(flector__anti_wedge__plane(self_, other), plane__dual(other));
}

fn flector__reject_via_origin_from__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector(flector__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn flector__reject_via_origin_from__round_point(self_: Flector, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(flector__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn flector__reject_via_origin_from__sphere(self_: Flector, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(flector__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn flector__reject_via_origin_from__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(flector__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn flector__reject_via_origin_from__translator(self_: Flector, other: Translator) -> MultiVector {
    return flector__wedge__multi_vector(flector__anti_wedge__translator(self_, other), translator__dual(other));
}

fn line__reject_via_origin_from__circle(self_: Line, other: Circle) -> Circle {
    return round_point__wedge__dipole(line__anti_wedge__circle(self_, other), circle__dual(other));
}

fn line__reject_via_origin_from__dipole(self_: Line, other: Dipole) -> Circle {
    return scalar__wedge__circle(line__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn line__reject_via_origin_from__flector(self_: Line, other: Flector) -> MultiVector {
    return flat_point__wedge__multi_vector(line__anti_wedge__flector(self_, other), flector__dual(other));
}

fn line__reject_via_origin_from__line(self_: Line, other: Line) -> Circle {
    return round_point__wedge__dipole(line__anti_wedge__line(self_, other), line__dual(other));
}

fn line__reject_via_origin_from__motor(self_: Line, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__motor(self_, other), motor__dual(other));
}

fn line__reject_via_origin_from__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line__reject_via_origin_from__plane(self_: Line, other: Plane) -> Line {
    return flat_point__wedge__round_point(line__anti_wedge__plane(self_, other), plane__dual(other));
}

fn line__reject_via_origin_from__rotor(self_: Line, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn line__reject_via_origin_from__sphere(self_: Line, other: Sphere) -> Circle {
    return dipole__wedge__round_point(line__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn line__reject_via_origin_from__transflector(self_: Line, other: Transflector) -> MultiVector {
    return flat_point__wedge__multi_vector(line__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn line__reject_via_origin_from__translator(self_: Line, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(line__anti_wedge__translator(self_, other), translator__dual(other));
}

fn motor__reject_via_origin_from__circle(self_: Motor, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(motor__anti_wedge__circle(self_, other), circle__dual(other));
}

fn motor__reject_via_origin_from__dipole(self_: Motor, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(motor__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn motor__reject_via_origin_from__flat_point(self_: Motor, other: FlatPoint) -> AntiScalar {
    return flat_point__wedge__circle(motor__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn motor__reject_via_origin_from__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(motor__anti_wedge__flector(self_, other), flector__dual(other));
}

fn motor__reject_via_origin_from__line(self_: Motor, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(motor__anti_wedge__line(self_, other), line__dual(other));
}

fn motor__reject_via_origin_from__motor(self_: Motor, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__motor(self_, other), motor__dual(other));
}

fn motor__reject_via_origin_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn motor__reject_via_origin_from__plane(self_: Motor, other: Plane) -> Motor {
    return flector__wedge__round_point(motor__anti_wedge__plane(self_, other), plane__dual(other));
}

fn motor__reject_via_origin_from__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn motor__reject_via_origin_from__round_point(self_: Motor, other: RoundPoint) -> AntiScalar {
    return round_point__wedge__sphere(motor__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn motor__reject_via_origin_from__sphere(self_: Motor, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(motor__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn motor__reject_via_origin_from__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return flector__wedge__multi_vector(motor__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn motor__reject_via_origin_from__translator(self_: Motor, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(motor__anti_wedge__translator(self_, other), translator__dual(other));
}

fn multi_vector__reject_via_origin_from__circle(self_: MultiVector, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(multi_vector__anti_wedge__circle(self_, other), circle__dual(other));
}

fn multi_vector__reject_via_origin_from__dipole(self_: MultiVector, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(multi_vector__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn multi_vector__reject_via_origin_from__flat_point(self_: MultiVector, other: FlatPoint) -> MultiVector {
    return multi_vector__wedge__circle(multi_vector__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn multi_vector__reject_via_origin_from__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector__reject_via_origin_from__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(multi_vector__anti_wedge__line(self_, other), line__dual(other));
}

fn multi_vector__reject_via_origin_from__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector__reject_via_origin_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector__reject_via_origin_from__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__wedge__round_point(multi_vector__anti_wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector__reject_via_origin_from__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn multi_vector__reject_via_origin_from__round_point(self_: MultiVector, other: RoundPoint) -> MultiVector {
    return multi_vector__wedge__sphere(multi_vector__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn multi_vector__reject_via_origin_from__sphere(self_: MultiVector, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(multi_vector__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn multi_vector__reject_via_origin_from__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector__reject_via_origin_from__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(multi_vector__anti_wedge__translator(self_, other), translator__dual(other));
}

fn plane__reject_via_origin_from__circle(self_: Plane, other: Circle) -> Sphere {
    return dipole__wedge__dipole(plane__anti_wedge__circle(self_, other), circle__dual(other));
}

fn plane__reject_via_origin_from__dipole(self_: Plane, other: Dipole) -> Sphere {
    return round_point__wedge__circle(plane__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn plane__reject_via_origin_from__flat_point(self_: Plane, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(plane__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn plane__reject_via_origin_from__flector(self_: Plane, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(plane__anti_wedge__flector(self_, other), flector__dual(other));
}

fn plane__reject_via_origin_from__line(self_: Plane, other: Line) -> Plane {
    return flat_point__wedge__dipole(plane__anti_wedge__line(self_, other), line__dual(other));
}

fn plane__reject_via_origin_from__motor(self_: Plane, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector(plane__anti_wedge__motor(self_, other), motor__dual(other));
}

fn plane__reject_via_origin_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(plane__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn plane__reject_via_origin_from__plane(self_: Plane, other: Plane) -> Plane {
    return line__wedge__round_point(plane__anti_wedge__plane(self_, other), plane__dual(other));
}

fn plane__reject_via_origin_from__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector(plane__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn plane__reject_via_origin_from__round_point(self_: Plane, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(plane__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn plane__reject_via_origin_from__sphere(self_: Plane, other: Sphere) -> Sphere {
    return circle__wedge__round_point(plane__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn plane__reject_via_origin_from__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(plane__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn plane__reject_via_origin_from__translator(self_: Plane, other: Translator) -> MultiVector {
    return transflector__wedge__multi_vector(plane__anti_wedge__translator(self_, other), translator__dual(other));
}

fn rotor__reject_via_origin_from__circle(self_: Rotor, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(rotor__anti_wedge__circle(self_, other), circle__dual(other));
}

fn rotor__reject_via_origin_from__dipole(self_: Rotor, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(rotor__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn rotor__reject_via_origin_from__flat_point(self_: Rotor, other: FlatPoint) -> AntiScalar {
    return flat_point__wedge__circle(rotor__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn rotor__reject_via_origin_from__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(rotor__anti_wedge__flector(self_, other), flector__dual(other));
}

fn rotor__reject_via_origin_from__line(self_: Rotor, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(rotor__anti_wedge__line(self_, other), line__dual(other));
}

fn rotor__reject_via_origin_from__motor(self_: Rotor, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(rotor__anti_wedge__motor(self_, other), motor__dual(other));
}

fn rotor__reject_via_origin_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(rotor__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn rotor__reject_via_origin_from__plane(self_: Rotor, other: Plane) -> Motor {
    return flector__wedge__round_point(rotor__anti_wedge__plane(self_, other), plane__dual(other));
}

fn rotor__reject_via_origin_from__rotor(self_: Rotor, other: Rotor) -> MultiVector {
    return rotor__wedge__multi_vector(rotor__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn rotor__reject_via_origin_from__round_point(self_: Rotor, other: RoundPoint) -> AntiScalar {
    return round_point__wedge__sphere(rotor__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn rotor__reject_via_origin_from__sphere(self_: Rotor, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(rotor__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn rotor__reject_via_origin_from__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return flector__wedge__multi_vector(rotor__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn rotor__reject_via_origin_from__translator(self_: Rotor, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(rotor__anti_wedge__translator(self_, other), translator__dual(other));
}

fn round_point__reject_via_origin_from__flector(self_: RoundPoint, other: Flector) -> MultiVector {
    return scalar__wedge__multi_vector(round_point__anti_wedge__flector(self_, other), flector__dual(other));
}

fn round_point__reject_via_origin_from__motor(self_: RoundPoint, other: Motor) -> MultiVector {
    return round_point__wedge__multi_vector(round_point__anti_wedge__motor(self_, other), motor__dual(other));
}

fn round_point__reject_via_origin_from__multi_vector(self_: RoundPoint, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(round_point__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn round_point__reject_via_origin_from__plane(self_: RoundPoint, other: Plane) -> RoundPoint {
    return scalar__wedge__round_point(round_point__anti_wedge__plane(self_, other), plane__dual(other));
}

fn round_point__reject_via_origin_from__rotor(self_: RoundPoint, other: Rotor) -> MultiVector {
    return round_point__wedge__multi_vector(round_point__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn round_point__reject_via_origin_from__sphere(self_: RoundPoint, other: Sphere) -> RoundPoint {
    return scalar__wedge__round_point(round_point__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn round_point__reject_via_origin_from__transflector(self_: RoundPoint, other: Transflector) -> MultiVector {
    return scalar__wedge__multi_vector(round_point__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn round_point__reject_via_origin_from__translator(self_: RoundPoint, other: Translator) -> MultiVector {
    return round_point__wedge__multi_vector(round_point__anti_wedge__translator(self_, other), translator__dual(other));
}

fn sphere__reject_via_origin_from__circle(self_: Sphere, other: Circle) -> Sphere {
    return dipole__wedge__dipole(sphere__anti_wedge__circle(self_, other), circle__dual(other));
}

fn sphere__reject_via_origin_from__dipole(self_: Sphere, other: Dipole) -> Sphere {
    return round_point__wedge__circle(sphere__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn sphere__reject_via_origin_from__flat_point(self_: Sphere, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(sphere__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn sphere__reject_via_origin_from__flector(self_: Sphere, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__flector(self_, other), flector__dual(other));
}

fn sphere__reject_via_origin_from__line(self_: Sphere, other: Line) -> Sphere {
    return dipole__wedge__dipole(sphere__anti_wedge__line(self_, other), line__dual(other));
}

fn sphere__reject_via_origin_from__motor(self_: Sphere, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__motor(self_, other), motor__dual(other));
}

fn sphere__reject_via_origin_from__multi_vector(self_: Sphere, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn sphere__reject_via_origin_from__plane(self_: Sphere, other: Plane) -> Sphere {
    return circle__wedge__round_point(sphere__anti_wedge__plane(self_, other), plane__dual(other));
}

fn sphere__reject_via_origin_from__rotor(self_: Sphere, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn sphere__reject_via_origin_from__round_point(self_: Sphere, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(sphere__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn sphere__reject_via_origin_from__sphere(self_: Sphere, other: Sphere) -> Sphere {
    return circle__wedge__round_point(sphere__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn sphere__reject_via_origin_from__transflector(self_: Sphere, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn sphere__reject_via_origin_from__translator(self_: Sphere, other: Translator) -> MultiVector {
    return multi_vector__wedge__multi_vector(sphere__anti_wedge__translator(self_, other), translator__dual(other));
}

fn transflector__reject_via_origin_from__circle(self_: Transflector, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(transflector__anti_wedge__circle(self_, other), circle__dual(other));
}

fn transflector__reject_via_origin_from__dipole(self_: Transflector, other: Dipole) -> Sphere {
    return round_point__wedge__circle(transflector__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn transflector__reject_via_origin_from__flat_point(self_: Transflector, other: FlatPoint) -> Sphere {
    return round_point__wedge__circle(transflector__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn transflector__reject_via_origin_from__flector(self_: Transflector, other: Flector) -> MultiVector {
    return multi_vector__wedge__multi_vector(transflector__anti_wedge__flector(self_, other), flector__dual(other));
}

fn transflector__reject_via_origin_from__line(self_: Transflector, other: Line) -> Plane {
    return flat_point__wedge__dipole(transflector__anti_wedge__line(self_, other), line__dual(other));
}

fn transflector__reject_via_origin_from__motor(self_: Transflector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector(transflector__anti_wedge__motor(self_, other), motor__dual(other));
}

fn transflector__reject_via_origin_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(transflector__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn transflector__reject_via_origin_from__plane(self_: Transflector, other: Plane) -> MultiVector {
    return multi_vector__wedge__round_point(transflector__anti_wedge__plane(self_, other), plane__dual(other));
}

fn transflector__reject_via_origin_from__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector(transflector__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn transflector__reject_via_origin_from__round_point(self_: Transflector, other: RoundPoint) -> Sphere {
    return scalar__wedge__sphere(transflector__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn transflector__reject_via_origin_from__sphere(self_: Transflector, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(transflector__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn transflector__reject_via_origin_from__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__multi_vector(transflector__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn transflector__reject_via_origin_from__translator(self_: Transflector, other: Translator) -> MultiVector {
    return transflector__wedge__multi_vector(transflector__anti_wedge__translator(self_, other), translator__dual(other));
}

fn translator__reject_via_origin_from__circle(self_: Translator, other: Circle) -> MultiVector {
    return multi_vector__wedge__dipole(translator__anti_wedge__circle(self_, other), circle__dual(other));
}

fn translator__reject_via_origin_from__dipole(self_: Translator, other: Dipole) -> MultiVector {
    return multi_vector__wedge__circle(translator__anti_wedge__dipole(self_, other), dipole__dual(other));
}

fn translator__reject_via_origin_from__flat_point(self_: Translator, other: FlatPoint) -> AntiScalar {
    return flat_point__wedge__circle(translator__anti_wedge__flat_point(self_, other), flat_point__dual(other));
}

fn translator__reject_via_origin_from__flector(self_: Translator, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(translator__anti_wedge__flector(self_, other), flector__dual(other));
}

fn translator__reject_via_origin_from__line(self_: Translator, other: Line) -> MultiVector {
    return multi_vector__wedge__dipole(translator__anti_wedge__line(self_, other), line__dual(other));
}

fn translator__reject_via_origin_from__motor(self_: Translator, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector(translator__anti_wedge__motor(self_, other), motor__dual(other));
}

fn translator__reject_via_origin_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(translator__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn translator__reject_via_origin_from__plane(self_: Translator, other: Plane) -> Motor {
    return transflector__wedge__round_point(translator__anti_wedge__plane(self_, other), plane__dual(other));
}

fn translator__reject_via_origin_from__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector(translator__anti_wedge__rotor(self_, other), rotor__dual(other));
}

fn translator__reject_via_origin_from__round_point(self_: Translator, other: RoundPoint) -> AntiScalar {
    return round_point__wedge__sphere(translator__anti_wedge__round_point(self_, other), round_point__dual(other));
}

fn translator__reject_via_origin_from__sphere(self_: Translator, other: Sphere) -> MultiVector {
    return multi_vector__wedge__round_point(translator__anti_wedge__sphere(self_, other), sphere__dual(other));
}

fn translator__reject_via_origin_from__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(translator__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn translator__reject_via_origin_from__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(translator__anti_wedge__translator(self_, other), translator__dual(other));
}

fn circle__cosine_angle__circle(self_: Circle, other: Circle) -> DualNum {
    return scalar__add__anti_scalar(circle__anti_wedge__dipole(self_, circle__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(circle__weight_norm(self_), circle__weight_norm(other)));
}

fn circle__cosine_angle__dipole(self_: Circle, other: Dipole) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(circle__anti_wedge__circle(self_, dipole__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(circle__weight_norm(self_), dipole__weight_norm(other)));
}

fn circle__cosine_angle__flat_point(self_: Circle, other: FlatPoint) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(circle__anti_wedge__circle(self_, flat_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(circle__weight_norm(self_), flat_point__weight_norm(other)));
}

fn circle__cosine_angle__line(self_: Circle, other: Line) -> DualNum {
    return scalar__add__anti_scalar(circle__anti_wedge__dipole(self_, line__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(circle__weight_norm(self_), line__weight_norm(other)));
}

fn circle__cosine_angle__round_point(self_: Circle, other: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(dipole__bulk_norm(circle__anti_wedge__sphere(self_, round_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(circle__weight_norm(self_), round_point__weight_norm(other)));
}

fn dipole__cosine_angle__dipole(self_: Dipole, other: Dipole) -> DualNum {
    return scalar__add__anti_scalar(dipole__anti_wedge__circle(self_, dipole__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(dipole__weight_norm(self_), dipole__weight_norm(other)));
}

fn dipole__cosine_angle__flat_point(self_: Dipole, other: FlatPoint) -> DualNum {
    return scalar__add__anti_scalar(dipole__anti_wedge__circle(self_, flat_point__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(dipole__weight_norm(self_), flat_point__weight_norm(other)));
}

fn dipole__cosine_angle__round_point(self_: Dipole, other: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(dipole__anti_wedge__sphere(self_, round_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(dipole__weight_norm(self_), round_point__weight_norm(other)));
}

fn flat_point__cosine_angle__dipole(self_: FlatPoint, other: Dipole) -> DualNum {
    return scalar__add__anti_scalar(flat_point__anti_wedge__circle(self_, dipole__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(flat_point__weight_norm(self_), dipole__weight_norm(other)));
}

fn flat_point__cosine_angle__flat_point(self_: FlatPoint, other: FlatPoint) -> DualNum {
    return scalar__add__anti_scalar(flat_point__anti_wedge__circle(self_, flat_point__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(flat_point__weight_norm(self_), flat_point__weight_norm(other)));
}

fn flat_point__cosine_angle__round_point(self_: FlatPoint, other: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(flat_point__anti_wedge__sphere(self_, round_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(flat_point__weight_norm(self_), round_point__weight_norm(other)));
}

fn line__cosine_angle__circle(self_: Line, other: Circle) -> DualNum {
    return scalar__add__anti_scalar(line__anti_wedge__dipole(self_, circle__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(line__weight_norm(self_), circle__weight_norm(other)));
}

fn line__cosine_angle__dipole(self_: Line, other: Dipole) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(line__anti_wedge__circle(self_, dipole__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(line__weight_norm(self_), dipole__weight_norm(other)));
}

fn line__cosine_angle__flat_point(self_: Line, other: FlatPoint) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(line__anti_wedge__circle(self_, flat_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(line__weight_norm(self_), flat_point__weight_norm(other)));
}

fn line__cosine_angle__line(self_: Line, other: Line) -> DualNum {
    return scalar__add__anti_scalar(line__anti_wedge__dipole(self_, line__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(line__weight_norm(self_), line__weight_norm(other)));
}

fn line__cosine_angle__round_point(self_: Line, other: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(dipole__bulk_norm(line__anti_wedge__sphere(self_, round_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(line__weight_norm(self_), round_point__weight_norm(other)));
}

fn plane__cosine_angle__circle(self_: Plane, other: Circle) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(plane__anti_wedge__dipole(self_, circle__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(plane__weight_norm(self_), circle__weight_norm(other)));
}

fn plane__cosine_angle__dipole(self_: Plane, other: Dipole) -> DualNum {
    return scalar__add__anti_scalar(dipole__bulk_norm(plane__anti_wedge__circle(self_, dipole__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(plane__weight_norm(self_), dipole__weight_norm(other)));
}

fn plane__cosine_angle__flat_point(self_: Plane, other: FlatPoint) -> DualNum {
    return scalar__add__anti_scalar(dipole__bulk_norm(plane__anti_wedge__circle(self_, flat_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(plane__weight_norm(self_), flat_point__weight_norm(other)));
}

fn plane__cosine_angle__line(self_: Plane, other: Line) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(plane__anti_wedge__dipole(self_, line__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(plane__weight_norm(self_), line__weight_norm(other)));
}

fn plane__cosine_angle__plane(self_: Plane, other: Plane) -> DualNum {
    return scalar__add__anti_scalar(plane__anti_wedge__round_point(self_, plane__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(plane__weight_norm(self_), plane__weight_norm(other)));
}

fn plane__cosine_angle__round_point(self_: Plane, other: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(circle__bulk_norm(plane__anti_wedge__sphere(self_, round_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(plane__weight_norm(self_), round_point__weight_norm(other)));
}

fn plane__cosine_angle__sphere(self_: Plane, other: Sphere) -> DualNum {
    return scalar__add__anti_scalar(plane__anti_wedge__round_point(self_, sphere__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(plane__weight_norm(self_), sphere__weight_norm(other)));
}

fn round_point__cosine_angle__round_point(self_: RoundPoint, other: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(round_point__anti_wedge__sphere(self_, round_point__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(round_point__weight_norm(self_), round_point__weight_norm(other)));
}

fn sphere__cosine_angle__circle(self_: Sphere, other: Circle) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(sphere__anti_wedge__dipole(self_, circle__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(sphere__weight_norm(self_), circle__weight_norm(other)));
}

fn sphere__cosine_angle__dipole(self_: Sphere, other: Dipole) -> DualNum {
    return scalar__add__anti_scalar(dipole__bulk_norm(sphere__anti_wedge__circle(self_, dipole__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(sphere__weight_norm(self_), dipole__weight_norm(other)));
}

fn sphere__cosine_angle__flat_point(self_: Sphere, other: FlatPoint) -> DualNum {
    return scalar__add__anti_scalar(dipole__bulk_norm(sphere__anti_wedge__circle(self_, flat_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(sphere__weight_norm(self_), flat_point__weight_norm(other)));
}

fn sphere__cosine_angle__line(self_: Sphere, other: Line) -> DualNum {
    return scalar__add__anti_scalar(round_point__bulk_norm(sphere__anti_wedge__dipole(self_, line__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(sphere__weight_norm(self_), line__weight_norm(other)));
}

fn sphere__cosine_angle__plane(self_: Sphere, other: Plane) -> DualNum {
    return scalar__add__anti_scalar(sphere__anti_wedge__round_point(self_, plane__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(sphere__weight_norm(self_), plane__weight_norm(other)));
}

fn sphere__cosine_angle__round_point(self_: Sphere, other: RoundPoint) -> DualNum {
    return scalar__add__anti_scalar(circle__bulk_norm(sphere__anti_wedge__sphere(self_, round_point__anti_dual(other))), anti_scalar__anti_wedge_dot__anti_scalar(sphere__weight_norm(self_), round_point__weight_norm(other)));
}

fn sphere__cosine_angle__sphere(self_: Sphere, other: Sphere) -> DualNum {
    return scalar__add__anti_scalar(sphere__anti_wedge__round_point(self_, sphere__anti_dual(other)), anti_scalar__anti_wedge_dot__anti_scalar(sphere__weight_norm(self_), sphere__weight_norm(other)));
}

fn circle__sine_angle__circle(self_: Circle, other: Circle) -> DualNum {
    let cos: DualNum = circle__cosine_angle__circle(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn circle__sine_angle__dipole(self_: Circle, other: Dipole) -> DualNum {
    let cos: DualNum = circle__cosine_angle__dipole(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn circle__sine_angle__flat_point(self_: Circle, other: FlatPoint) -> DualNum {
    let cos: DualNum = circle__cosine_angle__flat_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn circle__sine_angle__line(self_: Circle, other: Line) -> DualNum {
    let cos: DualNum = circle__cosine_angle__line(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn circle__sine_angle__round_point(self_: Circle, other: RoundPoint) -> DualNum {
    let cos: DualNum = circle__cosine_angle__round_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn dipole__sine_angle__dipole(self_: Dipole, other: Dipole) -> DualNum {
    let cos: DualNum = dipole__cosine_angle__dipole(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn dipole__sine_angle__flat_point(self_: Dipole, other: FlatPoint) -> DualNum {
    let cos: DualNum = dipole__cosine_angle__flat_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn dipole__sine_angle__round_point(self_: Dipole, other: RoundPoint) -> DualNum {
    let cos: DualNum = dipole__cosine_angle__round_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn flat_point__sine_angle__dipole(self_: FlatPoint, other: Dipole) -> DualNum {
    let cos: DualNum = flat_point__cosine_angle__dipole(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn flat_point__sine_angle__flat_point(self_: FlatPoint, other: FlatPoint) -> DualNum {
    let cos: DualNum = flat_point__cosine_angle__flat_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn flat_point__sine_angle__round_point(self_: FlatPoint, other: RoundPoint) -> DualNum {
    let cos: DualNum = flat_point__cosine_angle__round_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn line__sine_angle__circle(self_: Line, other: Circle) -> DualNum {
    let cos: DualNum = line__cosine_angle__circle(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn line__sine_angle__dipole(self_: Line, other: Dipole) -> DualNum {
    let cos: DualNum = line__cosine_angle__dipole(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn line__sine_angle__flat_point(self_: Line, other: FlatPoint) -> DualNum {
    let cos: DualNum = line__cosine_angle__flat_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn line__sine_angle__line(self_: Line, other: Line) -> DualNum {
    let cos: DualNum = line__cosine_angle__line(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn line__sine_angle__round_point(self_: Line, other: RoundPoint) -> DualNum {
    let cos: DualNum = line__cosine_angle__round_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn plane__sine_angle__circle(self_: Plane, other: Circle) -> DualNum {
    let cos: DualNum = plane__cosine_angle__circle(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn plane__sine_angle__dipole(self_: Plane, other: Dipole) -> DualNum {
    let cos: DualNum = plane__cosine_angle__dipole(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn plane__sine_angle__flat_point(self_: Plane, other: FlatPoint) -> DualNum {
    let cos: DualNum = plane__cosine_angle__flat_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn plane__sine_angle__line(self_: Plane, other: Line) -> DualNum {
    let cos: DualNum = plane__cosine_angle__line(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn plane__sine_angle__plane(self_: Plane, other: Plane) -> DualNum {
    let cos: DualNum = plane__cosine_angle__plane(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn plane__sine_angle__round_point(self_: Plane, other: RoundPoint) -> DualNum {
    let cos: DualNum = plane__cosine_angle__round_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn plane__sine_angle__sphere(self_: Plane, other: Sphere) -> DualNum {
    let cos: DualNum = plane__cosine_angle__sphere(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn round_point__sine_angle__round_point(self_: RoundPoint, other: RoundPoint) -> DualNum {
    let cos: DualNum = round_point__cosine_angle__round_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn sphere__sine_angle__circle(self_: Sphere, other: Circle) -> DualNum {
    let cos: DualNum = sphere__cosine_angle__circle(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn sphere__sine_angle__dipole(self_: Sphere, other: Dipole) -> DualNum {
    let cos: DualNum = sphere__cosine_angle__dipole(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn sphere__sine_angle__flat_point(self_: Sphere, other: FlatPoint) -> DualNum {
    let cos: DualNum = sphere__cosine_angle__flat_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn sphere__sine_angle__line(self_: Sphere, other: Line) -> DualNum {
    let cos: DualNum = sphere__cosine_angle__line(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn sphere__sine_angle__plane(self_: Sphere, other: Plane) -> DualNum {
    let cos: DualNum = sphere__cosine_angle__plane(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn sphere__sine_angle__round_point(self_: Sphere, other: RoundPoint) -> DualNum {
    let cos: DualNum = sphere__cosine_angle__round_point(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

fn sphere__sine_angle__sphere(self_: Sphere, other: Sphere) -> DualNum {
    let cos: DualNum = sphere__cosine_angle__sphere(self_, other);
    let cos_squared: DualNum = dual_num__wedge_dot__dual_num(cos, cos);
    let sub: DualNum = dual_num__sub__dual_num(dual_num__unit(), cos_squared);
    return dual_num__sqrt(sub);
}

