// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
impl InfixWedge for AntiCircleOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiCircleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<AntiLine> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiCircleOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4       15        0
    //  no simd        7       18        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for AntiCircleOnOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        5       15        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[1] * other.group1()[3]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiCircleOnOrigin {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiCircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiCircleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for AntiCircleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiCircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for AntiCircleOnOrigin {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e5])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e5])),
        );
    }
}
impl Wedge<Line> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for AntiCircleOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiCircleOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd3        2        5        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       26       48        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            ((self.group1() * Simd32x3::from(other.group1()[3])) + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e1])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
                ((self.group1()[0] * other.group3()[3]) + (self.group0()[1] * other.group4()[2]) - (self.group0()[2] * other.group4()[1])),
                ((self.group1()[1] * other.group3()[3]) - (self.group0()[0] * other.group4()[2]) + (self.group0()[2] * other.group4()[0])),
                ((self.group1()[2] * other.group3()[3]) + (self.group0()[0] * other.group4()[1]) - (self.group0()[1] * other.group4()[0])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group4()[2]) - (self.group1()[0] * other.group4()[0]) - (self.group1()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiCircleOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group1() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for AntiCircleOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group1() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for AntiCircleOnOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        8       18        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            ((self.group1() * Simd32x3::from(other.group0()[3])) + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other[e2]),
                (self.group0()[1] * other[e2]),
                (self.group0()[2] * other[e2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e2])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiCircleOnOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for AntiCircleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                ((self.group1()[1] * other.group3()[3]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group1()[2] * other.group3()[3]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group1()[2] * other.group3()[2]) - (self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group3()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiCircleOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiCircleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiCircleOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiCircleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[1] * other.group2()[3]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[3]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOdd> for AntiCircleOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       13       24        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiCircleOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       10       21        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        7       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiCircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       10       21        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixWedge for AntiDipoleOnOrigin {}
impl Wedge<AntiDualNum> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        4        0
    //  no simd        2        7        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group1()[3])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiDipoleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        4        0
    //  no simd        2        7        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<Dipole> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiDipoleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for AntiDipoleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Motor> for AntiDipoleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for AntiDipoleOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       16        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
            ]),
            // e3215
            (self.group0()[3] * other[e1]),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Origin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e4] * -1.0));
    }
}
impl Wedge<RoundPoint> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        5        0
    //  no simd        3        8        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[e2])),
            // e1234
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e1234
            (self.group0()[3] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<Scalar> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        5        0
    //  no simd        3        8        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group2()[3])),
            // e1234
            (-(self.group0()[3] * other.group3()[3]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group2()[3])),
            // e1234
            (self.group0()[3] * other.group1()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        4        0
    //  no simd        2        7        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group2()[3])),
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group1()[3])),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other.group1()[3] * -1.0));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        5        0
    //  no simd        3        8        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group1()[3])),
            // e1234
            (-(self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for AntiDipoleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiDipoleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl InfixWedge for AntiDualNum {}
impl Wedge<AntiCircleOnOrigin> for AntiDualNum {
    type Output = AntiCircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiDualNum {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl Wedge<AntiFlatOrigin> for AntiDualNum {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[1] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiDualNum {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiDualNum {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<AntiLine> for AntiDualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiDualNum {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
        );
    }
}
impl Wedge<AntiPlane> for AntiDualNum {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiDualNum {
    type Output = AntiPlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<AntiScalar> for AntiDualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiDualNum {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[3])]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group1()[0]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * swizzle!(other.group1(), 1, 2, 3, 0)),
        );
    }
}
impl Wedge<Circle> for AntiDualNum {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiDualNum {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiDualNum {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiDualNum {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiDualNum {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiDualNum {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<Dipole> for AntiDualNum {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiDualNum {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiDualNum {
    type Output = DipoleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiDualNum {
    type Output = DipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiDualNum {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiDualNum {
    type Output = DipoleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return DualNum::from_groups(/* e5, e12345 */ (Simd32x2::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<FlatOrigin> for AntiDualNum {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[1] * other[e45]));
    }
}
impl Wedge<FlatPoint> for AntiDualNum {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<FlatPointAtInfinity> for AntiDualNum {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<Flector> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiDualNum {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<FlectorOnOrigin> for AntiDualNum {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<Horizon> for AntiDualNum {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[1] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiDualNum {
    type Output = Infinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[1] * other[e5]));
    }
}
impl Wedge<Line> for AntiDualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Line) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiDualNum {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for AntiDualNum {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<Motor> for AntiDualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiDualNum {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<MotorOnOrigin> for AntiDualNum {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        2       34        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[1] * other.group0()[0]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e5
            (self.group0()[1] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group8()),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[1]) * other.group9()),
            // e3215
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other[e45])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiDualNum {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiDualNum {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for AntiDualNum {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[1] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiDualNum {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (other.group0() * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]])),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiDualNum {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<Origin> for AntiDualNum {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4])]),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e4])]),
        );
    }
}
impl Wedge<Plane> for AntiDualNum {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for AntiDualNum {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiDualNum {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[1])]),
        );
    }
}
impl Wedge<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiDualNum {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e1234
            (self.group0()[1] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiDualNum {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for AntiDualNum {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        8        0
    //  no simd        1       17        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiDualNum {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       13        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiDualNum {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiDualNum {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (other.group0() * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]])),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiDualNum {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       13        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        8        0
    //  no simd        1       17        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self.group0()[1]) * other.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiDualNum {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiDualNum {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       13        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group2()[3])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiDualNum {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiDualNum {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiDualNum {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       13        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl InfixWedge for AntiFlatOrigin {}
impl Wedge<AntiDualNum> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[1]));
    }
}
impl Wedge<AntiFlector> for AntiFlatOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group1()[3]));
    }
}
impl Wedge<AntiMotor> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<AntiPlane> for AntiFlatOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlatOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiFlatOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e321] * other.group1()[0] * -1.0));
    }
}
impl Wedge<Dipole> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group1()[3] * -1.0));
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<DualNum> for AntiFlatOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group0()[0]));
    }
}
impl Wedge<FlatOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Flector> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for AntiFlatOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other[e5]));
    }
}
impl Wedge<Motor> for AntiFlatOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for AntiFlatOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for AntiFlatOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e321] * other.group3()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e321] * other.group0()[0])]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([(self[e321] * other.group1()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e3215
            (self[e321] * other[e1]),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiFlatOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Origin> for AntiFlatOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e321] * other[e4] * -1.0));
    }
}
impl Wedge<RoundPoint> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(self[e321]) * Simd32x2::from([other[e2], other.group0()[3]]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self[e321]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([1.0, -1.0])));
    }
}
impl Wedge<Scalar> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other[scalar]));
    }
}
impl Wedge<VersorEven> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(self[e321]) * Simd32x2::from([other.group2()[3], other.group3()[3]]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(self[e321]) * Simd32x2::from([other.group2()[3], other.group1()[3]]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiFlatOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group2()[3]));
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(self[e321]) * Simd32x2::from([other.group1()[3], other.group0()[3]]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiFlatOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e321] * other.group1()[3] * -1.0));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(self[e321]) * Simd32x2::from([other.group1()[3], other.group2()[3]]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<VersorOdd> for AntiFlatOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self[e321] * other.group1()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e321] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<VersorOddAtInfinity> for AntiFlatOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self[e321] * other.group1()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e321] * other.group0()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[3]));
    }
}
impl InfixWedge for AntiFlatPoint {}
impl Wedge<AntiCircleOnOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       11        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiFlatPoint {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       11        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
            ]),
            // e1234
            (self.group0()[3] * other.group1()[0] * -1.0),
        );
    }
}
impl Wedge<Dipole> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<DipoleAtOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<FlatOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Flector> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e5]));
    }
}
impl Wedge<Motor> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       12        0
    //  no simd        6       20        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e1234, e4235, e4315, e4125
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e3215
            ((self.group0()[3] * other[e1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiFlatPoint {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for AntiFlatPoint {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       12        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other[e2]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<Scalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       12        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
            ]),
            // e1234
            (self.group0()[3] * other.group3()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other.group1()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiFlatPoint {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiFlatPoint {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiFlatPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       12        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3] * -1.0),
                (self.group0()[1] * other.group2()[3] * -1.0),
                (self.group0()[2] * other.group2()[3] * -1.0),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            (self.group0()[3] * other.group2()[3] * -1.0),
        );
    }
}
impl Wedge<VersorOdd> for AntiFlatPoint {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiFlatPoint {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group0()[3] * other.group1()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiFlatPoint {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for AntiFlector {}
impl Wedge<AntiCircleOnOrigin> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiFlector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiFlector {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for AntiFlector {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<AntiLine> for AntiFlector {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group1()[0])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group1()[0] * other.group1()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiFlector {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       23        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       25        0
    //  no simd        5       31        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       19        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       15       27        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       33        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       34        0
    //  no simd       12       37        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0] * -1.0),
                (self.group1()[1] * other.group1()[0] * -1.0),
                (self.group1()[2] * other.group1()[0] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[2])),
                (-(self.group1()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[1])),
                (self.group1()[3] * other.group1()[0] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                (self.group1()[3] * other.group1()[3] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * other.group0())
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[0]) * -1.0),
                    ((self.group0()[1] * other.group1()[0]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for AntiFlector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd       11       16        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group1()[1]),
                    (self.group1()[0] * other.group1()[2]),
                    (self.group1()[1] * other.group1()[0]),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiFlector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       19        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group1(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]))),
            // e1234
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiFlector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        6       10        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiFlector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiFlector {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiFlector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       17       28        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                ((self.group1()[3] * other.group1()[1]) - (self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])),
                ((self.group1()[3] * other.group1()[2]) + (self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlector {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       12       22        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlector {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       20        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group0()[3] * other.group0()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiFlector {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlector {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                ((self.group1()[3] * other.group1()[1]) - (self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])),
                ((self.group1()[3] * other.group1()[2]) + (self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DualNum> for AntiFlector {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiFlector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiFlector {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
        );
    }
}
impl Wedge<Flector> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiFlector {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
            (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
            ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0] * -1.0),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Infinity> for AntiFlector {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Line> for AntiFlector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiFlector {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiFlector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
        );
    }
}
impl Wedge<Motor> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       13        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiFlector {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiFlector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       46        0
    //    simd3        4        6        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       33       57        0
    //  no simd       50       84        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group9()[0]) + (self.group1()[2] * other.group9()[3]) + (self.group1()[1] * other.group9()[2]) + (self.group1()[0] * other.group9()[1])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (self.group1()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group3()[0]),
                    (self.group1()[3] * other.group3()[1]),
                    (self.group1()[3] * other.group3()[2]),
                    (-(self.group1()[1] * other.group5()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group5()[0])),
                ])),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
            ]),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[3]) * other.group5()) - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 2, 0, 1) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                - (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group7()[1]) + (self.group1()[0] * other.group7()[0])),
                    (-(self.group1()[3] * other.group7()[0]) - (self.group1()[1] * other.group6()[2])),
                    (-(self.group1()[3] * other.group7()[1]) - (self.group1()[2] * other.group6()[0])),
                    (-(self.group1()[3] * other.group7()[2]) - (self.group1()[0] * other.group6()[1])),
                ])),
            // e3215
            (-(self.group1()[3] * other.group6()[3]) - (self.group1()[2] * other.group8()[2]) - (self.group1()[1] * other.group8()[1]) - (self.group1()[0] * other.group8()[0])
                + (self.group0()[3] * other[e1])
                + (self.group0()[2] * other.group1()[2])
                + (self.group0()[0] * other.group1()[0])
                + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiFlector {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0] * -1.0),
            (self.group1()[3] * other.group0()[1] * -1.0),
            (self.group1()[3] * other.group0()[2] * -1.0),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiFlector {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for AntiFlector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiFlector {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        6       21        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                ])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiFlector {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<Origin> for AntiFlector {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for AntiFlector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiFlector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       32        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other[e2]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlector {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       24        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
                (self.group0()[3] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for AntiFlector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other[e4315]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiFlector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for AntiFlector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       32        0
    //  no simd       28       44        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group3()[3] * -1.0),
                (self.group1()[1] * other.group3()[3] * -1.0),
                (self.group1()[2] * other.group3()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[1] * other.group3()[2]) - (self.group1()[2] * other.group3()[1])),
                (-(self.group1()[0] * other.group3()[2]) + (self.group1()[2] * other.group3()[0])),
                ((self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group3()[0])),
                (self.group1()[3] * other.group3()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]))
                - (other.group3() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0]))])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group0()[1] * other.group3()[3]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group3()[3])),
                    (-(self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiFlector {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       15       31        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group1()[3]) + (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group0()[0] * other.group1()[3])),
                    (-(self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[3]) - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiFlector {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       22        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       23        0
    //  no simd       16       26        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                ((self.group1()[0] * other.group2()[3]) - (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group2()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[2] * other.group2()[3]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (self.group1()[2] * other.group1()[1]),
                    (self.group1()[0] * other.group1()[2]),
                    (self.group1()[1] * other.group1()[0]),
                    (-(self.group1()[2] * other.group2()[2]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiFlector {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        9       28        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[3]) * -1.0),
                    (-(self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiFlector {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(other.group1(), 3, 3, 0, 3) * Simd32x4::from([self.group0()[3], self.group0()[0], self.group1()[2], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       29        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       13       32        0
    //  no simd       22       41        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3] * -1.0),
                (self.group1()[1] * other.group2()[3] * -1.0),
                (self.group1()[2] * other.group2()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                (self.group1()[3] * other.group2()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0]))])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * other.group0())
                + Simd32x4::from([
                    ((self.group0()[0] * other.group2()[3]) * -1.0),
                    ((self.group0()[1] * other.group2()[3]) * -1.0),
                    ((self.group0()[2] * other.group2()[3]) * -1.0),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       24        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       31       40        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group3()[2]) + (self.group1()[1] * other.group3()[1]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group2()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group2()[2])),
                ((self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group2()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group2()[2])),
                ((self.group1()[3] * other.group1()[2]) - (self.group1()[1] * other.group2()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group2()[1])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiFlector {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group2()[2]) + (self.group1()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiFlector {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       30        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[2]) + (self.group1()[1] * other.group2()[1]) - (self.group0()[3] * other.group1()[3]) + (self.group1()[0] * other.group2()[0])),
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3] * -1.0),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[3])),
                ((self.group1()[3] * other.group1()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2])),
                (self.group1()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiFlector {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       19        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiFlector {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       25        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       21       33        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group2()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group2()[2])),
                ((self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group2()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group2()[2])),
                ((self.group1()[3] * other.group1()[2]) - (self.group1()[1] * other.group2()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group2()[1])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for AntiFlectorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiFlectorOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatPoint> for AntiFlectorOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiFlectorOnOrigin {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ Simd32x3::from([
            ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
            (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLine> for AntiFlectorOnOrigin {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[2]),
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[1] * other.group1()[1]),
                    (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiFlectorOnOrigin {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((swizzle!(self.group0(), 2, 3, 1, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]))])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for AntiFlectorOnOrigin {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       10        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       14        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]))])),
            // e4, e1, e2, e3
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[0] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e1234
            ((swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[3], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group1(), 2, 3, 1, 0))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]))])),
        );
    }
}
impl Wedge<Circle> for AntiFlectorOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        7       12        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (-(self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiFlectorOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        7       12        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (-(self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiFlectorOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiFlectorOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOnOrigin> for AntiFlectorOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[2]) * -1.0),
                    ((self.group0()[3] * other.group1()[0]) * -1.0),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiFlectorOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Dipole> for AntiFlectorOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       23        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlectorOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       20        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlectorOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       17        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group0()[0] * other.group0()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiFlectorOnOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        4        0
    // no simd        6       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlectorOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       14        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiFlectorOnOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        8       15        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<DualNum> for AntiFlectorOnOrigin {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiFlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e45]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiFlectorOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiFlectorOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<Flector> for AntiFlectorOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiFlectorOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[0] * -1.0),
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Infinity> for AntiFlectorOnOrigin {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiFlectorOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiFlectorOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiFlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<Motor> for AntiFlectorOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]))])),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiFlectorOnOrigin {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (self.group0()[3] * other.group0()[3]),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiFlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
            (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       41        0
    //    simd3        1        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       46        0
    //  no simd       27       58        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group9()[3]) + (self.group0()[2] * other.group9()[2]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[3] * other.group0()[0]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                (self.group0()[3] * other.group3()[3] * -1.0),
                (-(self.group0()[3] * other.group5()[2]) - (self.group0()[2] * other.group5()[1]) + (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group5()[0])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[0])),
            ]),
            // e235, e315, e125
            ((swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 3, 1, 2) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                - (swizzle!(self.group0(), 0, 2, 3, 1) * Simd32x4::from([other.group1()[3], other.group6()[2], other.group6()[0], other.group6()[1]]))
                + Simd32x4::from([((self.group0()[2] * other.group7()[1]) + (self.group0()[1] * other.group7()[0])), 0.0, 0.0, 0.0])),
            // e3215
            (-(self.group0()[3] * other.group8()[2]) - (self.group0()[2] * other.group8()[1]) + (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiFlectorOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiFlectorOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiFlectorOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[3] * -1.0),
            (self.group0()[3] * other.group0()[3] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiFlectorOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ Simd32x3::from([
            (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
            (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for AntiFlectorOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Plane> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiFlectorOnOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       13        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       15        0
    //  no simd        3       21        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e3215
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                (self.group0()[0] * other[e2]),
            ]),
            // e15, e25, e35, e1234
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlectorOnOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            (swizzle!(self.group0(), 1, 2, 3, 0)
                * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (swizzle!(self.group0(), 1, 2, 3, 0)
                * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<Scalar> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for AntiFlectorOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       23        0
    //  no simd       15       29        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                (self.group0()[3] * other.group3()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (self.group0()[3] * other.group2()[3]),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]))])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiFlectorOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       12       23        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (self.group0()[3] * other.group2()[3]),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]))])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiFlectorOnOrigin {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       19        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]))])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiFlectorOnOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       17        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[0])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiFlectorOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 3, 1, 2) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group0(), 0, 2, 3, 1) * swizzle!(other.group1(), 3, 2, 0, 1))
                + Simd32x4::from([((self.group0()[2] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiFlectorOnOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       12       23        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group2()[3] * -1.0),
                (self.group0()[2] * other.group2()[3] * -1.0),
                (self.group0()[3] * other.group2()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e3215
            ((swizzle!(self.group0(), 2, 3, 1, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]))])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<VersorOdd> for AntiFlectorOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       23        0
    //  no simd       15       29        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 3, 1, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]))])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiFlectorOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       22        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 3, 1, 0) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiFlectorOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[0])),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiFlectorOnOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiFlectorOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 3, 1, 0) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group1()[2]) + (self.group0()[1] * other.group1()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiFlectorOnOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       19        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for AntiLine {}
impl Wedge<AntiCircleOnOrigin> for AntiLine {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiLine {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiLine {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[2]),
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[1]),
                    (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<AntiLine> for AntiLine {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiLine {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for AntiLine {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiLine {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiLine {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        5       15        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[1] * other.group1()[0]),
                (self.group1()[2] * other.group1()[0]),
                (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Circle> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiLine {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiLine {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiLine {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for AntiLine {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiLine {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiLine {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiLine {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiLine {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiLine {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for AntiLine {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for AntiLine {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for AntiLine {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiLine {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for AntiLine {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiLine {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MotorOnOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        2        6        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       26       48        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e235, e315, e125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]])) + (self.group0() * Simd32x3::from(other[e1]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                    ((self.group1()[2] * other.group3()[1]) + (self.group0()[0] * other.group3()[3])),
                    ((self.group0()[1] * other.group3()[3]) + (self.group1()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group3()[0]) + (self.group0()[2] * other.group3()[3])),
                ])),
            // e3215
            (-(self.group1()[2] * other.group5()[2])
                - (self.group1()[1] * other.group5()[1])
                - (self.group1()[0] * other.group5()[0])
                - (self.group0()[2] * other.group4()[2])
                - (self.group0()[0] * other.group4()[0])
                - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiLine {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiLine {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiLine {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiLine {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<Origin> for AntiLine {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e4])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[e4])),
        );
    }
}
impl Wedge<RoundPoint> for AntiLine {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        8       18        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])) + (self.group0() * Simd32x3::from(other[e2]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiLine {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[scalar])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group3()[3]),
                (self.group1()[1] * other.group3()[3]),
                (self.group1()[2] * other.group3()[3]),
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group3()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group3()[2])),
                (-(self.group1()[2] * other.group3()[0]) + (self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group3()[2])),
                ((self.group1()[1] * other.group3()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group3()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiLine {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiLine {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiLine {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiLine {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group2()[2])),
                (-(self.group1()[2] * other.group2()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group2()[2])),
                ((self.group1()[1] * other.group2()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiLine {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiLine {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiLine {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiLine {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl InfixWedge for AntiLineOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiLineOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for AntiLineOnOrigin {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for AntiLineOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiLineOnOrigin {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for AntiLineOnOrigin {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiLineOnOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiLineOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiLineOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiLineOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[0]),
            (self.group0()[1] * other.group1()[0]),
            (self.group0()[2] * other.group1()[0]),
            (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        ]));
    }
}
impl Wedge<Circle> for AntiLineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiLineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiLineOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiLineOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiLineOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for AntiLineOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        2        3        0
    // no simd        4        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group0()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group0()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiLineOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiLineOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        2        3        0
    // no simd        4        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group2()[2], other.group0()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group2()[0], other.group0()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group2()[1], other.group0()[1]]))),
        );
    }
}
impl Wedge<DualNum> for AntiLineOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiLineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiLineOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for AntiLineOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for AntiLineOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for AntiLineOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiLineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for AntiLineOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for AntiLineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for AntiLineOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiLineOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MotorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for AntiLineOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd3        0        3        0
    // Totals...
    // yes simd        8       18        0
    //  no simd        8       24        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group6()[2]) - (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group6()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other[e1])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                (self.group0()[0] * other.group3()[3]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
            ]),
            // e3215
            (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiLineOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiLineOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiLineOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for AntiLineOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for AntiLineOnOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        9        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other[e2])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiLineOnOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for AntiLineOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiLineOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiLineOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiLineOnOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group1()[3])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiLineOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiLineOnOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        9        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group1()[3])),
        );
    }
}
impl Wedge<VersorOdd> for AntiLineOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiLineOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiLineOnOrigin {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiLineOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        2        3        0
    // no simd        4        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group0()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group0()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group0()[1]]))),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiLineOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiLineOnOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixWedge for AntiMotor {}
impl Wedge<AntiCircleOnOrigin> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4       15        0
    //  no simd        7       18        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDualNum> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiMotor {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + (self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[2])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2]))])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                + (self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiScalar> for AntiMotor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       14        0
    //  no simd        5       20        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       15       27        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]))])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       12       27        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[1] * other.group1()[0]),
                (self.group1()[2] * other.group1()[0]),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group1(), 1, 2, 3, 0)),
        );
    }
}
impl Wedge<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        5       16        0
    fn wedge(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiMotor {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiMotor {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiMotor {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiMotor {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       10        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       10       22        0
    //  no simd       13       28        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiMotor {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiMotor {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        5       16        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiMotor {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiMotor {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       21        0
    //  no simd       10       24        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<DualNum> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1])]),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiMotor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiMotor {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiMotor {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiMotor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<Horizon> for AntiMotor {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiMotor {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiMotor {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for AntiMotor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiMotor {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiMotor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       38        0
    //    simd3        5        8        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       31       51        0
    //  no simd       50       82        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[3] * other.group0()[0]),
                ((self.group1()[3] * other.group1()[3]) - (self.group1()[2] * other.group7()[2]) - (self.group1()[1] * other.group7()[1]) - (self.group1()[0] * other.group7()[0])
                    + (self.group0()[3] * other.group0()[1])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group3()),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[3]) * other.group4()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * other.group6())
                + Simd32x4::from([
                    (self.group1()[0] * other.group1()[3]),
                    (self.group1()[1] * other.group1()[3]),
                    (self.group1()[2] * other.group1()[3]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e235, e315, e125
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group8())
                + Simd32x3::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[2])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group9()[0], other.group3()[3], other.group3()[3], other.group3()[3]]))
                - (swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                    ((self.group1()[2] * other.group3()[1]) + (self.group0()[3] * other.group9()[1])),
                    ((self.group1()[0] * other.group3()[2]) + (self.group0()[3] * other.group9()[2])),
                    ((self.group1()[1] * other.group3()[0]) + (self.group0()[3] * other.group9()[3])),
                ])),
            // e3215
            ((self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group5()[2]) - (self.group1()[1] * other.group5()[1]) - (self.group1()[0] * other.group5()[0])
                + (self.group0()[3] * other[e45])
                - (self.group0()[2] * other.group4()[2])
                - (self.group0()[0] * other.group4()[0])
                - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiMotor {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiMotor {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for AntiMotor {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiMotor {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiMotor {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<Origin> for AntiMotor {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Plane> for AntiMotor {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for AntiMotor {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       18        0
    //  no simd        8       24        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                (self.group0()[3] * other[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiMotor {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e3215
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for AntiMotor {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234
            (self.group0()[3] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiMotor {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for AntiMotor {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       19       29        0
    //  no simd       28       41        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    (self.group1()[0] * other.group3()[3]),
                    (self.group1()[1] * other.group3()[3]),
                    (self.group1()[2] * other.group3()[3]),
                    (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group1()[1] * other.group3()[0]) - (self.group1()[0] * other.group3()[1]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiMotor {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       19       28        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiMotor {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       27        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiMotor {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiMotor {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       18       34        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[1]) - (self.group1()[1] * other.group2()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group1()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group1()[1] * other.group2()[0]) - (self.group1()[0] * other.group2()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       25       41        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group3()[0]),
                    (self.group0()[3] * other.group3()[1]),
                    (self.group0()[3] * other.group3()[2]),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiMotor {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       15       27        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group2()[0])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group2()[1])),
                    ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group2()[2])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiMotor {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group2()[0]),
                    (self.group0()[3] * other.group2()[1]),
                    (self.group0()[3] * other.group2()[2]),
                    ((self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiMotor {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       20        0
    //  no simd        9       23        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group0()[0]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) * -1.0),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiMotor {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group1()[0], other.group0()[3], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[1])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[3])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       22       34        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0]) + (self.group0()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixWedge for AntiMotorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiDualNum> for AntiMotorOnOrigin {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiMotorOnOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiMotorOnOrigin {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for AntiMotorOnOrigin {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiLine> for AntiMotorOnOrigin {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for AntiMotorOnOrigin {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for AntiMotorOnOrigin {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
        ]));
    }
}
impl Wedge<AntiScalar> for AntiMotorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4, e1, e2, e3
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 3, 0, 1, 2)),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e1234
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            ((self.group0() * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                ])),
            // e4, e1, e2, e3
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<Circle> for AntiMotorOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       13        0
    fn wedge(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiMotorOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiMotorOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiMotorOnOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiMotorOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiMotorOnOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<Dipole> for AntiMotorOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       19        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiMotorOnOrigin {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       13        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       15        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<DualNum> for AntiMotorOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1])]),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiMotorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiMotorOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiMotorOnOrigin {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for AntiMotorOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiMotorOnOrigin {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiMotorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<Horizon> for AntiMotorOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiMotorOnOrigin {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiMotorOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiMotorOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for AntiMotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for AntiMotorOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiMotorOnOrigin {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiMotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiMotorOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       23        0
    //    simd3        3        7        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       15       33        0
    //  no simd       24       56        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[3] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[2] * other.group6()[2]) - (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group6()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group4()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group6()[0]),
                (self.group0()[3] * other.group6()[1]),
                (self.group0()[3] * other.group6()[2]),
                ((self.group0()[3] * other.group6()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e235, e315, e125
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group8())),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group9()[0], other.group3()[3], other.group3()[3], other.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                    (self.group0()[3] * other.group9()[1]),
                    (self.group0()[3] * other.group9()[2]),
                    (self.group0()[3] * other.group9()[3]),
                ])),
            // e3215
            ((self.group0()[3] * other[e45]) - (self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiMotorOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiMotorOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for AntiMotorOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiMotorOnOrigin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiMotorOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for AntiMotorOnOrigin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ (self.group0() * Simd32x4::from(other[e4])));
    }
}
impl Wedge<Plane> for AntiMotorOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for AntiMotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for AntiMotorOnOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        2       14        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from(other[e2])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiMotorOnOrigin {
    type Output = VersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiMotorOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234
            (self.group0()[3] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiMotorOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for AntiMotorOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<VersorEven> for AntiMotorOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       28        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiMotorOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiMotorOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiMotorOnOrigin {
    type Output = VersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiMotorOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiMotorOnOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            ((self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for AntiMotorOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       28        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                ((self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group3()[0]),
                    (self.group0()[3] * other.group3()[1]),
                    (self.group0()[3] * other.group3()[2]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group2()[0]),
                    (self.group0()[3] * other.group2()[1]),
                    (self.group0()[3] * other.group2()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiMotorOnOrigin {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group2()[0]),
                    (self.group0()[3] * other.group2()[1]),
                    (self.group0()[3] * other.group2()[2]),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group1()[0], other.group0()[3], other.group0()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (self.group0()[3] * other.group1()[3]),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiMotorOnOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e3215
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                ((self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixWedge for AntiPlane {}
impl Wedge<AntiCircleOnOrigin> for AntiPlane {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        5       15        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiPlane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatOrigin> for AntiPlane {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for AntiPlane {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group1()[3]),
                    (self.group0()[1] * other.group1()[3]),
                    (self.group0()[2] * other.group1()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiLine> for AntiPlane {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiPlane {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e5
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for AntiPlane {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiPlane {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiPlane {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       20        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        5       20        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       23        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       25        0
    //  no simd        5       31        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group1()[0] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for AntiPlane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd       11       16        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (self.group0()[1] * other.group1()[0]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiPlane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       19        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]))),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiPlane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        6       10        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiPlane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiPlane {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[2] * other.group1()[0])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiPlane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiPlane {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        3        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       14       24        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        9       18        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiPlane {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        2        3        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        8       18        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        5        0
    // no simd        6       15        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiPlane {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiPlane {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        3        5        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       11       21        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group1()) + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DualNum> for AntiPlane {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiPlane {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiPlane {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       12        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiPlane {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Infinity> for AntiPlane {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for AntiPlane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiPlane {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiPlane {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Motor> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiPlane {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiPlane {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       37        0
    //    simd3        3        5        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       22       46        0
    //  no simd       34       68        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group9()[0]) + (self.group0()[2] * other.group9()[3]) + (self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (self.group0()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group3()[0]),
                    (self.group0()[3] * other.group3()[1]),
                    (self.group0()[3] * other.group3()[2]),
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ])),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
            ]),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group5()) + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
                    (-(self.group0()[3] * other.group7()[0]) - (self.group0()[1] * other.group6()[2])),
                    (-(self.group0()[3] * other.group7()[1]) - (self.group0()[2] * other.group6()[0])),
                    (-(self.group0()[3] * other.group7()[2]) - (self.group0()[0] * other.group6()[1])),
                ])),
            // e3215
            (-(self.group0()[3] * other.group6()[3]) - (self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiPlane {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiPlane {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiPlane {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       17        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
            ]),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiPlane {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<Origin> for AntiPlane {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Plane> for AntiPlane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiPlane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiPlane {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        1        4        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       20        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other[e2]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiPlane {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiPlane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other[e4315]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for AntiPlane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       27        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        8       30        0
    //  no simd       17       39        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group3()[0]) * -1.0),
                    ((self.group0()[3] * other.group3()[1]) * -1.0),
                    ((self.group0()[3] * other.group3()[2]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (self.group0()[1] * other.group1()[0]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiPlane {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        4       12        0
    //  no simd       10       30        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]))),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiPlane {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       12       22        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (self.group0()[1] * other.group1()[0]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiPlane {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        4       23        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiPlane {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        8       20        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[2] * other.group1()[0])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[0] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       32        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       33        0
    //  no simd       11       36        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3] * -1.0),
                (self.group0()[1] * other.group2()[3] * -1.0),
                (self.group0()[2] * other.group2()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) * -1.0),
                    ((self.group0()[3] * other.group2()[1]) * -1.0),
                    ((self.group0()[3] * other.group2()[2]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOdd> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       11       29        0
    //  no simd       17       35        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiPlane {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       25        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiPlane {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       25        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                ((self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiPlane {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiPlane {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       26        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for AntiPlaneOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiPlaneOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatPoint> for AntiPlaneOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiPlaneOnOrigin {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLine> for AntiPlaneOnOrigin {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiPlaneOnOrigin {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for AntiPlaneOnOrigin {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiCircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4, e1, e2, e3
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Circle> for AntiPlaneOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiPlaneOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiPlaneOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<CircleAtOrigin> for AntiPlaneOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOnOrigin> for AntiPlaneOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
            ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
            (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiPlaneOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Dipole> for AntiPlaneOnOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        8       21        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group2(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiPlaneOnOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiPlaneOnOrigin {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        5       15        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiPlaneOnOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        4        0
    // no simd        6       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiPlaneOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiPlaneOnOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        8       15        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group2(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0))),
        );
    }
}
impl Wedge<DualNum> for AntiPlaneOnOrigin {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiPlaneOnOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e45]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<FlatPoint> for AntiPlaneOnOrigin {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiPlaneOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<Flector> for AntiPlaneOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiPlaneOnOrigin {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiPlaneOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Infinity> for AntiPlaneOnOrigin {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for AntiPlaneOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<LineAtInfinity> for AntiPlaneOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiPlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<Motor> for AntiPlaneOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiPlaneOnOrigin {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiPlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<MultiVector> for AntiPlaneOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       33        0
    //    simd3        3        7        0
    // Totals...
    // yes simd       14       40        0
    //  no simd       20       54        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[2] * other.group9()[3]) + (self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other[e1])),
            // e23, e31, e12
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                ((self.group0()[2] * other.group7()[2]) + (self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
                (-(self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group6()[1])),
                ((self.group0()[0] * other.group6()[2]) - (self.group0()[2] * other.group6()[0])),
                (-(self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group6()[0])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiPlaneOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiPlaneOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiPlaneOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3] * -1.0),
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[3] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiPlaneOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<Origin> for AntiPlaneOnOrigin {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<Plane> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiPlaneOnOrigin {
    type Output = DipoleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        5        0
    // no simd        3       15        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other[e2])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiPlaneOnOrigin {
    type Output = DipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for AntiPlaneOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       27        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiPlaneOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       21        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiPlaneOnOrigin {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiPlaneOnOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       15        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiPlaneOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiPlaneOnOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       21        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3] * -1.0),
                (self.group0()[1] * other.group2()[3] * -1.0),
                (self.group0()[2] * other.group2()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOdd> for AntiPlaneOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       27        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiPlaneOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       21        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiPlaneOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       21        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiPlaneOnOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        4        0
    // no simd        6       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiPlaneOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiPlaneOnOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for AntiScalar {}
impl Wedge<AntiDualNum> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[1]));
    }
}
impl Wedge<AntiMotor> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[3]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[0]));
    }
}
impl Wedge<Scalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[scalar]));
    }
}
impl Wedge<VersorOdd> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[3]));
    }
}
impl Wedge<VersorOddAtInfinity> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[0]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[3]));
    }
}
impl InfixWedge for AntiSphereOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiSphereOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiSphereOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for AntiSphereOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        5       20        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<AntiLine> for AntiSphereOnOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        5       15        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for AntiSphereOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       14        0
    //  no simd        5       20        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4, e1, e2, e3
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for AntiSphereOnOrigin {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       13        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4, e1, e2, e3
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[3])),
                0.0,
            ]),
            // e23, e31, e12, e1234
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[3], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[2]) * -1.0),
                    ((self.group0()[0] * other.group1()[3]) * -1.0),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<Circle> for AntiSphereOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       13        0
    //  no simd       11       16        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiSphereOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       13        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiSphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       10        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiSphereOnOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        3        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       14       24        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group2()[0]),
                    (self.group0()[3] * other.group2()[1]),
                    (self.group0()[3] * other.group2()[2]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        9       18        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group1())),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiSphereOnOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        8       18        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        5        0
    // no simd        6       15        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        3        5        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       11       21        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group1()) - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DualNum> for AntiSphereOnOrigin {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiSphereOnOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiSphereOnOrigin {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiSphereOnOrigin {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for AntiSphereOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       10        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiSphereOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Horizon> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiSphereOnOrigin {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiSphereOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiSphereOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<LineOnOrigin> for AntiSphereOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Motor> for AntiSphereOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group1()[3])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiSphereOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for AntiSphereOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       39        0
    //    simd3        2        4        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       21       47        0
    //  no simd       34       67        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other[e45]) + (self.group0()[2] * other.group9()[3]) + (self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[2])),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other[e1]),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group4()[0]),
                    (self.group0()[3] * other.group4()[1]),
                    (self.group0()[3] * other.group4()[2]),
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group5())
                + Simd32x3::from([
                    (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                    ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                    (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                ])),
            // e235, e315, e125
            ((swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
                    ((self.group0()[1] * other.group6()[2]) * -1.0),
                    ((self.group0()[2] * other.group6()[0]) * -1.0),
                    ((self.group0()[0] * other.group6()[1]) * -1.0),
                ])),
            // e3215
            (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiSphereOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3] * -1.0),
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[3] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiSphereOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for AntiSphereOnOrigin {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiSphereOnOrigin {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        6       16        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e2]),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other[e2]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiSphereOnOrigin {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for AntiSphereOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       17       32        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiSphereOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       10       26        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiSphereOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       11       26        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e15, e25, e35, e1234
            (self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiSphereOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        4       20        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiSphereOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2       15        0
    //  no simd        5       18        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                    ((self.group0()[1] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) * -1.0),
                ])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       26        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOdd> for AntiSphereOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       23        0
    //  no simd       17       35        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group2()[0]),
                    (self.group0()[3] * other.group2()[1]),
                    (self.group0()[3] * other.group2()[2]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiSphereOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       25        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiSphereOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       11       26        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (self.group0()[3] * other.group0()[3]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiSphereOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiSphereOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2       15        0
    //  no simd        5       18        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       22        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       11       26        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl InfixWedge for AntiVersorEvenOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiDualNum> for AntiVersorEvenOnOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[1])]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlector> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       19        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       15       27        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 3, 1, 2, 0))
                - (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]))])),
            // e4, e1, e2, e3
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiLine> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotor> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       15       27        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0]))])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e23, e31, e12, e1234
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlane> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        5       20        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4, e1, e2, e3
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
            ]),
        );
    }
}
impl Wedge<AntiScalar> for AntiVersorEvenOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e4, e1, e2, e3
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 3, 0, 1, 2)),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                + (self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e4, e1, e2, e3
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<Circle> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        5       16        0
    fn wedge(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       13        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       10        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Dipole> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       13       28        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[1] * other.group1()[3]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       24        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<DualNum> for AntiVersorEvenOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiVersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for AntiVersorEvenOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Flector> for AntiVersorEvenOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0]))])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
            ((self.group0()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
            ((self.group0()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Horizon> for AntiVersorEvenOnOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiVersorEvenOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Line> for AntiVersorEvenOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for AntiVersorEvenOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiVersorEvenOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       41        0
    //    simd3        4        7        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       30       53        0
    //  no simd       50       82        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[3] * other.group0()[0]),
                ((self.group1()[3] * other[e1]) - (self.group1()[2] * other.group6()[2]) - (self.group1()[1] * other.group6()[1]) - (self.group1()[0] * other.group6()[0])
                    + (self.group0()[3] * other.group0()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group3()[2])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group4()),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[3]) * other.group5()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group6()[0]),
                    (self.group0()[3] * other.group6()[1]),
                    (self.group0()[3] * other.group6()[2]),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                + Simd32x3::from([
                    ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group8()) + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from([other.group0()[0], other.group3()[3], other.group3()[3], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group9())
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group5()[0])
                        - (self.group0()[1] * other.group5()[1])),
                    (self.group0()[1] * other.group4()[2]),
                    (self.group0()[2] * other.group4()[0]),
                    (self.group0()[0] * other.group4()[1]),
                ])),
            // e3215
            (-(self.group1()[2] * other.group4()[2]) - (self.group1()[1] * other.group4()[1]) + (self.group0()[3] * other[e45]) - (self.group1()[0] * other.group4()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ Simd32x4::from([
            ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for AntiVersorEvenOnOrigin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullVersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Plane> for AntiVersorEvenOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       18        0
    //  no simd        8       24        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group1()[3] * other[e2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other[e2]),
                (self.group0()[1] * other[e2]),
                (self.group0()[2] * other[e2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (self.group1() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]])),
            // e415, e425, e435, e4
            (self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]])),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Scalar> for AntiVersorEvenOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e23, e31, e12, e1234
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for AntiVersorEvenOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234
            (self.group0()[3] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<VersorEven> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       25       41        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group1() * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group2()[3]])) + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group3()[2]),
                    (self.group0()[2] * other.group3()[0]),
                    (self.group0()[0] * other.group3()[1]),
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group1()[2] * other.group3()[2]) - (self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       19       28        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + (self.group1() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       22       34        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 3, 1, 2, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group2()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[3] * other.group2()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group1() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            (self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    (self.group1()[0] * other.group1()[3]),
                    (self.group1()[1] * other.group1()[3]),
                    (self.group1()[2] * other.group1()[3]),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       18       34        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group1() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[1] * other.group2()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group2()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       33        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       25       41        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                ((self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])
                    + (self.group0()[3] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       15       27        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       18       34        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0]))])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiVersorEvenOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       22       34        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                ((self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])
                    + (self.group0()[3] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0]))])),
        );
    }
}
impl InfixWedge for AntiVersorOddOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiVersorOddOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiDualNum> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiVersorOddOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group1()[0] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiVersorOddOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
            ]),
            // e1234
            (self.group1()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for AntiVersorOddOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       24        0
    //  no simd       12       27        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                (self.group1()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (self.group1()[3] * other.group1()[3]),
                ((self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[0]),
                    (self.group1()[0] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[0] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e1234
            ((swizzle!(self.group1(), 2, 3, 1, 0) * swizzle!(other.group0(), 3, 1, 2, 0))
                - (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[3], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2]))])),
        );
    }
}
impl Wedge<AntiLine> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (self.group1()[0] * other.group0()[2]),
            (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       12       27        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[0]),
                    (self.group1()[0] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ])),
            // e4, e1, e2, e3
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for AntiVersorOddOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        5       20        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (self.group1()[3] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
                0.0,
            ]),
            // e23, e31, e12, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[3], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[2]),
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[1] * other.group0()[1]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[3], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group1()[0])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                ])),
            // e4, e1, e2, e3
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[3] * other.group1()[0])),
                0.0,
            ]),
            // e23, e31, e12, e1234
            ((swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[3], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group1()[3], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for AntiVersorOddOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       13        0
    //  no simd       11       16        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[0])),
                    ((self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group2()[2])),
                    (-(self.group1()[1] * other.group2()[0]) - (self.group1()[2] * other.group2()[1])),
                ])),
            // e1234
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[0])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiVersorOddOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[0])),
                    ((self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group2()[2])),
                    (-(self.group1()[1] * other.group2()[0]) - (self.group1()[2] * other.group2()[1])),
                ])),
            // e1234
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiVersorOddOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       13        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                ])),
            // e1234
            (self.group1()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiVersorOddOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                (-(self.group1()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
            ]),
            // e1234
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiVersorOddOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group1(), 3, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[2]) * -1.0),
                    ((self.group1()[3] * other.group1()[0]) * -1.0),
                    ((self.group1()[1] * other.group1()[1]) * -1.0),
                    ((self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiVersorOddOnOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       10        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                (-(self.group1()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
            ]),
            // e1234
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
        );
    }
}
impl Wedge<Dipole> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       17       28        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[0]) - (self.group1()[2] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 3, 3) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group2()[0]),
                    (self.group1()[0] * other.group2()[1]),
                    (self.group1()[0] * other.group2()[2]),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group2()[1])),
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       12       22        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group1()[1], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[1] * other.group0()[2]),
                    (self.group1()[2] * other.group0()[0]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[3] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       11       22        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 3, 3) * swizzle!(other.group0(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group1()[0]),
                    (self.group1()[0] * other.group1()[1]),
                    (self.group1()[0] * other.group1()[2]),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       14        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[0]) - (self.group1()[2] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group2()[0]),
                (self.group1()[0] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (-(self.group1()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group2()[1])),
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DualNum> for AntiVersorOddOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[0])),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiVersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[3], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiVersorOddOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[0]),
                    (self.group1()[0] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiVersorOddOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Flector> for AntiVersorOddOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((swizzle!(self.group1(), 0, 0, 0, 3) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiVersorOddOnOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                ((self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiVersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[0] * -1.0),
            (self.group1()[2] * other.group0()[0] * -1.0),
            (self.group1()[3] * other.group0()[0] * -1.0),
            ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Horizon> for AntiVersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[0] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiVersorOddOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other[e5])),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[e5])),
        );
    }
}
impl Wedge<Line> for AntiVersorOddOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiVersorOddOnOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (self.group1()[0] * other.group0()[2]),
            (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<LineOnOrigin> for AntiVersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group1()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[3], self.group1()[1], self.group1()[2]]))),
        );
    }
}
impl Wedge<Motor> for AntiVersorOddOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group1()[3])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (self.group0() * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[1])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiVersorOddOnOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[0]),
                    (self.group1()[0] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<MotorOnOrigin> for AntiVersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
            ((self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for AntiVersorOddOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       49        0
    //    simd3        3        5        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       35       58        0
    //  no simd       50       80        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group9()[3]) + (self.group1()[2] * other.group9()[2]) + (self.group1()[1] * other.group9()[1]) + (self.group1()[0] * other[e45])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[0])),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group1()[3])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[3] * other.group1()[3])),
                (self.group1()[0] * other[e1]),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[3]])),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 3, 3) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group4()[0]),
                    (self.group1()[0] * other.group4()[1]),
                    (self.group1()[0] * other.group4()[2]),
                    (-(self.group1()[2] * other.group5()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group5()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group1()[0]) * other.group5())
                + Simd32x3::from([
                    ((self.group1()[3] * other.group3()[1]) - (self.group1()[2] * other.group3()[2])),
                    (-(self.group1()[3] * other.group3()[0]) + (self.group1()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group3()[0]) - (self.group1()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group1()[1]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[3], self.group1()[1], self.group1()[2]]))),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 3, 3, 1, 2) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                + (swizzle!(self.group1(), 2, 0, 0, 0) * Simd32x4::from([other.group7()[1], other.group8()[0], other.group8()[1], other.group8()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group7()[0]) + (self.group1()[0] * other.group6()[3])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                    (-(self.group1()[2] * other.group6()[2]) + (self.group0()[0] * other[e1])),
                    (-(self.group1()[3] * other.group6()[0]) + (self.group0()[1] * other[e1])),
                    (-(self.group1()[1] * other.group6()[1]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            (-(self.group1()[3] * other.group8()[2]) - (self.group1()[2] * other.group8()[1]) + (self.group0()[3] * other[e1]) - (self.group1()[1] * other.group8()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiVersorOddOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiVersorOddOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group1()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[3], self.group1()[1], self.group1()[2]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for AntiVersorOddOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[3] * -1.0),
            (self.group1()[2] * other.group0()[3] * -1.0),
            (self.group1()[3] * other.group0()[3] * -1.0),
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for AntiVersorOddOnOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ Simd32x3::from([
            (-(self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
            ((self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for AntiVersorOddOnOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullVersorOddAtOrigin::from_groups(
            // e41, e42, e43, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[3], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for AntiVersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiVersorOddOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       21        0
    //  no simd        9       24        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (self.group1()[0] * other[e2]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                (self.group1()[3] * other[e2]),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[e2])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       20        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (swizzle!(self.group1(), 1, 2, 3, 0)
                * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiVersorOddOnOrigin {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e4, e1, e2, e3
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for AntiVersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[0] * other.group0()[0]));
    }
}
impl Wedge<SphereOnOrigin> for AntiVersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for AntiVersorOddOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       32        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       34        0
    //  no simd       25       40        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group3()[3])),
                ((self.group1()[0] * other.group3()[1]) - (self.group1()[2] * other.group3()[3])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[3] * other.group3()[3])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group3()[2]) - (self.group1()[3] * other.group3()[1])),
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[3] * other.group3()[0])),
                ((self.group1()[1] * other.group3()[1]) - (self.group1()[2] * other.group3()[0])),
                (self.group1()[0] * other.group2()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                (self.group1()[3] * other.group2()[3]),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (self.group0() * Simd32x4::from(other.group2()[3]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[0])),
                    ((self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group2()[1])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group2()[2])),
                    (-(self.group1()[2] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       15       31        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (swizzle!(self.group1(), 1, 2, 3, 0)
                * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                (self.group1()[3] * other.group2()[3]),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (self.group0() * Simd32x4::from(other.group2()[3]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[0])),
                    ((self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group2()[1])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group2()[2])),
                    (-(self.group1()[2] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for AntiVersorOddOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       12       27        0
    //  no simd       18       33        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[0] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (self.group1()[0] * other.group2()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                (self.group1()[3] * other.group2()[3]),
                ((self.group1()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (self.group0() * Simd32x4::from(other.group2()[3]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[0])),
                    ((self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group2()[1])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group2()[2])),
                    (-(self.group1()[2] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       25        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (swizzle!(self.group1(), 1, 2, 3, 0)
                * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (self.group1()[3] * other.group1()[3]),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group1()[0]),
                    (self.group1()[0] * other.group1()[1]),
                    (self.group1()[0] * other.group1()[2]),
                    (-(self.group1()[3] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
                (self.group1()[3] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 3, 3, 1, 2) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[3], self.group1()[1]]))
                + Simd32x4::from([((self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       19       34        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[3])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[2] * other.group2()[3])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[3] * other.group2()[3])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group2()[1])),
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[0])),
                (self.group1()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (self.group1()[3] * other.group1()[3]),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])
                    - (self.group0()[3] * other.group2()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group1()[0]),
                    (self.group1()[0] * other.group1()[1]),
                    (self.group1()[0] * other.group1()[2]),
                    (-(self.group1()[3] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       25       40        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group1(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                + (swizzle!(self.group1(), 0, 0, 0, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                    ((self.group1()[1] * other.group3()[0]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 3, 3) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group2()[0]),
                    (self.group1()[0] * other.group2()[1]),
                    (self.group1()[0] * other.group2()[2]),
                    (-(self.group1()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[1] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group2()[1])),
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group1()[1], self.group0()[3]]))
                + (swizzle!(self.group1(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[3] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       22       34        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group1(), 0, 0, 0, 3) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[0]),
                    (self.group0()[1] * other.group0()[0]),
                    (self.group0()[2] * other.group0()[0]),
                    ((self.group1()[2] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[2])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 3, 3) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        9       22        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group1(), 3, 1, 2, 0) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[2]) * -1.0),
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[1]) * -1.0),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group1()[1], self.group0()[3]]))
                + (swizzle!(self.group1(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for AntiVersorOddOnOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       18       33        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group1(), 3, 1, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group1()[0])),
                    (-(self.group1()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group2()[0]),
                (self.group1()[0] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (-(self.group1()[3] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group2()[1])),
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (swizzle!(self.group1(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl InfixWedge for Circle {}
impl Wedge<AntiCircleOnOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5       13        0
    //  no simd       11       19        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 2, 3, 1) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) * -1.0),
                    ((self.group1()[2] * other.group1()[0]) * -1.0),
                    ((self.group1()[0] * other.group1()[1]) * -1.0),
                    ((self.group1()[3] * other.group1()[3]) + (self.group2()[0] * other.group1()[0])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        7       15        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[3]) * -1.0),
                    ((self.group1()[2] * other.group0()[1]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        5       16        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       13        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiPlane> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5       13        0
    //  no simd       11       19        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 3, 2, 3, 1) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group0()[0]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       13        0
    //  no simd       11       16        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
            // e1234
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        5       16        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       13        0
    //  no simd       11       16        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ])),
            // e1234
            (-(self.group1()[3] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<Dipole> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       10        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[3] * other.group1()[3])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[3] * other.group0()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for Circle {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<FlatOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for Circle {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<Motor> for Circle {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<MotorAtInfinity> for Circle {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       22        0
    //    simd3        0        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       27        0
    //  no simd       24       40        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[3] * other.group3()[3])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[0])),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other[e1])),
                    ((self.group0()[1] * other[e1]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            ((self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group1()[3] * other[e1]) + (self.group2()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Circle {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for Circle {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       20        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e1234
            (self.group1()[3] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<Scalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       20        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group3()[3]) - (self.group1()[1] * other.group3()[2])),
                    (-(self.group2()[1] * other.group3()[3]) - (self.group1()[2] * other.group3()[0])),
                    (-(self.group2()[2] * other.group3()[3]) - (self.group1()[0] * other.group3()[1])),
                    ((self.group2()[1] * other.group3()[1]) + (self.group2()[0] * other.group3()[0])),
                ])),
            // e1234
            (-(self.group1()[3] * other.group3()[3]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group2()[0] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[3]) - (self.group2()[1] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[3]) - (self.group2()[2] * other.group1()[3])),
                (self.group1()[3] * other.group2()[3]),
            ]),
            // e1234
            (self.group1()[3] * other.group1()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5       13        0
    //  no simd       11       19        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[3]) * -1.0),
                    ((self.group1()[2] * other.group0()[1]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[3]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[3]) - (self.group2()[2] * other.group0()[3])),
                (self.group1()[3] * other.group1()[3]),
            ]),
            // e1234
            (self.group1()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for Circle {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Circle {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       20        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group2()[3]) - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) - (self.group1()[2] * other.group2()[0])),
                    (-(self.group2()[2] * other.group2()[3]) - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group2()[1]) + (self.group2()[0] * other.group2()[0])),
                ])),
            // e1234
            (-(self.group1()[3] * other.group2()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       17        0
    //  no simd        9       20        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[3] * other.group0()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for Circle {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl InfixWedge for CircleAligningOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       19        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 2, 3, 0) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group1(), 2, 0, 1, 1)
                    * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        7       15        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[3]) * -1.0),
                    ((self.group1()[2] * other.group0()[1]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlane> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        4        7        0
    //  no simd       10       19        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 3, 2, 3, 0) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for CircleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<Dipole> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       23        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       21       37        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group1(), 2, 3, 3, 3) * Simd32x4::from([self.group0()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(other.group1(), 0, 2, 0, 1) * Simd32x4::from([self.group0()[0], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other[e1])),
                    ((self.group0()[1] * other[e1]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            ((self.group2()[2] * other.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group2() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullVersorOddAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group2() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    (-(self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((self.group0() * Simd32x3::from(other.group0()[1])) - (self.group2() * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl Wedge<Scalar> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group3()[3]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group3()[2])),
                    (-(self.group2()[1] * other.group3()[3]) - (self.group1()[2] * other.group3()[0]) + (self.group0()[1] * other.group2()[3])),
                    (-(self.group2()[2] * other.group3()[3]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group3()[1])),
                    ((self.group2()[0] * other.group3()[0]) + (self.group2()[1] * other.group3()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((self.group0() * Simd32x3::from(other.group2()[3])) - (self.group2() * Simd32x3::from(other.group1()[3]))),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group0()[2])),
                    ((self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((self.group0() * Simd32x3::from(other.group1()[3])) - (self.group2() * Simd32x3::from(other.group0()[3]))),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group2() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group2()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) - (self.group1()[2] * other.group2()[0]) + (self.group0()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[0] * other.group2()[0]) + (self.group2()[1] * other.group2()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for CircleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for CircleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for CircleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for CircleAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for CircleAtInfinity {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       13        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) * -1.0),
                    ((self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group1()[3]) + (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<AntiLine> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlane> for CircleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       13        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        8       14        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for CircleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       13        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        8       14        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
                ])),
            // e1234
            (self.group0()[3] * other.group1()[0] * -1.0),
        );
    }
}
impl Wedge<Dipole> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<FlatOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Flector> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<FlectorOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for CircleAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e5]));
    }
}
impl Wedge<Motor> for CircleAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for CircleAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       22        0
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       15       29        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (self.group0()[3] * other.group1()[3] * -1.0),
                (-(self.group1()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[3]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other[e1]) + (self.group1()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for CircleAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       12        0
    //  no simd        9       15        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other[e2]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<Scalar> for CircleAtInfinity {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       12        0
    //  no simd        9       15        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group3()[3]) - (self.group0()[1] * other.group3()[2])),
                    (-(self.group1()[1] * other.group3()[3]) - (self.group0()[2] * other.group3()[0])),
                    (-(self.group1()[2] * other.group3()[3]) - (self.group0()[0] * other.group3()[1])),
                    ((self.group1()[1] * other.group3()[1]) + (self.group0()[3] * other.group2()[3]) + (self.group1()[0] * other.group3()[0])),
                ])),
            // e1234
            (self.group0()[3] * other.group3()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (self.group0()[3] * other.group2()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other.group1()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for CircleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       13        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group2()[3]) + (self.group1()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (self.group0()[3] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for CircleAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for CircleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       12        0
    //  no simd        9       15        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group1()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group1()[2] * other.group2()[3]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group1()[1] * other.group2()[1]) + (self.group0()[3] * other.group1()[3]) + (self.group1()[0] * other.group2()[0])),
                ])),
            // e1234
            (self.group0()[3] * other.group2()[3] * -1.0),
        );
    }
}
impl Wedge<VersorOdd> for CircleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for CircleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       11        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for CircleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       13        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for CircleAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for CircleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0] * -1.0),
                (self.group1()[1] * other.group1()[0] * -1.0),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group1()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<Dipole> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       14        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       17        0
    //  no simd       12       24        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group1(), 2, 3, 3, 3) * Simd32x4::from([self.group0()[2], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    (self.group0()[0] * other[e1]),
                    (self.group0()[1] * other[e1]),
                    (self.group0()[2] * other[e1]),
                ])),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullVersorOddAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((self.group0() * Simd32x3::from(other.group0()[1])) - (self.group1() * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl Wedge<Scalar> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group1()[0] * other.group3()[3])),
                ((self.group0()[1] * other.group2()[3]) - (self.group1()[1] * other.group3()[3])),
                ((self.group0()[2] * other.group2()[3]) - (self.group1()[2] * other.group3()[3])),
                ((self.group1()[2] * other.group3()[2]) + (self.group1()[0] * other.group3()[0]) + (self.group1()[1] * other.group3()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((self.group0() * Simd32x3::from(other.group2()[3])) - (self.group1() * Simd32x3::from(other.group1()[3]))),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((self.group0() * Simd32x3::from(other.group1()[3])) - (self.group1() * Simd32x3::from(other.group0()[3]))),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for CircleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group1()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[3]) - (self.group1()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[3]) - (self.group1()[2] * other.group2()[3])),
                ((self.group1()[2] * other.group2()[2]) + (self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for CircleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for CircleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for CircleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for CircleOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for CircleOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[2]),
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[1]),
                    (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<AntiLine> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlane> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for CircleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group1(), 3, 1, 2, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group1()[2]),
                    (self.group1()[0] * other.group1()[3]),
                    (self.group1()[1] * other.group1()[1]),
                    (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Dipole> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       13       24        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group1(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other[e1])),
                    ((self.group0()[1] * other[e1]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other[e2])),
                    ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other[e2])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for CircleOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group3()[0]) + (self.group0()[2] * other.group2()[3])),
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group2()[3])));
    }
}
impl Wedge<VersorEvenAtInfinity> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[2]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group2()[3])),
                    (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group2()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group1()[1] * other.group2()[0]) + (self.group0()[2] * other.group1()[3])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for CircleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for CircleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for CircleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for CircleOrthogonalOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       10        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group1()[3]) + (self.group1()[0] * other.group1()[0])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleOrthogonalOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       10        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       10        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleOrthogonalOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ Simd32x2::from([
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for CircleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       10        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0] * -1.0),
                (self.group1()[1] * other.group1()[0] * -1.0),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group1()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
            ]),
            // e1234
            (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<Dipole> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group0()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for CircleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       15       28        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    (self.group0()[0] * other[e1]),
                    (self.group0()[1] * other[e1]),
                    (self.group0()[2] * other[e1]),
                ])),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other[e1]) + (self.group1()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for CircleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        9       17        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other[e2]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) * -1.0),
                    ((self.group1()[1] * other.group0()[3]) * -1.0),
                    ((self.group1()[2] * other.group0()[3]) * -1.0),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[1]),
            ]),
            // e1234
            (self.group0()[3] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<Scalar> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        9       17        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group2()[3]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group3()[3]) * -1.0),
                    ((self.group1()[1] * other.group3()[3]) * -1.0),
                    ((self.group1()[2] * other.group3()[3]) * -1.0),
                    ((self.group1()[2] * other.group3()[2]) + (self.group1()[1] * other.group3()[1]) + (self.group1()[0] * other.group3()[0])),
                ])),
            // e1234
            (-(self.group0()[3] * other.group3()[3]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group1()[0] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[3]) - (self.group1()[1] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[3]) - (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1234
            (self.group0()[3] * other.group1()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       10        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group2()[3]) + (self.group1()[0] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[3]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[3]) - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1234
            (self.group0()[3] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for CircleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        9       17        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) * -1.0),
                    ((self.group1()[1] * other.group2()[3]) * -1.0),
                    ((self.group1()[2] * other.group2()[3]) * -1.0),
                    ((self.group1()[2] * other.group2()[2]) + (self.group1()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[0])),
                ])),
            // e1234
            (-(self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for CircleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group0()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for CircleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       11        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl InfixWedge for Dipole {}
impl Wedge<AntiCircleOnOrigin> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiDualNum> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       17       28        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group0()[0] * other.group1()[3]),
                    (self.group0()[1] * other.group1()[3]),
                    (self.group0()[2] * other.group1()[3]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) + (self.group1()[0] * other.group1()[3]) - (self.group2()[1] * other.group1()[2])),
                (-(self.group2()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group2()[0] * other.group1()[2])),
                ((self.group2()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group2()[0] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       23        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[2])),
                ((self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiLine> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       10       22        0
    //  no simd       13       28        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       19        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        3        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       14       24        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        8       21        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (-(swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        3        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       14       24        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[3]),
                    (self.group2()[1] * other.group0()[3]),
                    (self.group2()[2] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125
            (-(swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       13       28        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       17       28        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                ((self.group1()[1] * other.group1()[0]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group2()[0] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 1, 2, 3, 3))
                + Simd32x4::from([
                    (self.group2()[0] * other.group1()[0]),
                    (self.group2()[1] * other.group1()[0]),
                    (self.group2()[2] * other.group1()[0]),
                    (-(self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[2])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[2])),
                ((self.group2()[0] * other.group1()[3]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Circle> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       10        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[3] * other.group1()[3])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8        9        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[3] * other.group0()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       30        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       21        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       21        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Dipole {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       22       27        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for Dipole {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<FlatOrigin> for Dipole {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for Dipole {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for Dipole {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for Dipole {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for Dipole {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for Dipole {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<Infinity> for Dipole {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e5])),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<Line> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for Dipole {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for Dipole {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       44        0
    //    simd3        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       40       55        0
    //  no simd       54       80        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[2] * other.group7()[2])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group1()[3] * other.group6()[3])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group1()[3]) + (self.group0()[0] * other[e1])),
                    ((self.group2()[1] * other.group1()[3]) + (self.group0()[1] * other[e1])),
                    ((self.group2()[2] * other.group1()[3]) + (self.group0()[2] * other[e1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[2] * other.group5()[2])
                        - (self.group0()[0] * other.group5()[0])
                        - (self.group0()[1] * other.group5()[1])),
                    ((self.group2()[2] * other.group3()[1])
                        + (self.group1()[3] * other.group5()[0])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group4()[2])
                        - (self.group0()[2] * other.group4()[1])),
                    ((self.group2()[0] * other.group3()[2]) + (self.group1()[3] * other.group5()[1]) + (self.group1()[1] * other.group3()[3])
                        - (self.group0()[0] * other.group4()[2])
                        + (self.group0()[2] * other.group4()[0])),
                    ((self.group2()[1] * other.group3()[0])
                        + (self.group1()[3] * other.group5()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group4()[1])
                        - (self.group0()[1] * other.group4()[0])),
                ])),
            // e3215
            (-(self.group2()[2] * other.group5()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[0] * other.group4()[0])
                - (self.group1()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Dipole {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Dipole {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
            ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
            (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Dipole {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for Dipole {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group2()[2] * other.group0()[1]),
                    (self.group2()[0] * other.group0()[2]),
                    (self.group2()[1] * other.group0()[0]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<Origin> for Dipole {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e415, e425, e435
            (self.group2() * Simd32x3::from(other[e4])),
        );
    }
}
impl Wedge<RoundPoint> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        4        6        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       20       30        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2])),
                    ((self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2])),
                    ((self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Dipole {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (self.group2() * Simd32x3::from(other.group0()[0]))),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<Scalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       36        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       29       40        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                ((self.group1()[1] * other.group3()[3]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group1()[2] * other.group3()[3]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group3()[3]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group2()[1] * other.group3()[3]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[3]) + (self.group0()[2] * other.group2()[3])),
                    (-(self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group3()[1]) + (self.group1()[0] * other.group2()[3]) - (self.group2()[1] * other.group3()[2])),
                (-(self.group2()[2] * other.group3()[0]) + (self.group1()[1] * other.group2()[3]) + (self.group2()[0] * other.group3()[2])),
                ((self.group2()[1] * other.group3()[0]) + (self.group1()[2] * other.group2()[3]) - (self.group2()[0] * other.group3()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Dipole {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       21        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[3]) + (self.group2()[1] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group2()[2] * other.group1()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       28        0
    //  no simd       20       31        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 1, 2, 3, 3))
                + Simd32x4::from([
                    (self.group0()[0] * other.group2()[3]),
                    (self.group0()[1] * other.group2()[3]),
                    (self.group0()[2] * other.group2()[3]),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group2()[2] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group2()[0] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group1()[2] * other.group2()[3]) - (self.group2()[0] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Dipole {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for Dipole {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[0] * other.group1()[3]),
                (self.group2()[1] * other.group1()[3]),
                (self.group2()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       33        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       34        0
    //  no simd       26       37        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[1] * other.group2()[3]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[3]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group2(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group2()[3]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group2()[1] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group2()[1]) + (self.group1()[0] * other.group1()[3]) - (self.group2()[1] * other.group2()[2])),
                (-(self.group2()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group2()[0] * other.group2()[2])),
                ((self.group2()[1] * other.group2()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group2()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       32        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       22       34        0
    //  no simd       25       40        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       18        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       31        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Dipole {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for Dipole {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       22       37        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixWedge for DipoleAligningOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiDualNum> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       12       22        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       20        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for DipoleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for DipoleAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        9       18        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        9       18        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group1() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for DipoleAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for DipoleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       12       22        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group1()[1], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[3]),
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group0()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       21        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0)) - (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       21        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for DipoleAligningOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Infinity> for DipoleAligningOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       39        0
    //    simd3        1        3        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       29       44        0
    //  no simd       34       56        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[3] * other.group6()[3])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[0] * other[e1]) - (self.group0()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[3]) + (self.group0()[1] * other[e1]) - (self.group0()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group1()[3]) + (self.group0()[2] * other[e1]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                    ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2])
                        + (self.group0()[3] * other.group5()[0])
                        + (self.group0()[1] * other.group4()[2])),
                    (-(self.group1()[2] * other.group3()[0])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[3] * other.group5()[1])
                        + (self.group0()[2] * other.group4()[0])),
                    ((self.group1()[1] * other.group3()[0]) - (self.group1()[0] * other.group3()[1])
                        + (self.group0()[3] * other.group5()[2])
                        + (self.group0()[0] * other.group4()[1])),
                ])),
            // e3215
            (-(self.group1()[2] * other.group5()[2]) - (self.group1()[0] * other.group5()[0]) - (self.group1()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<Origin> for DipoleAligningOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group1() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       21        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            ((self.group1() * Simd32x3::from(other.group0()[3])) + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleAligningOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (self.group1() * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl Wedge<Scalar> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for DipoleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       18       28        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group3()[2]),
                    (self.group0()[2] * other.group3()[0]),
                    (self.group0()[0] * other.group3()[1]),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group3()[0])),
                ((self.group1()[1] * other.group3()[3]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group3()[1])),
                ((self.group1()[2] * other.group3()[3]) + (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group2()[3]) + (self.group1()[0] * other.group1()[3])),
            ((self.group0()[1] * other.group2()[3]) + (self.group1()[1] * other.group1()[3])),
            ((self.group0()[2] * other.group2()[3]) + (self.group1()[2] * other.group1()[3])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for DipoleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       12       22        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group1()[3]),
            (self.group1()[1] * other.group1()[3]),
            (self.group1()[2] * other.group1()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       18       28        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group2()[3]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[2] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for DipoleAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd        9       12        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + Simd32x3::from([
                    ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for DipoleAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                ((self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd        9       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + Simd32x3::from([
                    ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl InfixWedge for DipoleAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiDualNum> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for DipoleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       20        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group0()[3] * other.group0()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])),
                (-(self.group1()[2] * other.group1()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group1()[2])),
                ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       17        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group0()[3] * other.group0()[0] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for DipoleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for DipoleAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        5       16        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       13        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for DipoleAtInfinity {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        2        3        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        8       18        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleAtInfinity {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        5       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleAtInfinity {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        8       18        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for DipoleAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for DipoleAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       11       22        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group1(), 1, 2, 3, 3))
                + Simd32x4::from([
                    (self.group1()[0] * other.group1()[0]),
                    (self.group1()[1] * other.group1()[0]),
                    (self.group1()[2] * other.group1()[0]),
                    (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Circle> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<Dipole> for DipoleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       21        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for DipoleAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<FlatOrigin> for DipoleAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for DipoleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for DipoleAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for DipoleAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Infinity> for DipoleAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for DipoleAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<MotorOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       30        0
    //    simd3        2        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       33       56        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[3] * other.group6()[3])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group1()[3]),
                    (self.group1()[1] * other.group1()[3]),
                    (self.group1()[2] * other.group1()[3]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                    ((self.group1()[2] * other.group3()[1]) + (self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group5()[0])),
                    ((self.group1()[0] * other.group3()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group5()[1])),
                    ((self.group1()[1] * other.group3()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group5()[2])),
                ])),
            // e3215
            (-(self.group1()[2] * other.group5()[2])
                - (self.group1()[1] * other.group5()[1])
                - (self.group1()[0] * other.group5()[0])
                - (self.group0()[2] * other.group4()[2])
                - (self.group0()[0] * other.group4()[0])
                - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for DipoleAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<Origin> for DipoleAtInfinity {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[e4])),
        );
    }
}
impl Wedge<RoundPoint> for DipoleAtInfinity {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        2        4        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       11       21        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleAtInfinity {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for DipoleAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       17       28        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group3()[3]),
                    (self.group1()[1] * other.group3()[3]),
                    (self.group1()[2] * other.group3()[3]),
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group3()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group3()[2])),
                (-(self.group1()[2] * other.group3()[0]) + (self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group3()[2])),
                ((self.group1()[1] * other.group3()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group3()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for DipoleAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for DipoleAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       22        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for DipoleAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for DipoleAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for DipoleAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       11       22        0
    //  no simd       14       25        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group2(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group2()[3]),
                    (self.group1()[1] * other.group2()[3]),
                    (self.group1()[2] * other.group2()[3]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[2] * other.group2()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group2()[2])),
                (-(self.group1()[2] * other.group2()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group2()[2])),
                ((self.group1()[1] * other.group2()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOdd> for DipoleAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for DipoleAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
            ]),
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for DipoleAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       13       25        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl InfixWedge for DipoleAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        4        0
    // no simd        6       12        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLine> for DipoleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        2        3        0
    // no simd        4        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group0()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group0()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiMotor> for DipoleAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleAtOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        5        0
    // no simd        6       15        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        4        0
    // no simd        6       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        5        0
    // no simd        6       15        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for DipoleAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for DipoleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[1] * other.group1()[0]),
                (self.group1()[2] * other.group1()[0]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0)) - (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for DipoleAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<Flector> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<Infinity> for DipoleAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       33        0
    //    simd3        2        5        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       27       48        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[1] * other[e1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[2] * other[e1]) + (self.group1()[2] * other.group1()[3])),
                0.0,
            ]),
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2]) + (self.group0()[1] * other.group4()[2]) - (self.group0()[2] * other.group4()[1])),
                (-(self.group1()[2] * other.group3()[0]) + (self.group1()[0] * other.group3()[2]) - (self.group0()[0] * other.group4()[2])
                    + (self.group0()[2] * other.group4()[0])),
                ((self.group1()[1] * other.group3()[0]) - (self.group1()[0] * other.group3()[1]) + (self.group0()[0] * other.group4()[1]) - (self.group0()[1] * other.group4()[0])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group5()[2]) - (self.group1()[0] * other.group5()[0]) - (self.group1()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<Origin> for DipoleAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group1() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        6        0
    // no simd        9       18        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other[e2])) + (self.group1() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (self.group1() * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl Wedge<Scalar> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for DipoleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       24        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group1()[0] * other.group3()[3])),
                ((self.group0()[1] * other.group2()[3]) + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group1()[2] * other.group3()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group2()[3]) + (self.group1()[0] * other.group1()[3])),
            ((self.group0()[1] * other.group2()[3]) + (self.group1()[1] * other.group1()[3])),
            ((self.group0()[2] * other.group2()[3]) + (self.group1()[2] * other.group1()[3])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for DipoleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group1()[3]),
            (self.group1()[1] * other.group1()[3]),
            (self.group1()[2] * other.group1()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for DipoleAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       24        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[2] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for DipoleAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for DipoleAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for DipoleAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl InfixWedge for DipoleOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiDualNum> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       14        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for DipoleOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for DipoleOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for DipoleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       14        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DualNum> for DipoleOnOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Infinity> for DipoleOnOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for DipoleOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       32        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group6()[3])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other[e1]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other[e1]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                    ((self.group0()[3] * other.group5()[0]) + (self.group0()[1] * other.group4()[2])),
                    ((self.group0()[3] * other.group5()[1]) + (self.group0()[2] * other.group4()[0])),
                    ((self.group0()[3] * other.group5()[2]) + (self.group0()[0] * other.group4()[1])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            ((Simd32x3::from(other[e2]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleOnOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for DipoleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group3()[2]),
                    (self.group0()[2] * other.group3()[0]),
                    (self.group0()[0] * other.group3()[1]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for DipoleOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[3]),
            (self.group0()[1] * other.group2()[3]),
            (self.group0()[2] * other.group2()[3]),
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for DipoleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for DipoleOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for DipoleOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for DipoleOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for DipoleOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group0()[2], other.group0()[3], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for DipoleOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixWedge for DipoleOrthogonalOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) + (self.group1()[0] * other.group1()[3]) - (self.group2()[1] * other.group1()[2])),
                (-(self.group2()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group2()[0] * other.group1()[2])),
                ((self.group2()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group2()[0] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        8       15        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (-(swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                ])),
            // e235, e315, e125
            (-(swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLine> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        2        3        0
    // no simd        4        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group2()[2], self.group0()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group2()[0], self.group0()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group2()[1], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiMotor> for DipoleOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       21        0
    //  no simd       10       24        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       15        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for DipoleOrthogonalOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        3        5        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       11       21        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])) + (self.group1() * Simd32x3::from(other.group0()[3]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        8       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (-(swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        3        5        0
    // Totals...
    // yes simd        5       11        0
    //  no simd       11       21        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412
            ((self.group1() * Simd32x3::from(other.group0()[3])) + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (-(swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       24        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                ((self.group1()[1] * other.group1()[0]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[0] * other.group1()[0]),
                (self.group2()[1] * other.group1()[0]),
                (self.group2()[2] * other.group1()[0]),
                (-(self.group1()[2] * other.group1()[3]) - (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[2])),
                ((self.group2()[0] * other.group1()[3]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Circle> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8        9        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8        9        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       22       27        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       21        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       24        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for DipoleOrthogonalOrigin {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for DipoleOrthogonalOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for DipoleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for DipoleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for DipoleOrthogonalOrigin {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e5])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e5])),
        );
    }
}
impl Wedge<Line> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       44        0
    //    simd3        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       36       53        0
    //  no simd       47       72        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[2] * other.group7()[2])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[1] * other[e1]) + (self.group2()[1] * other.group1()[3])),
                ((self.group0()[2] * other[e1]) + (self.group2()[2] * other.group1()[3])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            ((self.group1() * Simd32x3::from(other.group1()[3])) + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]])) + (self.group1() * Simd32x3::from(other[e1]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[2] * other.group5()[2])
                        - (self.group0()[0] * other.group5()[0])
                        - (self.group0()[1] * other.group5()[1])),
                    ((self.group2()[2] * other.group3()[1]) + (self.group1()[0] * other.group3()[3]) + (self.group0()[1] * other.group4()[2])
                        - (self.group0()[2] * other.group4()[1])),
                    ((self.group2()[0] * other.group3()[2]) + (self.group1()[1] * other.group3()[3]) - (self.group0()[0] * other.group4()[2])
                        + (self.group0()[2] * other.group4()[0])),
                    ((self.group2()[1] * other.group3()[0]) + (self.group1()[2] * other.group3()[3]) + (self.group0()[0] * other.group4()[1])
                        - (self.group0()[1] * other.group4()[0])),
                ])),
            // e3215
            (-(self.group2()[2] * other.group5()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[0] * other.group4()[0])
                - (self.group1()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
            ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
            (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group2()[2] * other.group0()[1]),
                    (self.group2()[0] * other.group0()[2]),
                    (self.group2()[1] * other.group0()[0]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<Origin> for DipoleOrthogonalOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other[e4])),
            // e415, e425, e435
            (self.group2() * Simd32x3::from(other[e4])),
        );
    }
}
impl Wedge<RoundPoint> for DipoleOrthogonalOrigin {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        4        6        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       17       27        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            ((self.group1() * Simd32x3::from(other.group0()[3])) + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])) + (self.group1() * Simd32x3::from(other[e2]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (self.group2() * Simd32x3::from(other.group0()[0]))),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[scalar])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for DipoleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       36        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                ((self.group1()[1] * other.group3()[3]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group1()[2] * other.group3()[3]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group2()[0] * other.group3()[3])),
                ((self.group0()[1] * other.group2()[3]) + (self.group2()[1] * other.group3()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group2()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group3()[2]) - (self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group3()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group3()[1]) + (self.group1()[0] * other.group2()[3]) - (self.group2()[1] * other.group3()[2])),
                (-(self.group2()[2] * other.group3()[0]) + (self.group1()[1] * other.group2()[3]) + (self.group2()[0] * other.group3()[2])),
                ((self.group2()[1] * other.group3()[0]) + (self.group1()[2] * other.group2()[3]) - (self.group2()[0] * other.group3()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       21        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[3]) + (self.group2()[1] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group2()[2] * other.group1()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group2()[3]),
                (self.group1()[1] * other.group2()[3]),
                (self.group1()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for DipoleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       27        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group2()[2] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group2()[0] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group1()[2] * other.group2()[3]) - (self.group2()[0] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[0] * other.group1()[3]),
                (self.group2()[1] * other.group1()[3]),
                (self.group2()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       22       33        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[1] * other.group2()[3]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[3]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group2()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group2()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[2] * other.group2()[3])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group2()[1]) + (self.group1()[0] * other.group1()[3]) - (self.group2()[1] * other.group2()[2])),
                (-(self.group2()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group2()[0] * other.group2()[2])),
                ((self.group2()[1] * other.group2()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group2()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOdd> for DipoleOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       32        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       22       36        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       18        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for DipoleOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       23        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       24        0
    //  no simd       13       27        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       29        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       16       30        0
    //  no simd       19       33        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixWedge for DualNum {}
impl Wedge<AntiCircleOnOrigin> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DualNum {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiDualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return DualNum::from_groups(/* e5, e12345 */ (self.group0() * Simd32x2::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatOrigin> for DualNum {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for DualNum {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for DualNum {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DualNum {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiLine> for DualNum {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for DualNum {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[0]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[0]) * other.group0()),
        );
    }
}
impl Wedge<AntiPlane> for DualNum {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DualNum {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<AntiSphereOnOrigin> for DualNum {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group1(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for DualNum {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DualNum {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleAtInfinity> for DualNum {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for DualNum {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOnOrigin> for DualNum {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for DualNum {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Dipole> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DualNum {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DualNum {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DualNum {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<DipoleOnOrigin> for DualNum {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       16        0
    //    simd3        0        3        0
    // Totals...
    // yes simd        1       19        0
    //  no simd        1       25        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group0()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[3] * -1.0)]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group5()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group7()[0] * -1.0),
                (self.group0()[0] * other.group7()[1] * -1.0),
                (self.group0()[0] * other.group7()[2] * -1.0),
            ]),
            // e3215
            (self.group0()[0] * other.group6()[3] * -1.0),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DualNum {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for DualNum {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for DualNum {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for DualNum {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Origin> for DualNum {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[0] * other[e4] * -1.0));
    }
}
impl Wedge<RoundPoint> for DualNum {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<RoundPointAtOrigin> for DualNum {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[0] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Scalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl Wedge<Sphere> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e4315]));
    }
}
impl Wedge<SphereAtOrigin> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<VersorEven> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group3() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for DualNum {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for DualNum {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for DualNum {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for DualNum {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorOdd> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for DualNum {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[0])]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for DualNum {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for DualNum {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl InfixWedge for FlatOrigin {}
impl Wedge<AntiCircleOnOrigin> for FlatOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group1()));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiDualNum> for FlatOrigin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other.group0()[1]));
    }
}
impl Wedge<AntiFlatOrigin> for FlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for FlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for FlatOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlatOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiLine> for FlatOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for FlatOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for FlatOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e45]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlatOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e45]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<AntiPlane> for FlatOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlatOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e45]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<AntiSphereOnOrigin> for FlatOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for FlatOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for FlatOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[3], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for FlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group1()[3] * -1.0));
    }
}
impl Wedge<CircleAtInfinity> for FlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlatOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Dipole> for FlatOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for FlatOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlatOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group1()));
    }
}
impl Wedge<MultiVector> for FlatOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e45] * other.group6()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self[e45] * other.group0()[0])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e45] * other.group1()[0] * -1.0),
                (self[e45] * other.group1()[1] * -1.0),
                (self[e45] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([0.0, (self[e45] * other.group5()[0]), (self[e45] * other.group5()[1]), (self[e45] * other.group5()[2])]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for FlatOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<Scalar> for FlatOrigin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other[scalar]));
    }
}
impl Wedge<VersorEven> for FlatOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for FlatOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for FlatOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorOdd> for FlatOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for FlatOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group0()[0], other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for FlatOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl InfixWedge for FlatPoint {}
impl Wedge<AntiCircleOnOrigin> for FlatPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatOrigin> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for FlatPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for FlatPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for FlatPoint {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       12        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlatPoint {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for FlatPoint {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group1()[0]),
                    (self.group0()[1] * other.group1()[0]),
                    (self.group0()[2] * other.group1()[0]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for FlatPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for FlatPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlatPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       17       32        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group6()[3])
                    - (self.group0()[2] * other.group7()[2])
                    - (self.group0()[0] * other.group7()[0])
                    - (self.group0()[1] * other.group7()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group0()[3] * other.group5()[0]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[3] * other.group5()[1]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                ((self.group0()[3] * other.group5()[2]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for FlatPoint {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for FlatPoint {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<RoundPoint> for FlatPoint {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for FlatPoint {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group3()[3]),
                    (self.group0()[1] * other.group3()[3]),
                    (self.group0()[2] * other.group3()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for FlatPoint {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for FlatPoint {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for FlatPoint {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group2()[3]),
                    (self.group0()[1] * other.group2()[3]),
                    (self.group0()[2] * other.group2()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOnOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl InfixWedge for FlatPointAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for FlatPointAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLine> for FlatPointAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for FlatPointAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for FlatPointAtInfinity {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for FlatPointAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for FlatPointAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for FlatPointAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for FlatPointAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for FlatPointAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       10       24        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group7()[2]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for FlatPointAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<Origin> for FlatPointAtInfinity {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for FlatPointAtInfinity {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for FlatPointAtInfinity {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Scalar> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for FlatPointAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for FlatPointAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for FlatPointAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for FlatPointAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for FlatPointAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[2] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl InfixWedge for Flector {}
impl Wedge<AntiCircleOnOrigin> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlane> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) * -1.0),
                    ((self.group0()[3] * other.group0()[1]) * -1.0),
                    ((self.group0()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       37        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       25       38        0
    //  no simd       25       40        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                    - (self.group0()[3] * other.group6()[3])
                    - (self.group0()[2] * other.group7()[2])
                    - (self.group0()[0] * other.group7()[0])
                    - (self.group0()[1] * other.group7()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group1()[0] * other.group0()[0]) + (self.group0()[3] * other.group5()[0]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group5()[1]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                ((self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group5()[2]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
            ]),
            // e3215
            ((self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Flector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Flector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for Flector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<RoundPoint> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) * -1.0),
                    ((self.group0()[3] * other.group0()[1]) * -1.0),
                    ((self.group0()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Flector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<Scalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group3()[2]) + (self.group1()[1] * other.group3()[1]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Flector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group0()[3] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Flector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for Flector {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group2()[2]) + (self.group1()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e4235, e4315, e4125, e3215
            ((self.group1() * Simd32x4::from(other.group0()[0]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOnOrigin> for Flector {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl InfixWedge for FlectorAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
            ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
            (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLine> for FlectorAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for FlectorAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       10        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for FlectorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for FlectorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for FlectorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for FlectorAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       24        0
    //  no simd       12       26        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group7()[2]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
            ]),
            // e3215
            ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for FlectorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       10        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<Scalar> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for FlectorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                ((self.group0()[3] * other.group3()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtOrigin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for FlectorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for FlectorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[2] * other.group0()[0]),
            ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOnOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for FlectorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))])),
        );
    }
}
impl InfixWedge for FlectorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiDualNum> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatOrigin> for FlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for FlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[0] * -1.0),
            (self.group0()[0] * other.group1()[1] * -1.0),
            (self.group0()[0] * other.group1()[2] * -1.0),
            ((self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[3] * -1.0),
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLine> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<AntiPlane> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[1] * -1.0),
            (self.group0()[0] * other.group1()[2] * -1.0),
            (self.group0()[0] * other.group1()[3] * -1.0),
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<Circle> for FlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group1()[3] * -1.0));
    }
}
impl Wedge<CircleAtInfinity> for FlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlectorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Dipole> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl Wedge<MultiVector> for FlectorOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       17        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group5()[1]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group5()[2]) + (self.group0()[3] * other.group0()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Scalar> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group3()[0] * -1.0),
            (self.group0()[0] * other.group3()[1] * -1.0),
            (self.group0()[0] * other.group3()[2] * -1.0),
            ((self.group0()[3] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[3] * -1.0),
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[0] * -1.0),
            (self.group0()[0] * other.group2()[1] * -1.0),
            (self.group0()[0] * other.group2()[2] * -1.0),
            ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group2()[0])),
        ]));
    }
}
impl Wedge<VersorOdd> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl InfixWedge for Horizon {}
impl Wedge<AntiDualNum> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[1]));
    }
}
impl Wedge<AntiMotor> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<AntiSphereOnOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group1()[0]));
    }
}
impl Wedge<MultiVector> for Horizon {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e3215] * other.group1()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from(0.0),
            // e3215
            (self[e3215] * other.group0()[0]),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<Origin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other[e4]));
    }
}
impl Wedge<RoundPoint> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<RoundPointAtOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group0()[0]));
    }
}
impl Wedge<Scalar> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other[scalar]));
    }
}
impl Wedge<VersorEven> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group3()[3]));
    }
}
impl Wedge<VersorEvenAligningOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenAtOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<VersorEvenOnOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Horizon {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group2()[3]));
    }
}
impl Wedge<VersorOdd> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<VersorOddAtInfinity> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[0]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Horizon {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[3]));
    }
}
impl InfixWedge for Infinity {}
impl Wedge<AntiCircleOnOrigin> for Infinity {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Infinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiDualNum> for Infinity {
    type Output = Infinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other.group0()[1]));
    }
}
impl Wedge<AntiFlatOrigin> for Infinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e5] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Infinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e5] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for Infinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Infinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self[e5]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiLine> for Infinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for Infinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for Infinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiMotorOnOrigin> for Infinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiPlane> for Infinity {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Infinity {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<AntiSphereOnOrigin> for Infinity {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Infinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Infinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e5]) * swizzle!(other.group1(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for Infinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleAtInfinity> for Infinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e5] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOnOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for Infinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Dipole> for Infinity {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Infinity {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Infinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Infinity {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<DipoleOnOrigin> for Infinity {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Infinity {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group1()),
        );
    }
}
impl Wedge<MultiVector> for Infinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       15        0
    //    simd3        0        3        0
    // Totals...
    // yes simd        0       18        0
    //  no simd        0       24        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e5] * other.group9()[0])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self[e5] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self[e5] * other.group1()[3] * -1.0)]),
            // e15, e25, e35
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self[e5] * other.group3()[0]), (self[e5] * other.group3()[1]), (self[e5] * other.group3()[2]), 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([0.0, (self[e5] * other.group7()[0] * -1.0), (self[e5] * other.group7()[1] * -1.0), (self[e5] * other.group7()[2] * -1.0)]),
            // e3215
            (self[e5] * other.group6()[3] * -1.0),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for Infinity {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for Infinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Infinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e5]) * swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for Infinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self[e5]) * other.group0()));
    }
}
impl Wedge<Origin> for Infinity {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e5] * other[e4] * -1.0));
    }
}
impl Wedge<RoundPoint> for Infinity {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<RoundPointAtOrigin> for Infinity {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e5] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Scalar> for Infinity {
    type Output = Infinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other[scalar]));
    }
}
impl Wedge<Sphere> for Infinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other[e4315]));
    }
}
impl Wedge<SphereAtOrigin> for Infinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for Infinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other.group0()[3]));
    }
}
impl Wedge<VersorEven> for Infinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e5]) * other.group3() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Infinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for Infinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Infinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e5]) * swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for Infinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Infinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e5]) * other.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorOdd> for Infinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Infinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for Infinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Infinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for Infinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Infinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl InfixWedge for Line {}
impl Wedge<AntiCircleOnOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) * -1.0),
                    ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<AntiLine> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlane> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Dipole> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       13       24        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group1()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[3]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Line {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullVersorOddAtOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for Line {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Line {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<Scalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group3()[3]) - (self.group0()[1] * other.group3()[2])),
                    (-(self.group1()[1] * other.group3()[3]) - (self.group0()[2] * other.group3()[0])),
                    (-(self.group1()[2] * other.group3()[3]) - (self.group0()[0] * other.group3()[1])),
                    ((self.group1()[0] * other.group3()[0]) + (self.group1()[1] * other.group3()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Line {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenAtInfinity> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Line {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenOnOrigin> for Line {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Line {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group1()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group1()[2] * other.group2()[3]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for Line {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for LineAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for LineAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for LineAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for LineAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for LineAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for LineAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for LineAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for LineAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for LineAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3] * -1.0),
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[3] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for LineAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for LineAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[0] * -1.0),
            (self.group0()[1] * other.group1()[0] * -1.0),
            (self.group0()[2] * other.group1()[0] * -1.0),
            ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
        ]));
    }
}
impl Wedge<Dipole> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for LineAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       15        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e3215
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullVersorOddAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for LineAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3] * -1.0),
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[3] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<RoundPointAtOrigin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<Scalar> for LineAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for LineAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group3()[3] * -1.0),
            (self.group0()[1] * other.group3()[3] * -1.0),
            (self.group0()[2] * other.group3()[3] * -1.0),
            ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAligningOrigin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenAtInfinity> for LineAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenOnOrigin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for LineAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[3] * -1.0),
            (self.group0()[1] * other.group2()[3] * -1.0),
            (self.group0()[2] * other.group2()[3] * -1.0),
            ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorOdd> for LineAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for LineAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<VersorOddAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for LineAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for LineOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for LineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for LineOnOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLine> for LineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for LineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for LineOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for LineOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for LineOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[3], other.group1()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group1()[1]]))),
        );
    }
}
impl Wedge<Dipole> for LineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for LineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for LineOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<MultiVector> for LineOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<Scalar> for LineOnOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]))),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]))),
        );
    }
}
impl Wedge<VersorOdd> for LineOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for LineOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[2] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for LineOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl InfixWedge for Motor {}
impl Wedge<AntiCircleOnOrigin> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Motor {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiDualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for Motor {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Motor {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       16        0
    //  no simd        6       19        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) * -1.0),
                    (-(self.group1()[3] * other.group0()[3]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]))])),
        );
    }
}
impl Wedge<AntiLine> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2       15        0
    //  no simd        5       18        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        8       20        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[3]) * swizzle!(other.group1(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * other.group0())
                + (swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for Motor {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Motor {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleAtInfinity> for Motor {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for Motor {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOnOrigin> for Motor {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for Motor {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Dipole> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       33        0
    //    simd3        1        4        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       25       45        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group9()[0]) - (self.group1()[2] * other.group3()[2]) - (self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group1()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group1()[3] * -1.0)]),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group3()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(self.group1()[3]) * other.group5())),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group1()[3] * other.group7()[0]) - (self.group1()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[3] * other.group7()[1]) - (self.group1()[1] * other.group1()[3]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[3] * other.group7()[2]) - (self.group1()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])),
            ]),
            // e3215
            (-(self.group1()[3] * other.group6()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Motor {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for Motor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Motor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[3] * -1.0),
            (-(self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
            (-(self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for Motor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        8       20        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Motor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Scalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for Motor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e4315]));
    }
}
impl Wedge<SphereAtOrigin> for Motor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for Motor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl Wedge<VersorEven> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[3]) * other.group3() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group3()[3]) - (self.group0()[1] * other.group3()[2])),
                    (-(self.group1()[1] * other.group3()[3]) - (self.group0()[2] * other.group3()[0])),
                    (-(self.group1()[2] * other.group3()[3]) - (self.group0()[0] * other.group3()[1])),
                    ((self.group1()[0] * other.group3()[0]) + (self.group1()[1] * other.group3()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Motor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[3] * -1.0),
            (-(self.group1()[0] * other.group1()[3]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group1()[3]) - (self.group1()[3] * other.group0()[1])),
            (-(self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       16        0
    //  no simd        6       19        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    (-(self.group1()[3] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Motor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[3] * -1.0),
            (-(self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
            (-(self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for Motor {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[3] * -1.0),
            (-(self.group1()[0] * other.group1()[3]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group1()[3]) - (self.group1()[3] * other.group0()[1])),
            (-(self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[3]) * other.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * other.group0())
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group1()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group1()[2] * other.group2()[3]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group1()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group1()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOnOrigin> for Motor {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl InfixWedge for MotorAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for MotorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for MotorAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiDualNum> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatOrigin> for MotorAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for MotorAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0] * -1.0),
            (self.group0()[3] * other.group1()[1] * -1.0),
            (self.group0()[3] * other.group1()[2] * -1.0),
            (-(self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            (self.group0()[3] * other.group0()[3] * -1.0),
            (-(self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for MotorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for MotorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for MotorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       17        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for MotorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for MotorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        6       21        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group1(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (-(self.group0() * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) * -1.0),
                    ((self.group0()[3] * other.group0()[1]) * -1.0),
                    ((self.group0()[3] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for MotorAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<CircleAligningOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleAtInfinity> for MotorAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOnOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for MotorAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Dipole> for MotorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for MotorAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for MotorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MultiVector> for MotorAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd3        1        4        0
    // Totals...
    // yes simd       10       24        0
    //  no simd       12       32        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group9()[0]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3] * -1.0)]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group3()[0]),
                (self.group0()[3] * other.group3()[1]),
                (self.group0()[3] * other.group3()[2]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group7()[0])),
                (-(self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group7()[1])),
                (-(self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group7()[2])),
            ]),
            // e3215
            (-(self.group0()[3] * other.group6()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for MotorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[3] * -1.0),
            (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
            (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for MotorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       17        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Scalar> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for MotorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e4315]));
    }
}
impl Wedge<SphereAtOrigin> for MotorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for MotorAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<VersorEven> for MotorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        6       21        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group3() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (-(self.group0() * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) * -1.0),
                    ((self.group0()[3] * other.group0()[1]) * -1.0),
                    ((self.group0()[3] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[3] * -1.0),
            (-(self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group0()[0])),
            (-(self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group0()[1])),
            (-(self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            (self.group0()[3] * other.group0()[3] * -1.0),
            (-(self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenAtOrigin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[3] * -1.0),
            (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
            (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOnOrigin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[3] * -1.0),
            (-(self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group0()[0])),
            (-(self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group0()[1])),
            (-(self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for MotorAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        6       21        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (-(self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) * -1.0),
                    ((self.group0()[3] * other.group0()[1]) * -1.0),
                    ((self.group0()[3] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for MotorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (self.group0()[3] * other.group0()[0]),
        ]));
    }
}
impl Wedge<VersorOddAtOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOnOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for MotorAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl InfixWedge for MotorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for MotorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
            ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
            (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLine> for MotorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for MotorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[2])),
            ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<Dipole> for MotorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for MotorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for MotorOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<MultiVector> for MotorOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Scalar> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
            ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
            (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
            ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
            (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
        ]));
    }
}
impl Wedge<VersorOdd> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[2] * other.group0()[0]),
            ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl InfixWedge for MultiVector {}
impl Wedge<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd3        2        5        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       26       48        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group6()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1] * other.group0()[0]),
                (self[e1] * other.group0()[1]),
                (self[e1] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * other.group1()) - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e235, e315, e125
            (Simd32x3::from(self[e1]) * other.group1()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
                ((self.group4()[2] * other.group0()[1]) + (self.group3()[3] * other.group1()[0]) - (self.group4()[1] * other.group0()[2])),
                (-(self.group4()[2] * other.group0()[0]) + (self.group3()[3] * other.group1()[1]) + (self.group4()[0] * other.group0()[2])),
                ((self.group4()[1] * other.group0()[0]) + (self.group3()[3] * other.group1()[2]) - (self.group4()[0] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group4()[2] * other.group1()[2]) - (self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       18        0
    //  no simd        6       20        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (self[e1] * other.group0()[0] * -1.0),
                (self[e1] * other.group0()[1] * -1.0),
                (self[e1] * other.group0()[2] * -1.0),
            ]),
            // e3215
            (self[e1] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        2       34        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[1]),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e5
            (self[e1] * other.group0()[1]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group5() * Simd32x3::from(other.group0()[1])),
            // e415, e425, e435, e321
            (self.group6() * Simd32x4::from(other.group0()[1])),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group8() * Simd32x3::from(other.group0()[1])),
            // e1234, e4235, e4315, e4125
            (self.group9() * Simd32x4::from(other.group0()[1])),
            // e3215
            ((self.group0()[0] * other.group0()[0]) + (self[e45] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group3()[3] * other[e321] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e321])]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([(self.group1()[3] * other[e321]), 0.0, 0.0, 0.0]),
            // e3215
            (self[e1] * other[e321] * -1.0),
        );
    }
}
impl Wedge<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        6       16        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self.group1()[3]) * swizzle!(other.group0(), 3, 0, 1, 2)),
            // e3215
            (-(self[e1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       46        0
    //    simd3        4        6        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       33       56        0
    //  no simd       50       80        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[3] * other.group1()[2]) + (self.group9()[2] * other.group1()[1]) + (self.group9()[1] * other.group1()[0]) + (self.group9()[0] * other.group1()[3])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e5
            (self.group0()[0] * other.group1()[3]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group1()),
            // e15, e25, e35
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + Simd32x4::from([
                    (self.group3()[0] * other.group1()[3]),
                    (self.group3()[1] * other.group1()[3]),
                    (self.group3()[2] * other.group1()[3]),
                    (-(self.group5()[1] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group5()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group3()[0] * other.group1()[2]) + (self.group3()[2] * other.group1()[0])),
                ((self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125
            ((self.group5() * Simd32x3::from(other.group1()[3]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group1(), 2, 2, 0, 1) * Simd32x4::from([self.group7()[2], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + (Simd32x4::from(self.group1()[3]) * swizzle!(other.group0(), 3, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group7()[1] * other.group1()[1]) - (self.group7()[0] * other.group1()[0])),
                    ((self.group7()[0] * other.group1()[3]) + (self.group6()[2] * other.group1()[1])),
                    ((self.group7()[1] * other.group1()[3]) + (self.group6()[0] * other.group1()[2])),
                    ((self.group7()[2] * other.group1()[3]) + (self.group6()[1] * other.group1()[0])),
                ])),
            // e3215
            ((self.group8()[2] * other.group1()[2]) + (self.group8()[1] * other.group1()[1]) + (self.group8()[0] * other.group1()[0]) + (self.group6()[3] * other.group1()[3])
                - (self[e1] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[0] * other.group0()[0])
                - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       38        0
    //    simd3        1        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       44        0
    //  no simd       27       58        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[3] * other.group0()[3]) + (self.group9()[2] * other.group0()[2]) - (self.group3()[3] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (self.group1()[3] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group3()[3] * other.group0()[1] * -1.0),
                (self.group3()[3] * other.group0()[2] * -1.0),
                (self.group3()[3] * other.group0()[3] * -1.0),
                (-(self.group5()[2] * other.group0()[3]) - (self.group5()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[0])
                    - (self.group5()[0] * other.group0()[1])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group3()[1] * other.group0()[3]) - (self.group3()[2] * other.group0()[2])),
                (-(self.group3()[0] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (-(swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 3, 3, 1, 2) * Simd32x4::from([self.group7()[2], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + (swizzle!(other.group0(), 0, 2, 3, 1) * Simd32x4::from([self.group1()[3], self.group6()[2], self.group6()[0], self.group6()[1]]))
                + Simd32x4::from([(-(self.group7()[1] * other.group0()[2]) - (self.group7()[0] * other.group0()[1])), 0.0, 0.0, 0.0])),
            // e3215
            ((self.group8()[2] * other.group0()[3]) + (self.group8()[1] * other.group0()[2]) - (self[e1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        2        6        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       26       48        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[2] * other.group0()[2])
                    - (self.group6()[0] * other.group0()[0])
                    - (self.group6()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e235, e315, e125
            ((Simd32x3::from(self[e1]) * other.group0()) + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                    ((self.group3()[3] * other.group0()[0]) + (self.group3()[1] * other.group1()[2])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group3()[2] * other.group1()[0])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group3()[0] * other.group1()[1])),
                ])),
            // e3215
            (-(self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                - (self.group4()[2] * other.group0()[2])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd3        0        3        0
    // Totals...
    // yes simd        8       18        0
    //  no simd        8       24        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group6()[2] * other.group0()[2]) - (self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e1]) * other.group0()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
            ]),
            // e3215
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       38        0
    //    simd3        5        8        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       31       51        0
    //  no simd       50       82        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[3]),
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[2] * other.group0()[2])
                    - (self.group6()[1] * other.group0()[1])
                    - (self.group6()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group4() * Simd32x3::from(other.group0()[3]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e415, e425, e435, e321
            ((self.group6() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group1()[0]),
                    (self.group1()[3] * other.group1()[1]),
                    (self.group1()[3] * other.group1()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group7() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            ((self.group8() * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                    (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                    ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                ])),
            // e1234, e4235, e4315, e4125
            ((self.group9() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                    ((self.group3()[3] * other.group0()[0]) + (self.group3()[1] * other.group1()[2])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group3()[2] * other.group1()[0])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group3()[0] * other.group1()[1])),
                ])),
            // e3215
            ((self[e45] * other.group0()[3])
                - (self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                - (self.group4()[2] * other.group0()[2])
                - (self.group4()[1] * other.group0()[1])
                + (self.group0()[0] * other.group1()[3])
                - (self.group4()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       23        0
    //    simd3        3        7        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       15       33        0
    //  no simd       24       56        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[3]),
                (-(self.group6()[2] * other.group0()[2]) - (self.group6()[1] * other.group0()[1]) + (self.group0()[1] * other.group0()[3])
                    - (self.group6()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group6()[0] * other.group0()[3]),
                (self.group6()[1] * other.group0()[3]),
                (self.group6()[2] * other.group0()[3]),
                ((self.group6()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group7() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            ((Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group8() * Simd32x3::from(other.group0()[3]))),
            // e1234, e4235, e4315, e4125
            ((swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from([self.group9()[0], self.group3()[3], self.group3()[3], self.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                    (self.group9()[1] * other.group0()[3]),
                    (self.group9()[2] * other.group0()[3]),
                    (self.group9()[3] * other.group0()[3]),
                ])),
            // e3215
            ((self[e45] * other.group0()[3]) - (self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       37        0
    //    simd3        3        5        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       22       45        0
    //  no simd       34       64        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[3] * other.group0()[2]) + (self.group9()[2] * other.group0()[1]) + (self.group9()[0] * other.group0()[3]) + (self.group9()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e5
            (self.group0()[0] * other.group0()[3]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group0()),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + Simd32x4::from([
                    (self.group3()[0] * other.group0()[3]),
                    (self.group3()[1] * other.group0()[3]),
                    (self.group3()[2] * other.group0()[3]),
                    (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                ])),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125
            ((self.group5() * Simd32x3::from(other.group0()[3])) - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group7()[2], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
                    ((self.group7()[0] * other.group0()[3]) + (self.group6()[2] * other.group0()[1])),
                    ((self.group7()[1] * other.group0()[3]) + (self.group6()[0] * other.group0()[2])),
                    ((self.group7()[2] * other.group0()[3]) + (self.group6()[1] * other.group0()[0])),
                ])),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group6()[3] * other.group0()[3]) + (self.group8()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       30        0
    //    simd3        3        8        0
    // Totals...
    // yes simd       14       38        0
    //  no simd       20       54        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[3] * other.group0()[2]) + (self.group9()[1] * other.group0()[0]) + (self.group9()[2] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e1]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0] * -1.0),
                (self.group3()[3] * other.group0()[1] * -1.0),
                (self.group3()[3] * other.group0()[2] * -1.0),
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
            ]),
            // e423, e431, e412
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))),
            // e235, e315, e125
            (-(swizzle!(self.group4(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group4(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
                (-(self.group6()[1] * other.group0()[2]) + (self.group6()[2] * other.group0()[1])),
                ((self.group6()[0] * other.group0()[2]) - (self.group6()[2] * other.group0()[0])),
                (-(self.group6()[0] * other.group0()[1]) + (self.group6()[1] * other.group0()[0])),
            ]),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiScalar> for MultiVector {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd3        2        5        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       21       46        0
    //  no simd       34       68        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group0()[3]) + (self.group9()[3] * other.group0()[2]) + (self.group9()[1] * other.group0()[0]) + (self.group9()[2] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self[e1] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + Simd32x4::from([
                    (self.group4()[0] * other.group0()[3]),
                    (self.group4()[1] * other.group0()[3]),
                    (self.group4()[2] * other.group0()[3]),
                    (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                ])),
            // e423, e431, e412
            ((self.group5() * Simd32x3::from(other.group0()[3]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                    (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                    ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                ])),
            // e235, e315, e125
            (-(swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 3, 3, 3) * Simd32x4::from([self.group7()[2], self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group7()[1], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + Simd32x4::from([
                    (-(self.group6()[3] * other.group0()[3]) - (self.group7()[0] * other.group0()[0])),
                    (self.group6()[2] * other.group0()[1]),
                    (self.group6()[0] * other.group0()[2]),
                    (self.group6()[1] * other.group0()[0]),
                ])),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       41        0
    //    simd3        4        7        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       30       53        0
    //  no simd       50       82        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[3]),
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group0()[3])
                    + (self[e1] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group3()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[3])),
                (self.group3()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e415, e425, e435, e321
            ((other.group0() * Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[3]]))
                + Simd32x4::from([
                    (self.group6()[0] * other.group0()[3]),
                    (self.group6()[1] * other.group0()[3]),
                    (self.group6()[2] * other.group0()[3]),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((self.group7() * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group8() * Simd32x3::from(other.group0()[3]))),
            // e1234, e4235, e4315, e4125
            ((self.group9() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                + (swizzle!(other.group1(), 3, 0, 1, 2) * Simd32x4::from([self.group0()[0], self.group3()[3], self.group3()[3], self.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group3()[2] * other.group1()[2])
                        - (self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])),
                    (self.group4()[2] * other.group0()[1]),
                    (self.group4()[0] * other.group0()[2]),
                    (self.group4()[1] * other.group0()[0]),
                ])),
            // e3215
            ((self[e45] * other.group0()[3]) - (self.group4()[2] * other.group1()[2]) - (self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       50        0
    //    simd3        3        6        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       35       60        0
    //  no simd       50       84        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group1()[0]) + (self.group9()[3] * other.group1()[3]) + (self.group9()[2] * other.group1()[2]) + (self.group9()[1] * other.group1()[1])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group1(), 1, 2, 3, 0)),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[0]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group1()[3])),
                (self[e1] * other.group1()[0] * -1.0),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[3]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[2])),
                (-(self.group1()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 1, 2, 3, 3) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + Simd32x4::from([
                    (self.group4()[0] * other.group1()[0]),
                    (self.group4()[1] * other.group1()[0]),
                    (self.group4()[2] * other.group1()[0]),
                    (-(self.group5()[1] * other.group1()[2]) + (self.group0()[0] * other.group0()[3]) - (self.group5()[0] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((self.group5() * Simd32x3::from(other.group1()[0]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[2] * other.group1()[2]) + (self.group3()[1] * other.group1()[3])),
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[0] * other.group1()[3])),
                    (-(self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[2])),
                ])),
            // e235, e315, e125
            (-(swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[3], other.group1()[1], other.group1()[2]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group1(), 3, 0, 0, 0) * Simd32x4::from([self.group7()[2], self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(other.group1(), 2, 3, 1, 2) * Simd32x4::from([self.group7()[1], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group1()[1]) - (self.group6()[3] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[3])
                        + (self.group1()[2] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[1])),
                    ((self.group6()[2] * other.group1()[2]) - (self[e1] * other.group0()[0])),
                    (-(self[e1] * other.group0()[1]) + (self.group6()[0] * other.group1()[3])),
                    ((self.group6()[1] * other.group1()[1]) - (self[e1] * other.group0()[2])),
                ])),
            // e3215
            ((self.group8()[2] * other.group1()[3]) + (self.group8()[1] * other.group1()[2]) - (self[e1] * other.group0()[3]) + (self.group8()[0] * other.group1()[1])),
        );
    }
}
impl Wedge<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       22        0
    //    simd3        0        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       27        0
    //  no simd       24       40        0
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group1()[3])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group2()),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (swizzle!(self.group1(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                    (-(self[e1] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    (-(self[e1] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    (-(self[e1] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e3215
            (-(self[e1] * other.group1()[3]) - (self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       22        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       21       36        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group2()),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (swizzle!(self.group1(), 0, 2, 0, 1) * Simd32x4::from([other.group0()[0], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (self.group1()[1] * other.group0()[1]),
                    (-(self[e1] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    (-(self[e1] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    (-(self[e1] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e3215
            (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       21        0
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       23        0
    //  no simd       15       28        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (self.group1()[3] * other.group0()[3]),
                ((self.group1()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e3215
            (-(self[e1] * other.group0()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       12       27        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                    ((self[e1] * other.group0()[0]) * -1.0),
                    ((self[e1] * other.group0()[1]) * -1.0),
                    ((self[e1] * other.group0()[2]) * -1.0),
                ])),
            // e3215
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       13       24        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                    (-(self[e1] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    (-(self[e1] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    (-(self[e1] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       21        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       12       24        0
    //  no simd       15       31        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                    ((self[e1] * other.group0()[0]) * -1.0),
                    ((self[e1] * other.group0()[1]) * -1.0),
                    ((self[e1] * other.group0()[2]) * -1.0),
                ])),
            // e3215
            (-(self[e1] * other.group0()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       44        0
    //    simd3        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       40       55        0
    //  no simd       54       80        0
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[3] * other.group1()[3])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group6()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e1] * other.group0()[0]) + (self.group1()[3] * other.group2()[0])),
                    ((self[e1] * other.group0()[1]) + (self.group1()[3] * other.group2()[1])),
                    ((self[e1] * other.group0()[2]) + (self.group1()[3] * other.group2()[2])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e235, e315, e125
            ((Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group5()[2] * other.group0()[2])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group3()[1] * other.group1()[1])),
                    ((self.group5()[0] * other.group1()[3]) + (self.group4()[2] * other.group0()[1]) - (self.group4()[1] * other.group0()[2])
                        + (self.group3()[3] * other.group1()[0])
                        + (self.group3()[1] * other.group2()[2])),
                    ((self.group5()[1] * other.group1()[3]) - (self.group4()[2] * other.group0()[0])
                        + (self.group4()[0] * other.group0()[2])
                        + (self.group3()[3] * other.group1()[1])
                        + (self.group3()[2] * other.group2()[0])),
                    ((self.group5()[2] * other.group1()[3]) + (self.group4()[1] * other.group0()[0]) - (self.group4()[0] * other.group0()[1])
                        + (self.group3()[3] * other.group1()[2])
                        + (self.group3()[0] * other.group2()[1])),
                ])),
            // e3215
            (-(self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       39        0
    //    simd3        1        3        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       29       44        0
    //  no simd       34       56        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group6()[3] * other.group0()[3])
                    - (self.group7()[0] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self[e1] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self[e1] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self[e1] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                    ((self.group5()[0] * other.group0()[3]) + (self.group4()[2] * other.group0()[1]) + (self.group3()[1] * other.group1()[2])
                        - (self.group3()[2] * other.group1()[1])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group4()[0] * other.group0()[2]) - (self.group3()[0] * other.group1()[2])
                        + (self.group3()[2] * other.group1()[0])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group4()[1] * other.group0()[0]) + (self.group3()[0] * other.group1()[1])
                        - (self.group3()[1] * other.group1()[0])),
                ])),
            // e3215
            (-(self.group5()[2] * other.group1()[2]) - (self.group5()[0] * other.group1()[0]) - (self.group5()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       30        0
    //    simd3        2        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       33       56        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[3])
                    - (self.group6()[2] * other.group0()[2])
                    - (self.group6()[0] * other.group0()[0])
                    - (self.group6()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[3] * other.group1()[0]),
                    (self.group1()[3] * other.group1()[1]),
                    (self.group1()[3] * other.group1()[2]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            ((Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                    ((self.group5()[0] * other.group0()[3]) + (self.group3()[3] * other.group0()[0]) + (self.group3()[1] * other.group1()[2])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group3()[3] * other.group0()[1]) + (self.group3()[2] * other.group1()[0])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group3()[3] * other.group0()[2]) + (self.group3()[0] * other.group1()[1])),
                ])),
            // e3215
            (-(self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                - (self.group4()[2] * other.group0()[2])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       33        0
    //    simd3        2        5        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       27       48        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self[e1] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[1]) + (self[e1] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[2]) + (self[e1] * other.group0()[2])),
                0.0,
            ]),
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                ((self.group4()[2] * other.group0()[1]) - (self.group4()[1] * other.group0()[2]) + (self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group4()[2] * other.group0()[0]) + (self.group4()[0] * other.group0()[2]) - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[0])),
                ((self.group4()[1] * other.group0()[0]) - (self.group4()[0] * other.group0()[1]) + (self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group1()[2]) - (self.group5()[0] * other.group1()[0]) - (self.group5()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       17       32        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group6()[3] * other.group0()[3])
                    - (self.group8()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self[e1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self[e1] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self[e1] * other.group0()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                    ((self.group5()[0] * other.group0()[3]) + (self.group4()[2] * other.group0()[1])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group4()[0] * other.group0()[2])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group4()[1] * other.group0()[0])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       44        0
    //    simd3        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       36       53        0
    //  no simd       47       72        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group6()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self[e1] * other.group0()[0])),
                ((self.group1()[3] * other.group2()[1]) + (self[e1] * other.group0()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self[e1] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * other.group1()) - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e235, e315, e125
            ((Simd32x3::from(self[e1]) * other.group1()) + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group5()[2] * other.group0()[2])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group3()[1] * other.group1()[1])),
                    ((self.group4()[2] * other.group0()[1]) - (self.group4()[1] * other.group0()[2])
                        + (self.group3()[3] * other.group1()[0])
                        + (self.group3()[1] * other.group2()[2])),
                    (-(self.group4()[2] * other.group0()[0])
                        + (self.group4()[0] * other.group0()[2])
                        + (self.group3()[3] * other.group1()[1])
                        + (self.group3()[2] * other.group2()[0])),
                    ((self.group4()[1] * other.group0()[0]) - (self.group4()[0] * other.group0()[1])
                        + (self.group3()[3] * other.group1()[2])
                        + (self.group3()[0] * other.group2()[1])),
                ])),
            // e3215
            (-(self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       11        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        1       13        0
    //  no simd        1       17        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[0] * other.group0()[1]) + (self.group9()[0] * other.group0()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[0])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group3()[0] * other.group0()[0]),
                (self.group3()[1] * other.group0()[0]),
                (self.group3()[2] * other.group0()[0]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group5() * Simd32x3::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group7()[0] * other.group0()[0]),
                (self.group7()[1] * other.group0()[0]),
                (self.group7()[2] * other.group0()[0]),
            ]),
            // e3215
            (self.group6()[3] * other.group0()[0]),
        );
    }
}
impl Wedge<FlatOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group6()[3] * other[e45] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e45])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e45] * -1.0),
                (self.group1()[1] * other[e45] * -1.0),
                (self.group1()[2] * other[e45] * -1.0),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([0.0, (self.group5()[0] * other[e45]), (self.group5()[1] * other[e45]), (self.group5()[2] * other[e45])]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       17       32        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group0()[2])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group6()[3] * other.group0()[3])
                    - (self.group7()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group5()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                ((self.group5()[1] * other.group0()[3]) - (self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group5()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       10       24        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       37        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       25       38        0
    //  no simd       25       40        0
    fn wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group0()[2])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group7()[0] * other.group0()[0])
                    - (self.group6()[3] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group5()[0] * other.group0()[3]) - (self.group3()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[0]) + (self.group3()[1] * other.group0()[2])),
                ((self.group5()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0]) + (self.group0()[0] * other.group1()[1]) - (self.group3()[0] * other.group0()[2])),
                ((self.group5()[2] * other.group0()[3]) - (self.group3()[1] * other.group0()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group3()[0] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[1] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group5()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       24        0
    //  no simd       12       26        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3])
                    - (self.group7()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group5()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       17        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group6()[3] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group0()[0] * other.group0()[1]) + (self.group5()[0] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Horizon> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other[e3215])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from(0.0),
            // e3215
            (self.group0()[0] * other[e3215]),
        );
    }
}
impl Wedge<Infinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       10        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        0       12        0
    //  no simd        0       16        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group9()[0] * other[e5])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other[e5]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other[e5])]),
            // e15, e25, e35
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self.group3()[0] * other[e5]), (self.group3()[1] * other[e5]), (self.group3()[2] * other[e5]), 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group5() * Simd32x3::from(other[e5])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([0.0, (self.group7()[0] * other[e5]), (self.group7()[1] * other[e5]), (self.group7()[2] * other[e5])]),
            // e3215
            (self.group6()[3] * other[e5]),
        );
    }
}
impl Wedge<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       13       24        0
    fn wedge(self, other: Line) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group1()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        4       12        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       32        0
    //    simd3        1        3        0
    // Totals...
    // yes simd       23       35        0
    //  no simd       25       41        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[0] * other.group1()[3])
                    - (self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[1] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other.group1()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group3()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group0()[2]) + (self.group3()[2] * other.group1()[3])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group5() * Simd32x3::from(other.group1()[3]))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group7()[0] * other.group1()[3]) + (self.group1()[3] * other.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group7()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group7()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e3215
            ((self.group6()[3] * other.group1()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<MotorAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       19        0
    //    simd3        1        3        0
    // Totals...
    // yes simd       10       22        0
    //  no simd       12       28        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[0] * other.group0()[3]) - (self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group3()[0] * other.group0()[3]),
                (self.group3()[1] * other.group0()[3]),
                (self.group3()[2] * other.group0()[3]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                ((self.group1()[3] * other.group0()[0]) + (self.group7()[0] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[1]) + (self.group7()[1] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[2]) + (self.group7()[2] * other.group0()[3])),
            ]),
            // e3215
            ((self.group6()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MotorOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])
                    - (self.group5()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       99      117        0
    //    simd3       16       18        0
    //    simd4       16       18        0
    // Totals...
    // yes simd      131      153        0
    //  no simd      211      243        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[0]),
                ((self[e45] * other.group1()[3])
                    + (self.group9()[3] * other.group1()[2])
                    + (self.group9()[2] * other.group1()[1])
                    + (self.group9()[1] * other.group1()[0])
                    + (self.group9()[0] * other[e1])
                    - (self.group8()[2] * other.group3()[2])
                    - (self.group8()[1] * other.group3()[1])
                    - (self.group8()[0] * other.group3()[0])
                    - (self.group7()[2] * other.group4()[2])
                    - (self.group7()[1] * other.group4()[1])
                    - (self.group7()[0] * other.group4()[0])
                    - (self.group6()[3] * other.group3()[3])
                    - (self.group6()[2] * other.group5()[2])
                    - (self.group6()[1] * other.group5()[1])
                    - (self.group6()[0] * other.group5()[0])
                    - (self.group5()[2] * other.group6()[2])
                    - (self.group5()[1] * other.group6()[1])
                    - (self.group5()[0] * other.group6()[0])
                    - (self.group4()[2] * other.group7()[2])
                    - (self.group4()[1] * other.group7()[1])
                    - (self.group4()[0] * other.group7()[0])
                    - (self.group3()[3] * other.group6()[3])
                    - (self.group3()[2] * other.group8()[2])
                    - (self.group3()[1] * other.group8()[1])
                    - (self.group3()[0] * other.group8()[0])
                    + (self[e1] * other.group9()[0])
                    + (self.group1()[3] * other[e45])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[1] * other.group9()[2])
                    + (self.group1()[0] * other.group9()[1])
                    + (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (self.group1() * Simd32x4::from(other.group0()[0]))),
            // e5
            ((self.group0()[0] * other[e1]) + (self[e1] * other.group0()[0])),
            // e41, e42, e43, e45
            ((self.group3() * Simd32x4::from(other.group0()[0]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]))
                + (Simd32x4::from(self.group0()[0]) * other.group3())
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]))),
            // e15, e25, e35
            ((self.group4() * Simd32x3::from(other.group0()[0])) - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group4())
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e23, e31, e12
            ((self.group5() * Simd32x3::from(other.group0()[0]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + Simd32x3::from([
                    (-(self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group1()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group1()[0]) + (self.group1()[0] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group6() * Simd32x4::from(other.group0()[0]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + (Simd32x4::from(self.group0()[0]) * other.group6())
                - (swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + Simd32x4::from([
                    ((self.group4()[0] * other.group1()[3]) + (self.group3()[0] * other[e1]) + (self[e1] * other.group3()[0]) + (self.group1()[3] * other.group4()[0])),
                    ((self.group4()[1] * other.group1()[3]) + (self.group3()[1] * other[e1]) + (self[e1] * other.group3()[1]) + (self.group1()[3] * other.group4()[1])),
                    ((self.group4()[2] * other.group1()[3]) + (self.group3()[2] * other[e1]) + (self[e1] * other.group3()[2]) + (self.group1()[3] * other.group4()[2])),
                    (-(self.group5()[1] * other.group1()[1])
                        - (self.group5()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group5()[1])
                        - (self.group1()[0] * other.group5()[0])),
                ])),
            // e423, e431, e412
            ((self.group7() * Simd32x3::from(other.group0()[0]))
                + (self.group5() * Simd32x3::from(other.group1()[3]))
                + (Simd32x3::from(self.group1()[3]) * other.group5())
                + (Simd32x3::from(self.group0()[0]) * other.group7())
                + Simd32x3::from([
                    (-(self.group3()[2] * other.group1()[1]) + (self.group3()[1] * other.group1()[2]) + (self.group1()[2] * other.group3()[1])
                        - (self.group1()[1] * other.group3()[2])),
                    ((self.group3()[2] * other.group1()[0]) - (self.group3()[0] * other.group1()[2]) - (self.group1()[2] * other.group3()[0])
                        + (self.group1()[0] * other.group3()[2])),
                    (-(self.group3()[1] * other.group1()[0]) + (self.group3()[0] * other.group1()[1]) + (self.group1()[1] * other.group3()[0])
                        - (self.group1()[0] * other.group3()[1])),
                ])),
            // e235, e315, e125
            ((self.group8() * Simd32x3::from(other.group0()[0]))
                + (self.group5() * Simd32x3::from(other[e1]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (Simd32x3::from(self[e1]) * other.group5())
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group8())
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e1234, e4235, e4315, e4125
            ((self.group9() * Simd32x4::from(other.group0()[0]))
                - (swizzle!(other.group1(), 2, 3, 3, 3) * Simd32x4::from([self.group7()[2], self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group7()[1], self.group6()[1], self.group6()[2], self.group6()[0]]))
                - (swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                - (swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(self.group1(), 2, 2, 0, 1) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                + (Simd32x4::from(self.group0()[0]) * other.group9())
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group1()[0])
                        - (self.group6()[3] * other.group1()[3])
                        - (self.group5()[1] * other.group3()[1])
                        - (self.group5()[0] * other.group3()[0])
                        - (self.group3()[1] * other.group5()[1])
                        - (self.group3()[0] * other.group5()[0])
                        + (self.group1()[1] * other.group7()[1])
                        + (self.group1()[0] * other.group7()[0])),
                    ((self.group7()[0] * other[e1])
                        + (self.group6()[2] * other.group1()[1])
                        + (self.group5()[0] * other.group3()[3])
                        + (self.group4()[2] * other.group3()[1])
                        + (self.group3()[3] * other.group5()[0])
                        + (self.group3()[1] * other.group4()[2])
                        - (self[e1] * other.group7()[0])
                        - (self.group1()[1] * other.group6()[2])),
                    ((self.group7()[1] * other[e1])
                        + (self.group6()[0] * other.group1()[2])
                        + (self.group5()[1] * other.group3()[3])
                        + (self.group4()[0] * other.group3()[2])
                        + (self.group3()[3] * other.group5()[1])
                        + (self.group3()[2] * other.group4()[0])
                        - (self[e1] * other.group7()[1])
                        - (self.group1()[2] * other.group6()[0])),
                    ((self.group7()[2] * other[e1])
                        + (self.group6()[1] * other.group1()[0])
                        + (self.group5()[2] * other.group3()[3])
                        + (self.group4()[1] * other.group3()[0])
                        + (self.group3()[3] * other.group5()[2])
                        + (self.group3()[0] * other.group4()[1])
                        - (self[e1] * other.group7()[2])
                        - (self.group1()[0] * other.group6()[1])),
                ])),
            // e3215
            ((self[e45] * other.group0()[0])
                + (self.group8()[2] * other.group1()[2])
                + (self.group8()[1] * other.group1()[1])
                + (self.group8()[0] * other.group1()[0])
                + (self.group6()[3] * other[e1])
                - (self.group5()[2] * other.group4()[2])
                - (self.group5()[1] * other.group4()[1])
                - (self.group5()[0] * other.group4()[0])
                - (self.group4()[2] * other.group5()[2])
                - (self.group4()[1] * other.group5()[1])
                - (self.group4()[0] * other.group5()[0])
                - (self[e1] * other.group6()[3])
                - (self.group1()[2] * other.group8()[2])
                - (self.group1()[1] * other.group8()[1])
                + (self.group0()[0] * other[e45])
                - (self.group1()[0] * other.group8()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       15        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (self[e1] * other.group0()[0] * -1.0),
                (self[e1] * other.group0()[1] * -1.0),
                (self[e1] * other.group0()[2] * -1.0),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       10       24        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self[e1] * other.group0()[0]), (self[e1] * other.group0()[1]), (self[e1] * other.group0()[2]), 0.0]),
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                (-(self.group4()[1] * other.group0()[2]) + (self.group4()[2] * other.group0()[1])),
                ((self.group4()[0] * other.group0()[2]) - (self.group4()[2] * other.group0()[0])),
                (-(self.group4()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e1] * other[e1234])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([(self.group0()[0] * other[e1234]), 0.0, 0.0, 0.0]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        7       22        0
    //  no simd       12       35        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group0()[3]) - (self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group4()[0] * other.group0()[3]),
                (self.group4()[1] * other.group0()[3]),
                (self.group4()[2] * other.group0()[3]),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from([self.group6()[3], self[e1], self[e1], self[e1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                    ((self.group8()[0] * other.group0()[3]) * -1.0),
                    ((self.group8()[1] * other.group0()[3]) * -1.0),
                    ((self.group8()[2] * other.group0()[3]) * -1.0),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       15       26        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2]) - (self.group8()[1] * other.group0()[1]) + (self[e1] * other.group0()[3]) - (self.group8()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self[e1] * other.group0()[0]), (self[e1] * other.group0()[1]), (self[e1] * other.group0()[2]), 0.0]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                + (swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group4()[2], self.group4()[0], self.group4()[1]]))
                + Simd32x4::from([(-(self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0])), 0.0, 0.0, 0.0])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Origin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd3        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       24        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e45] * other[e4])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self.group4()[0] * other[e4]), (self.group4()[1] * other[e4]), (self.group4()[2] * other[e4]), 0.0]),
            // e423, e431, e412
            (self.group5() * Simd32x3::from(other[e4])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group6()[3], self.group8()[0], self.group8()[1], self.group8()[2]]) * Simd32x4::from(-1.0)),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: Plane) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
            ]),
            // e3215
            (self.group0()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<PlaneOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       38        0
    //    simd3        4        6        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       29       50        0
    //  no simd       49       80        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group0()[3])
                    + (self.group9()[3] * other.group0()[2])
                    + (self.group9()[2] * other.group0()[1])
                    + (self.group9()[0] * other[e2])
                    + (self.group9()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e5
            (self.group0()[0] * other[e2]),
            // e41, e42, e43, e45
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))),
            // e15, e25, e35
            ((Simd32x3::from(other[e2]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + Simd32x4::from([
                    ((self.group4()[0] * other.group0()[3]) + (self.group3()[0] * other[e2])),
                    ((self.group4()[1] * other.group0()[3]) + (self.group3()[1] * other[e2])),
                    ((self.group4()[2] * other.group0()[3]) + (self.group3()[2] * other[e2])),
                    (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                ])),
            // e423, e431, e412
            ((self.group5() * Simd32x3::from(other.group0()[3]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                    (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                    ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                ])),
            // e235, e315, e125
            ((self.group5() * Simd32x3::from(other[e2])) - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 3, 3, 3) * Simd32x4::from([self.group7()[2], self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group7()[1], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + Simd32x4::from([
                    (-(self.group6()[3] * other.group0()[3]) - (self.group7()[0] * other.group0()[0])),
                    ((self.group7()[0] * other[e2]) + (self.group6()[2] * other.group0()[1])),
                    ((self.group7()[1] * other[e2]) + (self.group6()[0] * other.group0()[2])),
                    ((self.group7()[2] * other[e2]) + (self.group6()[1] * other.group0()[0])),
                ])),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group6()[3] * other[e2]) + (self.group8()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       27        0
    //    simd3        0        3        0
    // Totals...
    // yes simd        8       30        0
    //  no simd        8       36        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group9()[0] * other.group0()[1]) + (self[e45] * other.group0()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e5
            (self.group0()[0] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[3] * other.group0()[1]) - (self[e1] * other.group0()[0])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group3()[0] * other.group0()[1]) + (self.group4()[0] * other.group0()[0])),
                ((self.group3()[1] * other.group0()[1]) + (self.group4()[1] * other.group0()[0])),
                ((self.group3()[2] * other.group0()[1]) + (self.group4()[2] * other.group0()[0])),
                0.0,
            ]),
            // e423, e431, e412
            (self.group5() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group5() * Simd32x3::from(other.group0()[1])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (self.group6()[3] * other.group0()[0] * -1.0),
                ((self.group7()[0] * other.group0()[1]) - (self.group8()[0] * other.group0()[0])),
                ((self.group7()[1] * other.group0()[1]) - (self.group8()[1] * other.group0()[0])),
                ((self.group7()[2] * other.group0()[1]) - (self.group8()[2] * other.group0()[0])),
            ]),
            // e3215
            (self.group6()[3] * other.group0()[1]),
        );
    }
}
impl Wedge<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other[scalar])),
            // e5
            (self[e1] * other[scalar]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other[scalar])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other[scalar])),
            // e23, e31, e12
            (self.group5() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group6() * Simd32x4::from(other[scalar])),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group8() * Simd32x3::from(other[scalar])),
            // e1234, e4235, e4315, e4125
            (self.group9() * Simd32x4::from(other[scalar])),
            // e3215
            (self[e45] * other[scalar]),
        );
    }
}
impl Wedge<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd        4       10        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e1] * other[e4315])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other[e4315], other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e3215
            (self.group0()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group1()[3] * other.group0()[0]) + (self[e1] * other.group0()[1]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([(self.group0()[0] * other.group0()[1]), 0.0, 0.0, 0.0]),
            // e3215
            (self.group0()[0] * other.group0()[0]),
        );
    }
}
impl Wedge<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        5        0
    //  no simd        3        8        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 3, 0, 1, 2)),
            // e3215
            0.0,
        );
    }
}
impl Wedge<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       61        0
    //    simd3        6        8        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       57       78        0
    //  no simd       90      121        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group3()[3])
                    + (self.group9()[3] * other.group3()[2])
                    + (self.group9()[2] * other.group3()[1])
                    + (self.group9()[1] * other.group3()[0])
                    + (self.group9()[0] * other.group2()[3])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group1()[3])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[1] * other.group2()[1])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group3()[0] * other.group2()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group3()),
            // e5
            (self.group0()[0] * other.group2()[3]),
            // e41, e42, e43, e45
            (-(Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))),
            // e15, e25, e35
            ((Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group3()[2]) - (self.group1()[2] * other.group3()[1])),
                (-(self.group1()[0] * other.group3()[2]) + (self.group1()[2] * other.group3()[0])),
                ((self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group3()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + Simd32x4::from([
                    ((self.group4()[0] * other.group3()[3]) + (self.group3()[0] * other.group2()[3])),
                    ((self.group4()[1] * other.group3()[3]) + (self.group3()[1] * other.group2()[3])),
                    ((self.group4()[2] * other.group3()[3]) + (self.group3()[2] * other.group2()[3])),
                    (-(self.group5()[1] * other.group3()[1]) - (self.group5()[0] * other.group3()[0])),
                ])),
            // e423, e431, e412
            ((self.group5() * Simd32x3::from(other.group3()[3]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[2] * other.group3()[1]) + (self.group3()[1] * other.group3()[2])),
                    ((self.group3()[2] * other.group3()[0]) - (self.group3()[0] * other.group3()[2])),
                    (-(self.group3()[1] * other.group3()[0]) + (self.group3()[0] * other.group3()[1])),
                ])),
            // e235, e315, e125
            ((self.group5() * Simd32x3::from(other.group2()[3]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group3(), 2, 3, 3, 3) * Simd32x4::from([self.group7()[2], self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group7()[1], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (swizzle!(self.group1(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group3()[0]) - (self.group6()[3] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[1])),
                    ((self.group7()[0] * other.group2()[3]) + (self.group6()[2] * other.group3()[1]) - (self[e1] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    ((self.group7()[1] * other.group2()[3]) + (self.group6()[0] * other.group3()[2]) - (self[e1] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    ((self.group7()[2] * other.group2()[3]) + (self.group6()[1] * other.group3()[0]) - (self[e1] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e3215
            ((self.group8()[2] * other.group3()[2]) + (self.group8()[1] * other.group3()[1]) + (self.group8()[0] * other.group3()[0]) + (self.group6()[3] * other.group2()[3])
                - (self[e1] * other.group1()[3])
                - (self.group1()[2] * other.group2()[2])
                - (self.group1()[0] * other.group2()[0])
                - (self.group1()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       45        0
    //    simd3        2        5        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       32       53        0
    //  no simd       45       72        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group1()[3]) + (self.group9()[0] * other.group2()[3])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[1] * other.group2()[1])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group3()[0] * other.group2()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[3])]),
            // e5
            (self.group0()[0] * other.group2()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3] * -1.0),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
                ((self.group1()[3] * other.group2()[3]) - (self[e1] * other.group1()[3])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group4()[0] * other.group1()[3]) + (self.group0()[0] * other.group1()[0]) + (self.group3()[0] * other.group2()[3])),
                ((self.group4()[1] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group3()[1] * other.group2()[3])),
                ((self.group4()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[2]) + (self.group3()[2] * other.group2()[3])),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group1()[3]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])) + (self.group5() * Simd32x3::from(other.group2()[3]))),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group6()[3], self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group1(), 2, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (swizzle!(self.group1(), 0, 2, 0, 1) * Simd32x4::from([other.group0()[0], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (self.group1()[1] * other.group0()[1]),
                    ((self.group7()[0] * other.group2()[3]) - (self[e1] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    ((self.group7()[1] * other.group2()[3]) - (self[e1] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    ((self.group7()[2] * other.group2()[3]) - (self[e1] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e3215
            ((self.group6()[3] * other.group2()[3]) - (self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       55        0
    //    simd3        4        6        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       43       66        0
    //  no simd       63       93        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[3] * other.group0()[3]) + (self.group9()[2] * other.group0()[2]) + (self.group9()[1] * other.group0()[1]) + (self.group9()[0] * other.group2()[3])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group3()[3] * other.group1()[3])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[1] * other.group2()[1])
                    + (self.group0()[0] * other.group0()[0])
                    - (self.group3()[0] * other.group2()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
                0.0,
            ]),
            // e5
            (self.group0()[0] * other.group2()[3]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group2()[3]])),
            // e15, e25, e35
            ((Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 1, 2, 3, 3) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + Simd32x4::from([
                    (self.group3()[0] * other.group2()[3]),
                    (self.group3()[1] * other.group2()[3]),
                    (self.group3()[2] * other.group2()[3]),
                    (-(self.group5()[1] * other.group0()[2]) - (self.group5()[0] * other.group0()[1])),
                ])),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group3()[1] * other.group0()[3]) - (self.group3()[2] * other.group0()[2])),
                (-(self.group3()[0] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((self.group5() * Simd32x3::from(other.group2()[3]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 3, 3, 1, 2) * Simd32x4::from([self.group7()[2], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[1] * other.group0()[2]) - (self.group7()[0] * other.group0()[1])),
                    ((self.group7()[0] * other.group2()[3]) + (self.group6()[2] * other.group0()[2]) - (self.group1()[1] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group7()[1] * other.group2()[3]) + (self.group6()[0] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[0])),
                    ((self.group7()[2] * other.group2()[3]) + (self.group6()[1] * other.group0()[1]) - (self.group1()[0] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[0])),
                ])),
            // e3215
            ((self.group8()[2] * other.group0()[3]) + (self.group8()[1] * other.group0()[2]) + (self.group8()[0] * other.group0()[1]) + (self.group6()[3] * other.group2()[3])
                - (self[e1] * other.group1()[3])
                - (self.group1()[2] * other.group2()[2])
                - (self.group1()[0] * other.group2()[0])
                - (self.group1()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd3        2        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       22       43        0
    //  no simd       32       59        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group0()[3]) + (self.group9()[0] * other.group1()[3])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e5
            (self.group0()[0] * other.group1()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[3] * other.group1()[3]) - (self[e1] * other.group0()[3])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group3()[0] * other.group1()[3]) + (self.group4()[0] * other.group0()[3])),
                ((self.group3()[1] * other.group1()[3]) + (self.group4()[1] * other.group0()[3])),
                ((self.group3()[2] * other.group1()[3]) + (self.group4()[2] * other.group0()[3])),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group5() * Simd32x3::from(other.group1()[3]))),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group6()[3], self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group1(), 2, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                    ((self.group7()[0] * other.group1()[3]) - (self[e1] * other.group0()[0])),
                    ((self.group7()[1] * other.group1()[3]) - (self[e1] * other.group0()[1])),
                    ((self.group7()[2] * other.group1()[3]) - (self[e1] * other.group0()[2])),
                ])),
            // e3215
            ((self.group6()[3] * other.group1()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       23        0
    //    simd3        1        2        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       17       29        0
    //  no simd       25       45        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group1()[3])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[3])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group4()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group4()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group4()[2] * other.group1()[3])),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group1()[3]))),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group6()[3], self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group1(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                    (-(self[e1] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    (-(self[e1] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    (-(self[e1] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       56        0
    //    simd3        6        8        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       50       71        0
    //  no simd       77      108        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group2()[3])
                    + (self.group9()[3] * other.group2()[2])
                    + (self.group9()[2] * other.group2()[1])
                    + (self.group9()[1] * other.group2()[0])
                    + (self.group9()[0] * other.group1()[3])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group2()),
            // e5
            (self.group0()[0] * other.group1()[3]),
            // e41, e42, e43, e45
            (-(Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
            // e15, e25, e35
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[2]]))
                + Simd32x4::from([
                    ((self.group4()[0] * other.group2()[3]) + (self.group3()[0] * other.group1()[3])),
                    ((self.group4()[1] * other.group2()[3]) + (self.group3()[1] * other.group1()[3])),
                    ((self.group4()[2] * other.group2()[3]) + (self.group3()[2] * other.group1()[3])),
                    (-(self.group5()[1] * other.group2()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group5()[0] * other.group2()[0])),
                ])),
            // e423, e431, e412
            ((self.group5() * Simd32x3::from(other.group2()[3]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[2] * other.group2()[1]) + (self.group3()[1] * other.group2()[2])),
                    ((self.group3()[2] * other.group2()[0]) - (self.group3()[0] * other.group2()[2])),
                    (-(self.group3()[1] * other.group2()[0]) + (self.group3()[0] * other.group2()[1])),
                ])),
            // e235, e315, e125
            ((self.group5() * Simd32x3::from(other.group1()[3]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]))),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group2(), 2, 3, 3, 3) * Simd32x4::from([self.group7()[2], self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group7()[1], self.group6()[1], self.group6()[2], self.group6()[0]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group2()[0]) - (self.group6()[3] * other.group2()[3])
                        + (self.group1()[2] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[1])),
                    ((self.group7()[0] * other.group1()[3]) + (self.group6()[2] * other.group2()[1]) - (self[e1] * other.group0()[0])),
                    ((self.group7()[1] * other.group1()[3]) + (self.group6()[0] * other.group2()[2]) - (self[e1] * other.group0()[1])),
                    ((self.group7()[2] * other.group1()[3]) + (self.group6()[1] * other.group2()[0]) - (self[e1] * other.group0()[2])),
                ])),
            // e3215
            ((self.group8()[2] * other.group2()[2]) + (self.group8()[1] * other.group2()[1]) + (self.group8()[0] * other.group2()[0]) + (self.group6()[3] * other.group1()[3])
                - (self[e1] * other.group0()[3])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       62        0
    //    simd3        6        8        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       57       79        0
    //  no simd       90      122        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[3]),
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[3] * other.group1()[3])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[0] * other.group1()[0])
                    + (self[e1] * other.group2()[3])
                    + (self.group1()[3] * other.group3()[3])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group1()[0] * other.group3()[0])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (self.group3() * Simd32x4::from(other.group0()[3]))),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])) + (self.group4() * Simd32x3::from(other.group0()[3]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e415, e425, e435, e321
            ((self.group6() * Simd32x4::from(other.group0()[3])) - (swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e1] * other.group0()[0]) + (self.group1()[3] * other.group2()[0])),
                    ((self[e1] * other.group0()[1]) + (self.group1()[3] * other.group2()[1])),
                    ((self[e1] * other.group0()[2]) + (self.group1()[3] * other.group2()[2])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((self.group7() * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ])),
            // e235, e315, e125
            ((self.group8() * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])),
                    ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
            // e1234, e4235, e4315, e4125
            ((self.group9() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                - (swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[3], other.group3()[0], other.group3()[1], other.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])),
                    ((self.group5()[0] * other.group1()[3])
                        + (self.group4()[2] * other.group0()[1])
                        + (self.group3()[3] * other.group1()[0])
                        + (self.group3()[1] * other.group2()[2])),
                    ((self.group5()[1] * other.group1()[3])
                        + (self.group4()[0] * other.group0()[2])
                        + (self.group3()[3] * other.group1()[1])
                        + (self.group3()[2] * other.group2()[0])),
                    ((self.group5()[2] * other.group1()[3])
                        + (self.group4()[1] * other.group0()[0])
                        + (self.group3()[3] * other.group1()[2])
                        + (self.group3()[0] * other.group2()[1])),
                ])),
            // e3215
            ((self[e45] * other.group0()[3])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group1()[1])
                + (self.group0()[0] * other.group3()[3])
                - (self.group4()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       51        0
    //    simd3        0        1        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       44       66        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[3])
                    + (self[e1] * other.group1()[3])
                    + (self.group1()[3] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self[e1] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self[e1] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self[e1] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0])),
                    ((self.group5()[0] * other.group0()[3]) + (self.group4()[2] * other.group0()[1]) - (self.group3()[2] * other.group1()[1])
                        + (self.group3()[1] * other.group1()[2])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group4()[0] * other.group0()[2]) + (self.group3()[2] * other.group1()[0])
                        - (self.group3()[0] * other.group1()[2])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group4()[1] * other.group0()[0]) - (self.group3()[1] * other.group1()[0])
                        + (self.group3()[0] * other.group1()[1])),
                ])),
            // e3215
            (-(self.group5()[2] * other.group1()[2]) - (self.group5()[1] * other.group1()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group5()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       52        0
    //    simd3        5        8        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       42       65        0
    //  no simd       64       96        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[0]),
                (-(self.group7()[2] * other.group0()[3])
                    - (self.group7()[1] * other.group0()[2])
                    - (self.group7()[0] * other.group0()[1])
                    - (self.group6()[3] * other.group1()[3])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[0] * other.group1()[0])
                    + (self.group1()[3] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group2()[0])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[0])),
            // e5
            (self[e1] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group3()[0] * other.group0()[0]),
                (self.group3()[1] * other.group0()[0]),
                (self.group3()[2] * other.group0()[0]),
                ((self.group0()[0] * other.group1()[3]) + (self.group3()[3] * other.group0()[0])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])) + (self.group4() * Simd32x3::from(other.group0()[0]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group5() * Simd32x3::from(other.group0()[0]))),
            // e415, e425, e435, e321
            ((self.group6() * Simd32x4::from(other.group0()[0])) - (swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (self.group1()[3] * other.group0()[3]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group7() * Simd32x3::from(other.group0()[0]))),
            // e235, e315, e125
            ((self.group8() * Simd32x3::from(other.group0()[0]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2])),
                    (-(self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e1234, e4235, e4315, e4125
            ((self.group9() * Simd32x4::from(other.group0()[0]))
                - (swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group0()[2], other.group0()[3], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1])),
                    ((self.group5()[0] * other.group1()[3])
                        + (self.group3()[3] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group3()[1] * other.group0()[3])),
                    ((self.group5()[1] * other.group1()[3])
                        + (self.group3()[3] * other.group1()[1])
                        + (self.group3()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group5()[2] * other.group1()[3])
                        + (self.group3()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group3()[0] * other.group0()[2])),
                ])),
            // e3215
            ((self[e45] * other.group0()[0])
                - (self.group5()[2] * other.group0()[3])
                - (self.group5()[1] * other.group0()[2])
                - (self.group5()[0] * other.group0()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group1()[1])
                + (self.group0()[0] * other.group2()[3])
                - (self.group4()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       41        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       25       44        0
    //  no simd       31       52        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[3])
                    + (self[e1] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self[e1] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[1]) + (self[e1] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[2]) + (self[e1] * other.group0()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                + (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group0()[0], self.group3()[1], self.group3()[2], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0])),
                    ((self.group4()[2] * other.group0()[1]) - (self.group3()[2] * other.group1()[1])),
                    ((self.group4()[0] * other.group0()[2]) - (self.group3()[0] * other.group1()[2])),
                    ((self.group4()[1] * other.group0()[0]) - (self.group3()[1] * other.group1()[0])),
                ])),
            // e3215
            (-(self.group5()[2] * other.group1()[2]) - (self.group5()[1] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group5()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       25       40        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group6()[3] * other.group0()[3])
                    + (self[e1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) + (self[e1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self[e1] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) + (self[e1] * other.group0()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + Simd32x4::from([
                    (-(self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0])),
                    ((self.group5()[0] * other.group0()[3]) + (self.group4()[2] * other.group0()[1])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group4()[0] * other.group0()[2])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group4()[1] * other.group0()[0])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       60        0
    //    simd3        6        8        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       49       74        0
    //  no simd       76      108        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[3]),
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[0] * other.group1()[0])
                    + (self[e1] * other.group2()[3])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group3()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[3])),
                (self.group3()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])) + (self.group4() * Simd32x3::from(other.group0()[3]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e415, e425, e435, e321
            ((self.group6() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group2()[0]) + (self[e1] * other.group0()[0])),
                    ((self.group1()[3] * other.group2()[1]) + (self[e1] * other.group0()[1])),
                    ((self.group1()[3] * other.group2()[2]) + (self[e1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((self.group7() * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ])),
            // e235, e315, e125
            ((self.group8() * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])),
                    ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
            // e1234, e4235, e4315, e4125
            ((self.group9() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group4()[1], self.group4()[2], self.group4()[0]]))
                - (swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + (swizzle!(other.group2(), 3, 2, 0, 1) * Simd32x4::from([self.group0()[0], self.group3()[1], self.group3()[2], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])),
                    ((self.group4()[2] * other.group0()[1]) + (self.group3()[3] * other.group1()[0])),
                    ((self.group4()[0] * other.group0()[2]) + (self.group3()[3] * other.group1()[1])),
                    ((self.group4()[1] * other.group0()[0]) + (self.group3()[3] * other.group1()[2])),
                ])),
            // e3215
            ((self[e45] * other.group0()[3])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group1()[1])
                + (self.group0()[0] * other.group1()[3])
                - (self.group4()[0] * other.group1()[0])),
        );
    }
}
impl InfixWedge for NullCircleAtOrigin {}
impl Wedge<AntiDualNum> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for NullCircleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<Dipole> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        4       12        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other[e2]),
            (self.group0()[1] * other[e2]),
            (self.group0()[2] * other[e2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<RoundPointAtOrigin> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[3]),
            (self.group0()[1] * other.group2()[3]),
            (self.group0()[2] * other.group2()[3]),
            (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAligningOrigin> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group2()[3])));
    }
}
impl Wedge<VersorEvenAtInfinity> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[3]),
            (self.group0()[1] * other.group2()[3]),
            (self.group0()[2] * other.group2()[3]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenAtOrigin> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorOdd> for NullCircleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for NullCircleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl InfixWedge for NullDipoleAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatPoint> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for NullDipoleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLine> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for NullDipoleAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for NullDipoleAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for NullDipoleAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[3], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group1()[1]]))),
        );
    }
}
impl Wedge<Circle> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
            (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
            ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
            (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
            ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DualNum> for NullDipoleAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
        );
    }
}
impl Wedge<Flector> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
        );
    }
}
impl Wedge<Infinity> for NullDipoleAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for NullDipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for NullDipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       10       24        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self.group0()[0] * other[e1]), (self.group0()[1] * other[e1]), (self.group0()[2] * other[e1]), 0.0]),
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ((self.group0()[1] * other.group4()[2]) - (self.group0()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group4()[2]) + (self.group0()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group4()[1]) - (self.group0()[1] * other.group4()[0])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e2])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for NullDipoleAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for NullDipoleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for NullDipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[3]),
            (self.group0()[1] * other.group2()[3]),
            (self.group0()[2] * other.group2()[3]),
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for NullDipoleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for NullDipoleAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for NullDipoleAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for NullDipoleAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
            ]),
        );
    }
}
impl InfixWedge for NullSphereAtOrigin {}
impl Wedge<AntiDualNum> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[1]));
    }
}
impl Wedge<AntiFlector> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group1()[3]));
    }
}
impl Wedge<AntiMotor> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<AntiPlane> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<DualNum> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group0()[0]));
    }
}
impl Wedge<Infinity> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other[e5]));
    }
}
impl Wedge<Motor> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e1234] * other[e1])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([(self[e1234] * other.group0()[0]), 0.0, 0.0, 0.0]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other[e2]));
    }
}
impl Wedge<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group0()[1]));
    }
}
impl Wedge<Scalar> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other[scalar]));
    }
}
impl Wedge<VersorEven> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group2()[3]));
    }
}
impl Wedge<VersorEvenAligningOrigin> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group2()[3]));
    }
}
impl Wedge<VersorEvenAtInfinity> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group2()[3]));
    }
}
impl Wedge<VersorEvenAtOrigin> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group1()[3]));
    }
}
impl Wedge<VersorOdd> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<VersorOddAtInfinity> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[0]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[3]));
    }
}
impl InfixWedge for NullVersorEvenAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[3]) * other.group1()));
    }
}
impl Wedge<AntiDipoleOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<AntiDualNum> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]])),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1])]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for NullVersorEvenAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for NullVersorEvenAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for NullVersorEvenAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group0()[3], other.group1()[3], other.group1()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (self.group0()[3] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for NullVersorEvenAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for NullVersorEvenAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            (self.group0()[3] * other.group1()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
        ]));
    }
}
impl Wedge<Circle> for NullVersorEvenAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Circle) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for NullVersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group2()));
    }
}
impl Wedge<CircleAtInfinity> for NullVersorEvenAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<CircleAtOrigin> for NullVersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group1()));
    }
}
impl Wedge<CircleOrthogonalOrigin> for NullVersorEvenAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<Dipole> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DualNum> for NullVersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Flector) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Horizon> for NullVersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for NullVersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for NullVersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for NullVersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<Motor> for NullVersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[3]),
            ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for NullVersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<MultiVector> for NullVersorEvenAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       12       28        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other[e45]) - (self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group4()[0]),
                (self.group0()[3] * other.group4()[1]),
                (self.group0()[3] * other.group4()[2]),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group6()[3], other[e1], other[e1], other[e1]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    (self.group0()[3] * other.group8()[0]),
                    (self.group0()[3] * other.group8()[1]),
                    (self.group0()[3] * other.group8()[2]),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for NullVersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for NullVersorEvenAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]])),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[0] * other[e2]),
                (self.group0()[1] * other[e2]),
                (self.group0()[2] * other[e2]),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for NullVersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for NullVersorEvenAtOrigin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for NullVersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<SphereAtOrigin> for NullVersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<VersorEven> for NullVersorEvenAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]])),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group1()[3], other.group2()[3], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                    (self.group0()[3] * other.group2()[0]),
                    (self.group0()[3] * other.group2()[1]),
                    (self.group0()[3] * other.group2()[2]),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for NullVersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group2()[3]),
            ((self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
            ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
            ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for NullVersorEvenAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group2()[3]])),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group1()[3], other.group2()[3], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                    (self.group0()[3] * other.group2()[0]),
                    (self.group0()[3] * other.group2()[1]),
                    (self.group0()[3] * other.group2()[2]),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for NullVersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[3]),
            ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for NullVersorEvenAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group0()[3], other.group1()[3], other.group1()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group3()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            ((self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0)),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for NullVersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for NullVersorEvenAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]])),
        );
    }
}
impl InfixWedge for NullVersorOddAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for NullVersorOddAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlatPoint> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for NullVersorOddAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
            (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLine> for NullVersorOddAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for NullVersorOddAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for NullVersorOddAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for NullVersorOddAtOrigin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
            (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
            ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<Circle> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for NullVersorOddAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for NullVersorOddAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for NullVersorOddAtOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DualNum> for NullVersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Infinity> for NullVersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for NullVersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for NullVersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for NullVersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for NullVersorOddAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       15       26        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other[e1]) - (self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self.group0()[0] * other[e1]), (self.group0()[1] * other[e1]), (self.group0()[2] * other[e1]), 0.0]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group0()[0], other.group4()[2], other.group4()[0], other.group4()[1]]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])), 0.0, 0.0, 0.0])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for NullVersorOddAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e2]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([(self.group0()[0] * other[e2]), (self.group0()[1] * other[e2]), (self.group0()[2] * other[e2]), 0.0]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for NullVersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for NullVersorOddAtOrigin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for NullVersorOddAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for NullVersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[3]),
            (self.group0()[1] * other.group2()[3]),
            (self.group0()[2] * other.group2()[3]),
            ((self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for NullVersorOddAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[3], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for NullVersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for NullVersorOddAtOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for NullVersorOddAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group2()[2], other.group2()[0], other.group2()[1]]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for NullVersorOddAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group0(), 0, 3, 1, 2))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group0()[2], other.group0()[3], other.group0()[1]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for NullVersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for NullVersorOddAtOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group0()[3], other.group2()[2], other.group2()[0], other.group2()[1]]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])), 0.0, 0.0, 0.0])),
        );
    }
}
impl InfixWedge for Origin {}
impl Wedge<AntiCircleOnOrigin> for Origin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<AntiDipoleOnOrigin> for Origin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e4] * other.group0()[3]));
    }
}
impl Wedge<AntiDualNum> for Origin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[0])]),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[1])]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for Origin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e4] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for Origin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for Origin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * other.group1()),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self[e4]) * swizzle!(other.group0(), 3, 0, 1, 2)),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Origin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ (Simd32x4::from(self[e4]) * swizzle!(other.group0(), 1, 2, 3, 0)));
    }
}
impl Wedge<AntiLine> for Origin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * other.group1()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Origin {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for Origin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Origin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ (Simd32x4::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiPlane> for Origin {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiPlaneOnOrigin> for Origin {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiSphereOnOrigin> for Origin {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Origin {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullVersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Origin {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullVersorOddAtOrigin::from_groups(
            // e41, e42, e43, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[3], other.group0()[3]])),
        );
    }
}
impl Wedge<Circle> for Origin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Origin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group2()));
    }
}
impl Wedge<CircleAtInfinity> for Origin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<CircleAtOrigin> for Origin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<CircleOrthogonalOrigin> for Origin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<Dipole> for Origin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * other.group2()),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Origin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<DipoleAtInfinity> for Origin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Origin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Origin {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1()),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * other.group2()),
        );
    }
}
impl Wedge<DualNum> for Origin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e4] * other.group0()[0]));
    }
}
impl Wedge<FlatPoint> for Origin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for Origin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<Flector> for Origin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for Origin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self[e4]) * other.group0()));
    }
}
impl Wedge<Horizon> for Origin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other[e3215]));
    }
}
impl Wedge<Infinity> for Origin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e4] * other[e5]));
    }
}
impl Wedge<Line> for Origin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for Origin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<Motor> for Origin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e4]) * swizzle!(other.group1(), 3, 0, 1, 2)));
    }
}
impl Wedge<MotorAtInfinity> for Origin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e4]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<MultiVector> for Origin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       16        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e4] * other[e45])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[0])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([(self[e4] * other.group4()[0]), (self[e4] * other.group4()[1]), (self[e4] * other.group4()[2]), 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group5()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for Origin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for Origin {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Origin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e4] * other.group0()[1]));
    }
}
impl Wedge<Scalar> for Origin {
    type Output = Origin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e4] * other[scalar]));
    }
}
impl Wedge<Sphere> for Origin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other.group0()[3]));
    }
}
impl Wedge<SphereAtOrigin> for Origin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other.group0()[0]));
    }
}
impl Wedge<VersorEven> for Origin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]])),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Origin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e4]) * swizzle!(other.group2(), 3, 0, 1, 2)));
    }
}
impl Wedge<VersorEvenAtInfinity> for Origin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group2()[3]])),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Origin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e4]) * swizzle!(other.group1(), 3, 0, 1, 2)));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Origin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<VersorOdd> for Origin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Origin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for Origin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(self[e4]) * swizzle!(other.group0(), 1, 2, 3, 0)),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Origin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Origin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4]) * other.group1()),
            // e415, e425, e435, e4
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]])),
        );
    }
}
impl InfixWedge for Plane {}
impl Wedge<AntiDualNum> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e3215
            (self.group0()[3] * other.group0()[0]),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<Origin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e4]));
    }
}
impl Wedge<RoundPoint> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<Scalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group3()[3]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenAtInfinity> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<VersorEvenOnOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Plane {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<VersorOddAtInfinity> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl InfixWedge for PlaneOnOrigin {}
impl Wedge<AntiDualNum> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<MultiVector> for PlaneOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<VersorOddAtInfinity> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl InfixWedge for RoundPoint {}
impl Wedge<AntiCircleOnOrigin> for RoundPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        8       18        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group1()) - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other.group0()[0]),
                (self[e2] * other.group0()[1]),
                (self[e2] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            (Simd32x3::from(self[e2]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       12        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e2]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self[e2] * other.group0()[1])]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for RoundPoint {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(other[e321]) * Simd32x2::from([self[e2], self.group0()[3]]) * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlatPoint> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self[e2] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       24        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self[e2] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self[e2] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self[e2] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self[e2] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for RoundPoint {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       19        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self[e2] * other.group0()[0] * -1.0),
            ]),
            // e15, e25, e35, e1234
            (swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for RoundPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        8       18        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * other.group0()) + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for RoundPoint {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (Simd32x3::from(self[e2]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       18        0
    //  no simd        8       24        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self[e2] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self[e2] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self[e2] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (self[e2] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for RoundPoint {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        2       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e2]) * other.group0()),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for RoundPoint {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        4       10        0
    //  no simd        6       16        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for RoundPoint {
    type Output = DipoleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        5        0
    // no simd        3       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e15, e25, e35
            (Simd32x3::from(self[e2]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for RoundPoint {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        1        4        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       20        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self[e2] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e2]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       18        0
    //  no simd        8       24        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self[e2] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other.group0()[0]),
                (self[e2] * other.group0()[1]),
                (self[e2] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       26        0
    //  no simd        9       32        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[3])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                (self[e2] * other.group1()[0] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e2] * other.group1()[1] * -1.0),
                (self[e2] * other.group1()[2] * -1.0),
                (self[e2] * other.group1()[3] * -1.0),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e2]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       20        0
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        9       14        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self[e2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) - (self[e2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) - (self[e2] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for RoundPoint {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) - (self.group0()[1] * other.group1()[2])),
                    (-(self[e2] * other.group0()[1]) - (self.group0()[2] * other.group1()[0])),
                    (-(self[e2] * other.group0()[2]) - (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        9       14        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * other.group0())
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for RoundPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        4        6        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       20       30        0
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       21        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            ((Simd32x3::from(self[e2]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group1())),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for RoundPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        2        4        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       11       21        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        6        0
    // no simd        9       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[3]) * other.group1()) + (Simd32x3::from(self[e2]) * other.group0())),
            // e235, e315, e125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for RoundPoint {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e2]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for RoundPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd3        4        6        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       17       27        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group1()) - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self[e2] * other.group0()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self[e2] * other.group0()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self[e2] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * other.group1()) + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DualNum> for RoundPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for RoundPoint {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for RoundPoint {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        6       12        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for RoundPoint {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for RoundPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group0()[3]) * -1.0),
                    ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for RoundPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       10        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorOnOrigin> for RoundPoint {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Horizon> for RoundPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for RoundPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for RoundPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for RoundPoint {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<LineOnOrigin> for RoundPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Motor> for RoundPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group1()[3])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for RoundPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for RoundPoint {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       38        0
    //    simd3        4        6        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       29       50        0
    //  no simd       49       80        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e2] * other.group9()[0])
                    + (self.group0()[3] * other[e45])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group0()[0] * other.group9()[1])
                    + (self.group0()[1] * other.group9()[2])),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e5
            (self[e2] * other.group0()[0]),
            // e41, e42, e43, e45
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]))),
            // e15, e25, e35
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group3()[0]) + (self.group0()[3] * other.group4()[0])),
                    ((self[e2] * other.group3()[1]) + (self.group0()[3] * other.group4()[1])),
                    ((self[e2] * other.group3()[2]) + (self.group0()[3] * other.group4()[2])),
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group5())
                + Simd32x3::from([
                    (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                    ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0])),
                    (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * other.group5()) + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
                    (-(self[e2] * other.group7()[0]) - (self.group0()[1] * other.group6()[2])),
                    (-(self[e2] * other.group7()[1]) - (self.group0()[2] * other.group6()[0])),
                    (-(self[e2] * other.group7()[2]) - (self.group0()[0] * other.group6()[1])),
                ])),
            // e3215
            (-(self[e2] * other.group6()[3]) - (self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for RoundPoint {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self[e2] * other.group0()[0] * -1.0),
            (self[e2] * other.group0()[1] * -1.0),
            (self[e2] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for RoundPoint {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e415, e425, e435
            (Simd32x3::from(self[e2]) * other.group0()),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e2] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for RoundPoint {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       17        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (self[e2] * other.group0()[0] * -1.0),
                (self[e2] * other.group0()[1] * -1.0),
                (self[e2] * other.group0()[2] * -1.0),
            ]),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for RoundPoint {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self[e2] * other.group0()[3]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([(self[e2] * other.group0()[0]), (self[e2] * other.group0()[1]), (self[e2] * other.group0()[2]), 0.0]),
        );
    }
}
impl Wedge<Origin> for RoundPoint {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for RoundPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for RoundPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for RoundPoint {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        2        4        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        6        0
    //  no simd       10       20        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))),
            // e15, e25, e35
            ((Simd32x3::from(other[e2]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for RoundPoint {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        1       11        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[3] * other.group0()[1]) - (self[e2] * other.group0()[0])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[scalar])), /* e5 */ (self[e2] * other[scalar]));
    }
}
impl Wedge<Sphere> for RoundPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e2] * other[e4315])
                + (self.group0()[3] * other.group0()[3])
                + (self.group0()[2] * other.group0()[2])
                + (self.group0()[0] * other.group0()[0])
                + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[3] * other.group0()[0]) + (self[e2] * other.group0()[1])));
    }
}
impl Wedge<SphereOnOrigin> for RoundPoint {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e2] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       23        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       25       43        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))),
            // e15, e25, e35, e1234
            ((self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    ((self[e2] * other.group3()[0]) * -1.0),
                    ((self[e2] * other.group3()[1]) * -1.0),
                    ((self[e2] * other.group3()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for RoundPoint {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       14       29        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                ((self.group0()[3] * other.group2()[3]) - (self[e2] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       26        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       12       27        0
    //  no simd       15       30        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self[e2] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) - (self[e2] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self[e2] * other.group0()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for RoundPoint {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       23        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self[e2] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self[e2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) - (self[e2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) - (self[e2] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for RoundPoint {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        8       20        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                    (-(self[e2] * other.group0()[0]) - (self.group0()[1] * other.group1()[2])),
                    (-(self[e2] * other.group0()[1]) - (self.group0()[2] * other.group1()[0])),
                    (-(self[e2] * other.group0()[2]) - (self.group0()[0] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       19       37        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))),
            // e15, e25, e35, e1234
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    ((self[e2] * other.group2()[0]) * -1.0),
                    ((self[e2] * other.group2()[1]) * -1.0),
                    ((self[e2] * other.group2()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * other.group0())
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       31        0
    //  no simd       24       43        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self[e2] * other.group2()[3]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self[e2] * other.group1()[0]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self[e2] * other.group1()[1]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self[e2] * other.group1()[2]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (self[e2] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for RoundPoint {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       16       29        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self[e2] * other.group1()[3]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self[e2] * other.group0()[0]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self[e2] * other.group0()[1]) - (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self[e2] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       14       30        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (self.group0()[3] * other.group0()[3]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self[e2] * other.group1()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                ((self[e2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self[e2] * other.group1()[2]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                (self[e2] * other.group0()[0]),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for RoundPoint {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       10       24        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e2] * other.group1()[3]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self[e2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self[e2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self[e2] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for RoundPoint {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self[e2] * other.group1()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self[e2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self[e2] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self[e2] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       18       34        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                    (self[e2] * other.group2()[3]),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self[e2] * other.group0()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self[e2] * other.group0()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self[e2] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self[e2] * other.group1()[0]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                ((self[e2] * other.group1()[1]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                ((self[e2] * other.group1()[2]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                (self[e2] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl InfixWedge for RoundPointAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for RoundPointAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            (self.group0()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiDualNum> for RoundPointAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[1])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[1])]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for RoundPointAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (swizzle!(self.group0(), 1, 0) * Simd32x2::from(other[e321]) * Simd32x2::from([-1.0, 1.0])));
    }
}
impl Wedge<AntiFlatPoint> for RoundPointAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for RoundPointAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       20        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for RoundPointAtOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            (swizzle!(other.group0(), 1, 2, 3, 0)
                * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (swizzle!(other.group0(), 1, 2, 3, 0)
                * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for RoundPointAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotor> for RoundPointAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for RoundPointAtOrigin {
    type Output = VersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiPlane> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for RoundPointAtOrigin {
    type Output = DipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for RoundPointAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (other.group1() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]])),
            // e415, e425, e435, e4
            (other.group0() * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]])),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for RoundPointAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       24        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (swizzle!(other.group1(), 1, 2, 3, 0)
                * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[0] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for RoundPointAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e1234
            (self.group0()[0] * other.group1()[3]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((Simd32x3::from(self.group0()[0]) * other.group2()) - (Simd32x3::from(self.group0()[1]) * other.group0())),
        );
    }
}
impl Wedge<CircleAtInfinity> for RoundPointAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((Simd32x3::from(self.group0()[0]) * other.group1()) - (Simd32x3::from(self.group0()[1]) * other.group0())),
        );
    }
}
impl Wedge<CircleOnOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3] * -1.0),
            ]),
            // e1234
            (self.group0()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<Dipole> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * other.group2()) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (Simd32x3::from(self.group0()[1]) * other.group0())),
        );
    }
}
impl Wedge<DipoleOnOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * other.group2()) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<DualNum> for RoundPointAtOrigin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[0] * other.group0()[0]));
    }
}
impl Wedge<FlatPoint> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Flector> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Flector) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Horizon> for RoundPointAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e3215]));
    }
}
impl Wedge<Infinity> for RoundPointAtOrigin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[0] * other[e5]));
    }
}
impl Wedge<Line> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Motor> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Motor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[0]) * swizzle!(other.group1(), 3, 0, 1, 2)));
    }
}
impl Wedge<MotorAtInfinity> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        8       28        0
    //  no simd        8       36        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[0] * other[e45]) + (self.group0()[1] * other.group9()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e5
            (self.group0()[1] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group4()[2]) + (self.group0()[1] * other.group3()[2])),
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group5()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group5()),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (self.group0()[0] * other.group6()[3]),
                ((self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group7()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group7()[1])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other.group7()[2])),
            ]),
            // e3215
            (self.group0()[1] * other.group6()[3] * -1.0),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[1]) * swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<Origin> for RoundPointAtOrigin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[1] * other[e4] * -1.0));
    }
}
impl Wedge<Plane> for RoundPointAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       11        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlatOrigin::from_groups(/* e45 */ ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])));
    }
}
impl Wedge<Scalar> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl Wedge<Sphere> for RoundPointAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other[e4315])));
    }
}
impl Wedge<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])));
    }
}
impl Wedge<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group0()[3]));
    }
}
impl Wedge<VersorEven> for RoundPointAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       18        0
    //  no simd        4       21        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((Simd32x4::from(self.group0()[0]) * swizzle!(other.group2(), 3, 0, 1, 2))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for RoundPointAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       20        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group2()[3]])),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (self.group0()[1] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((Simd32x4::from(self.group0()[0]) * swizzle!(other.group1(), 3, 0, 1, 2)) - (Simd32x4::from(self.group0()[1]) * swizzle!(other.group0(), 3, 0, 1, 2))),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       18        0
    //  no simd        4       21        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl Wedge<VersorOdd> for RoundPointAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for RoundPointAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 1, 2, 3, 0)),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl InfixWedge for Scalar {}
impl Wedge<AntiCircleOnOrigin> for Scalar {
    type Output = AntiCircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Scalar {
    type Output = AntiDipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiFlatOrigin> for Scalar {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[scalar] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Scalar {
    type Output = AntiFlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Scalar {
    type Output = AntiLineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Scalar {
    type Output = AntiMotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiPlaneOnOrigin> for Scalar {
    type Output = AntiPlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[scalar] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for Scalar {
    type Output = AntiSphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Scalar {
    type Output = AntiVersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiVersorEvenOnOrigin::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e1234
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Scalar {
    type Output = AntiVersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiVersorOddOnOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e4, e1, e2, e3
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Scalar {
    type Output = CircleAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<CircleAtInfinity> for Scalar {
    type Output = CircleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return CircleAtInfinity::from_groups(
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<CircleAtOrigin> for Scalar {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<CircleOnOrigin> for Scalar {
    type Output = CircleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for Scalar {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Scalar {
    type Output = DipoleAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Scalar {
    type Output = DipoleAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        7        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Scalar {
    type Output = DipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Scalar {
    type Output = DipoleOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Scalar {
    type Output = DipoleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        3        0
    // no simd        0        9        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<FlatOrigin> for Scalar {
    type Output = FlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[scalar] * other[e45]));
    }
}
impl Wedge<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<FlatPointAtInfinity> for Scalar {
    type Output = FlatPointAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<FlectorAtInfinity> for Scalar {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<FlectorOnOrigin> for Scalar {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Horizon> for Scalar {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[scalar] * other[e3215]));
    }
}
impl Wedge<Infinity> for Scalar {
    type Output = Infinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[scalar] * other[e5]));
    }
}
impl Wedge<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<LineAtInfinity> for Scalar {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for Scalar {
    type Output = LineOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<MotorAtInfinity> for Scalar {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<MotorOnOrigin> for Scalar {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e5
            (self[scalar] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self[scalar]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group8()),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self[scalar]) * other.group9()),
            // e3215
            (self[scalar] * other[e45]),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Scalar {
    type Output = NullCircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<NullDipoleAtOrigin> for Scalar {
    type Output = NullDipoleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for Scalar {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[scalar] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Scalar {
    type Output = NullVersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullVersorEvenAtOrigin::from_groups(/* e423, e431, e412, e4 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<NullVersorOddAtOrigin> for Scalar {
    type Output = NullVersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullVersorOddAtOrigin::from_groups(/* e41, e42, e43, e1234 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Origin> for Scalar {
    type Output = Origin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[scalar] * other[e4]));
    }
}
impl Wedge<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for Scalar {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[scalar]) * other.group0()), /* e5 */ (self[scalar] * other[e2]));
    }
}
impl Wedge<RoundPointAtOrigin> for Scalar {
    type Output = RoundPointAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other[scalar]));
    }
}
impl Wedge<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234
            (self[scalar] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for Scalar {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for Scalar {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Scalar {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for Scalar {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Scalar {
    type Output = VersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for Scalar {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Scalar {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for Scalar {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for Scalar {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for Scalar {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for Scalar {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Scalar {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl InfixWedge for Sphere {}
impl Wedge<AntiDualNum> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e1234
            (self[e4315] * other.group0()[1]),
        );
    }
}
impl Wedge<AntiFlector> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e4315] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234
            (self[e4315] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234
            (self[e4315] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiPlane> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e4315] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234
            (self[e4315] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<DualNum> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4315] * other.group0()[0]));
    }
}
impl Wedge<Infinity> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4315] * other[e5]));
    }
}
impl Wedge<Motor> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4315] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4315] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4        7        0
    //  no simd        4       10        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e4315] * other[e1])
                    + (self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self[e4315], self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e3215
            (self.group0()[3] * other.group0()[0]),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<Origin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e4]));
    }
}
impl Wedge<RoundPoint> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        5        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e4315] * other[e2])
                + (self.group0()[3] * other.group0()[3])
                + (self.group0()[2] * other.group0()[2])
                + (self.group0()[0] * other.group0()[0])
                + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[3] * other.group0()[0]) + (self[e4315] * other.group0()[1])));
    }
}
impl Wedge<Scalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[scalar])),
            // e1234
            (self[e4315] * other[scalar]),
        );
    }
}
impl Wedge<VersorEven> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        5        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e4315] * other.group2()[3])
                + (self.group0()[3] * other.group3()[3])
                + (self.group0()[2] * other.group3()[2])
                + (self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[3] * other.group1()[3]) + (self[e4315] * other.group2()[3])));
    }
}
impl Wedge<VersorEvenAtInfinity> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e4315] * other.group2()[3]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[3] * other.group0()[3]) + (self[e4315] * other.group1()[3])));
    }
}
impl Wedge<VersorEvenOnOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for Sphere {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        5        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self[e4315] * other.group1()[3])
                + (self.group0()[3] * other.group2()[3])
                + (self.group0()[2] * other.group2()[2])
                + (self.group0()[0] * other.group2()[0])
                + (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234
            (self[e4315] * other.group0()[3]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e1234
            (self[e4315] * other.group0()[0]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234
            (self[e4315] * other.group0()[3]),
        );
    }
}
impl InfixWedge for SphereAtOrigin {}
impl Wedge<AntiDualNum> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group1()[3]));
    }
}
impl Wedge<AntiMotor> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group0()[3]));
    }
}
impl Wedge<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group1()[0]));
    }
}
impl Wedge<DualNum> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group0()[0]));
    }
}
impl Wedge<Infinity> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other[e5]));
    }
}
impl Wedge<Motor> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Motor) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other[e1]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([(self.group0()[1] * other.group0()[0]), 0.0, 0.0, 0.0]),
            // e3215
            (self.group0()[0] * other.group0()[0]),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<Origin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e4]));
    }
}
impl Wedge<RoundPoint> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other[e2])));
    }
}
impl Wedge<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])));
    }
}
impl Wedge<Scalar> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[3])));
    }
}
impl Wedge<VersorEvenAligningOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])));
    }
}
impl Wedge<VersorEvenAtInfinity> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group2()[3]));
    }
}
impl Wedge<VersorEvenAtOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])));
    }
}
impl Wedge<VersorEvenOnOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])));
    }
}
impl Wedge<VersorOdd> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl Wedge<VersorOddAtInfinity> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other.group0()[0])));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl InfixWedge for SphereOnOrigin {}
impl Wedge<AntiDualNum> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl Wedge<AntiFlector> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiVersorOddOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
        );
    }
}
impl Wedge<DualNum> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<Infinity> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e5]));
    }
}
impl Wedge<Motor> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Motor) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        5        0
    //  no simd        3        8        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other[e1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other[e2]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[1]));
    }
}
impl Wedge<Scalar> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<VersorEven> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group2()[3]));
    }
}
impl Wedge<VersorEvenAtInfinity> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<VersorOdd> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<VersorOddAtInfinity> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl InfixWedge for VersorEven {}
impl Wedge<AntiCircleOnOrigin> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group3()[3] * other.group1()[0]) - (self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                ((self.group3()[3] * other.group1()[2]) - (self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group3()[2] * other.group1()[2]) - (self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorEven {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       12        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group2()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            ((self.group3()[3] * other.group0()[3]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        8        0
    //  no simd        1       17        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other.group0()[1])),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorEven {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(other[e321]) * Simd32x2::from([self.group2()[3], self.group3()[3]]) * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlatPoint> for VersorEven {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (-(self.group3()[2] * other.group0()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[0])),
            ]),
            // e1234
            (self.group3()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       28       40        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group3()[3] * other.group1()[0]),
                (self.group3()[3] * other.group1()[1]),
                (self.group3()[3] * other.group1()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group3()[0] * other.group1()[2]) + (self.group3()[2] * other.group1()[0])),
                ((self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
                (self.group3()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (self.group3() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 2, 3, 1) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    ((self.group3()[3] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    ((self.group3()[3] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                    (-(self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group2()[3] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       23        0
    //  no simd       15       29        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (self.group3()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[3]) - (self.group3()[2] * other.group0()[2])),
                (-(self.group3()[0] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[1] * other.group0()[1])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (self.group2()[3] * other.group0()[3] * -1.0),
                ((self.group3()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]))])),
        );
    }
}
impl Wedge<AntiLine> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group3()[3] * other.group1()[0]),
                (self.group3()[3] * other.group1()[1]),
                (self.group3()[3] * other.group1()[2]),
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group1()[1]) + (self.group2()[3] * other.group0()[0]) + (self.group3()[1] * other.group1()[2])),
                ((self.group3()[2] * other.group1()[0]) + (self.group2()[3] * other.group0()[1]) - (self.group3()[0] * other.group1()[2])),
                (-(self.group3()[1] * other.group1()[0]) + (self.group2()[3] * other.group0()[2]) + (self.group3()[0] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiMotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       19       29        0
    //  no simd       28       41        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group3()[3] * other.group1()[0]),
                    (self.group3()[3] * other.group1()[1]),
                    (self.group3()[3] * other.group1()[2]),
                    (-(self.group3()[2] * other.group0()[2]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group3()[2] * other.group1()[0]) - (self.group3()[0] * other.group1()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group3()[1] * other.group1()[0])
                    + (self.group3()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       28        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group3()[3] * other.group0()[0]),
                    (self.group3()[3] * other.group0()[1]),
                    (self.group3()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       23        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       17       35        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                (self.group3()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group3()[0] * other.group0()[3]),
                    (self.group3()[1] * other.group0()[3]),
                    (self.group3()[2] * other.group0()[3]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 3, 2, 3, 1) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group0()[0]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       27        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       33        0
    //  no simd       17       36        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group3()[0] * other.group0()[3]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group3()[1] * other.group0()[3]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[3]) + (self.group3()[3] * other.group0()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       25       41        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                + (swizzle!(other.group0(), 1, 3, 0, 3) * Simd32x4::from([self.group3()[2], self.group0()[1], self.group3()[1], self.group0()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group3()[0] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group3()[2] * other.group1()[2]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       36        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       38        0
    //  no simd       25       44        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group3()[0] * other.group1()[0]) + (self.group3()[3] * other.group1()[1])),
                (-(self.group3()[1] * other.group1()[0]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group3()[2] * other.group1()[0]) + (self.group3()[3] * other.group1()[3])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[3]) - (self.group3()[2] * other.group1()[2])),
                (-(self.group3()[0] * other.group1()[3]) + (self.group3()[2] * other.group1()[1])),
                ((self.group3()[0] * other.group1()[2]) - (self.group3()[1] * other.group1()[1])),
                (self.group2()[3] * other.group1()[0] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group1()[1] * -1.0),
                (self.group2()[3] * other.group1()[2] * -1.0),
                (self.group2()[3] * other.group1()[3] * -1.0),
                ((self.group3()[3] * other.group0()[3]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                + (swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for VersorEven {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       20        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) + (self.group3()[2] * other.group1()[1])),
                    ((self.group3()[3] * other.group2()[1]) + (self.group3()[0] * other.group1()[2])),
                    ((self.group3()[3] * other.group2()[2]) + (self.group3()[1] * other.group1()[0])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0])),
                ])),
            // e1234
            ((self.group3()[3] * other.group1()[3]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorEven {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) + (self.group3()[2] * other.group1()[1]) - (self.group2()[3] * other.group0()[0])),
                    ((self.group3()[3] * other.group2()[1]) - (self.group2()[3] * other.group0()[1]) + (self.group3()[0] * other.group1()[2])),
                    ((self.group3()[3] * other.group2()[2]) + (self.group3()[1] * other.group1()[0]) - (self.group2()[3] * other.group0()[2])),
                    (-(self.group3()[0] * other.group2()[0]) - (self.group3()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorEven {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        9       14        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) + (self.group3()[2] * other.group0()[1])),
                    ((self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group1()[2]) + (self.group3()[1] * other.group0()[0])),
                    (-(self.group3()[1] * other.group1()[1]) - (self.group2()[3] * other.group0()[3]) - (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            (self.group3()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorEven {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group2()[3] * other.group0()[0]) + (self.group3()[3] * other.group1()[0])),
                (-(self.group2()[3] * other.group0()[1]) + (self.group3()[3] * other.group1()[1])),
                (-(self.group2()[3] * other.group0()[2]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group3()[2] * other.group1()[2]) - (self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorEven {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group3()[1] * other.group1()[2])),
                    (-(self.group3()[2] * other.group1()[0]) - (self.group2()[3] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group3()[0] * other.group1()[1])),
                    ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorEven {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        9       14        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                + Simd32x4::from([
                    (self.group3()[3] * other.group1()[0]),
                    (self.group3()[3] * other.group1()[1]),
                    (self.group3()[3] * other.group1()[2]),
                    (-(self.group3()[2] * other.group1()[2]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            ((self.group3()[3] * other.group0()[3]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       36        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       29       40        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group3()[3] * other.group1()[0]) - (self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                ((self.group3()[3] * other.group1()[2]) - (self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) + (self.group2()[3] * other.group0()[0])),
                    ((self.group3()[3] * other.group2()[1]) + (self.group2()[3] * other.group0()[1])),
                    ((self.group3()[3] * other.group2()[2]) + (self.group2()[3] * other.group0()[2])),
                    (-(self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group2()[1]) + (self.group2()[3] * other.group1()[0]) + (self.group3()[1] * other.group2()[2])),
                ((self.group3()[2] * other.group2()[0]) + (self.group2()[3] * other.group1()[1]) - (self.group3()[0] * other.group2()[2])),
                (-(self.group3()[1] * other.group2()[0]) + (self.group2()[3] * other.group1()[2]) + (self.group3()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorEven {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       18       28        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group3()[2] * other.group0()[1]),
                    (self.group3()[0] * other.group0()[2]),
                    (self.group3()[1] * other.group0()[0]),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group3()[3] * other.group1()[0]) + (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                ((self.group3()[3] * other.group1()[1]) + (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group0()[3])),
                ((self.group3()[3] * other.group1()[2]) + (self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group3()[0] * other.group1()[2]) + (self.group3()[2] * other.group1()[0])),
                ((self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       17       28        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group3()[3] * other.group1()[0]),
                    (self.group3()[3] * other.group1()[1]),
                    (self.group3()[3] * other.group1()[2]),
                    (-(self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group1()[1]) + (self.group2()[3] * other.group0()[0]) + (self.group3()[1] * other.group1()[2])),
                ((self.group3()[2] * other.group1()[0]) + (self.group2()[3] * other.group0()[1]) - (self.group3()[0] * other.group1()[2])),
                (-(self.group3()[1] * other.group1()[0]) + (self.group2()[3] * other.group0()[2]) + (self.group3()[0] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorEven {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       24        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group3()[3] * other.group1()[0])),
                ((self.group2()[3] * other.group0()[1]) + (self.group3()[3] * other.group1()[1])),
                ((self.group2()[3] * other.group0()[2]) + (self.group3()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group3()[0] * other.group1()[2]) + (self.group3()[2] * other.group1()[0])),
                ((self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorEven {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group3()[2] * other.group0()[1]),
                    (self.group3()[0] * other.group0()[2]),
                    (self.group3()[1] * other.group0()[0]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                ((self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group0()[3])),
                ((self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       36        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group3()[3] * other.group1()[0]) - (self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                ((self.group3()[3] * other.group1()[2]) - (self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group3()[3] * other.group2()[0])),
                ((self.group2()[3] * other.group0()[1]) + (self.group3()[3] * other.group2()[1])),
                ((self.group2()[3] * other.group0()[2]) + (self.group3()[3] * other.group2()[2])),
                (-(self.group3()[2] * other.group1()[2]) - (self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group2()[1]) + (self.group2()[3] * other.group1()[0]) + (self.group3()[1] * other.group2()[2])),
                ((self.group3()[2] * other.group2()[0]) + (self.group2()[3] * other.group1()[1]) - (self.group3()[0] * other.group2()[2])),
                (-(self.group3()[1] * other.group2()[0]) + (self.group2()[3] * other.group1()[2]) + (self.group3()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DualNum> for VersorEven {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group3() * Simd32x4::from(other.group0()[0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<FlatOrigin> for VersorEven {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group3()[3] * other.group0()[0]),
                    (self.group3()[3] * other.group0()[1]),
                    (self.group3()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Flector> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[2] * other.group1()[2]) + (self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                ((self.group3()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorOnOrigin> for VersorEven {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group3()[0] * other.group0()[0] * -1.0),
            (self.group3()[1] * other.group0()[0] * -1.0),
            (self.group3()[2] * other.group0()[0] * -1.0),
            ((self.group3()[2] * other.group0()[3]) + (self.group3()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0]) + (self.group3()[0] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Horizon> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group3()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorEven {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group3() * Simd32x4::from(other[e5])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<Line> for VersorEven {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) + (self.group3()[2] * other.group0()[1])),
                    ((self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group1()[2]) + (self.group3()[1] * other.group0()[0])),
                    (-(self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorEven {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group3()[3] * other.group0()[0]),
            (self.group3()[3] * other.group0()[1]),
            (self.group3()[3] * other.group0()[2]),
            (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<LineOnOrigin> for VersorEven {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))),
        );
    }
}
impl Wedge<Motor> for VersorEven {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group3() * Simd32x4::from(other.group1()[3])),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group3()[0] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3])),
                    (-(self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for VersorEven {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group3() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group3()[3] * other.group0()[0]),
                    (self.group3()[3] * other.group0()[1]),
                    (self.group3()[3] * other.group0()[2]),
                    (-(self.group3()[2] * other.group0()[2]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<MotorOnOrigin> for VersorEven {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
            ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
            (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       61        0
    //    simd3        6        8        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       57       78        0
    //  no simd       90      121        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group3()[3] * other[e45])
                    + (self.group3()[2] * other.group9()[3])
                    + (self.group3()[1] * other.group9()[2])
                    + (self.group3()[0] * other.group9()[1])
                    + (self.group2()[3] * other.group9()[0])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[3] * other.group3()[3])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[0])),
            // e5
            (self.group2()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]))),
            // e15, e25, e35
            (-(Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group3()[0] * other.group1()[2]) + (self.group3()[2] * other.group1()[0])),
                ((self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + (self.group1() * Simd32x4::from(other.group0()[0]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group4()[0]) + (self.group2()[3] * other.group3()[0])),
                    ((self.group3()[3] * other.group4()[1]) + (self.group2()[3] * other.group3()[1])),
                    ((self.group3()[3] * other.group4()[2]) + (self.group2()[3] * other.group3()[2])),
                    (-(self.group3()[1] * other.group5()[1]) - (self.group3()[0] * other.group5()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group3()[3]) * other.group5())
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group3()[2] * other.group3()[1]) - (self.group3()[1] * other.group3()[2])),
                    (-(self.group3()[2] * other.group3()[0]) + (self.group3()[0] * other.group3()[2])),
                    ((self.group3()[1] * other.group3()[0]) - (self.group3()[0] * other.group3()[1])),
                ])),
            // e235, e315, e125
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group5())),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group7()[1]) + (self.group3()[0] * other.group7()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                    (-(self.group3()[1] * other.group6()[2]) - (self.group2()[3] * other.group7()[0]) + (self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other[e1])),
                    (-(self.group3()[2] * other.group6()[0]) - (self.group2()[3] * other.group7()[1]) + (self.group0()[1] * other[e1]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group3()[0] * other.group6()[1]) - (self.group2()[3] * other.group7()[2]) + (self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            (-(self.group3()[2] * other.group8()[2]) - (self.group3()[1] * other.group8()[1]) - (self.group3()[0] * other.group8()[0]) - (self.group2()[3] * other.group6()[3])
                + (self.group2()[2] * other.group1()[2])
                + (self.group2()[1] * other.group1()[1])
                + (self.group1()[3] * other[e1])
                + (self.group2()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorEven {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[0] * -1.0),
            (self.group2()[3] * other.group0()[1] * -1.0),
            (self.group2()[3] * other.group0()[2] * -1.0),
            ((self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorEven {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group2()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorEven {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        6       21        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])),
                    ((self.group2()[3] * other.group0()[0]) * -1.0),
                    ((self.group2()[3] * other.group0()[1]) * -1.0),
                    ((self.group2()[3] * other.group0()[2]) * -1.0),
                ])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorEven {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<Origin> for VersorEven {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group3()[3] * other.group0()[3]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       25       40        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group3()[0] * other.group0()[3]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group3()[1] * other.group0()[3]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[3]) + (self.group3()[3] * other.group0()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))),
            // e15, e25, e35, e1234
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group3()[0] * other[e2]),
                    (self.group3()[1] * other[e2]),
                    (self.group3()[2] * other[e2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorEven {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       19        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        4       23        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group3()[0] * other.group0()[0] * -1.0),
                (self.group3()[1] * other.group0()[0] * -1.0),
                (self.group3()[2] * other.group0()[0] * -1.0),
                (-(self.group2()[3] * other.group0()[0]) + (self.group3()[3] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group3()[0] * other.group0()[1]),
                (self.group3()[1] * other.group0()[1]),
                (self.group3()[2] * other.group0()[1]),
                (self.group1()[3] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0])),
                (self.group1()[3] * other.group0()[1]),
            ]),
        );
    }
}
impl Wedge<Scalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self.group3()[3] * other.group0()[3])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[1] * other.group0()[1])
                + (self.group2()[3] * other[e4315])
                + (self.group3()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<SphereAtOrigin> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group2()[3] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])));
    }
}
impl Wedge<SphereOnOrigin> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group2()[3] * other.group0()[3]) + (self.group3()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<VersorEven> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       28        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       27       36        0
    //  no simd       48       60        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group3()[0] * other.group3()[3]) + (self.group3()[3] * other.group3()[0])),
                (-(self.group3()[1] * other.group3()[3]) + (self.group3()[3] * other.group3()[1])),
                (-(self.group3()[2] * other.group3()[3]) + (self.group3()[3] * other.group3()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))),
            // e15, e25, e35, e1234
            (-(other.group3() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + (self.group3() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group2()[0] * other.group3()[3]) + (self.group0()[0] * other.group2()[3])
                        - (self.group1()[1] * other.group3()[2])),
                    ((self.group3()[0] * other.group1()[2]) - (self.group2()[1] * other.group3()[3]) - (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group2()[2] * other.group3()[3]) + (self.group0()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group3()[1])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0])
                        + (self.group2()[1] * other.group3()[1])
                        + (self.group2()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorEven {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       29        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       22       37        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group3()[0] * other.group1()[3] * -1.0),
                (self.group3()[1] * other.group1()[3] * -1.0),
                (self.group3()[2] * other.group1()[3] * -1.0),
                (-(self.group2()[3] * other.group1()[3]) + (self.group3()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group3()[0] * other.group2()[3]),
                (self.group3()[1] * other.group2()[3]),
                (self.group3()[2] * other.group2()[3]),
                ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) - (self.group1()[3] * other.group1()[3]) + (self.group3()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group2()[3] * other.group0()[0]) + (self.group0()[0] * other.group2()[3])
                        - (self.group2()[0] * other.group1()[3])),
                    ((self.group3()[0] * other.group1()[2]) - (self.group2()[3] * other.group0()[1]) + (self.group0()[1] * other.group2()[3])
                        - (self.group2()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group2()[3] * other.group0()[2]) + (self.group0()[2] * other.group2()[3])
                        - (self.group2()[2] * other.group1()[3])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       34       46        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (self.group3()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[3]) - (self.group3()[2] * other.group0()[2])),
                (-(self.group3()[0] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[1] * other.group0()[1])),
                (self.group3()[3] * other.group2()[3]),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 3, 3) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (self.group3() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2]))])),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[0] * other.group1()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group3()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0]) - (self.group2()[3] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorEven {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       16       31        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group3()[0] * other.group0()[3] * -1.0),
                (self.group3()[1] * other.group0()[3] * -1.0),
                (self.group3()[2] * other.group0()[3] * -1.0),
                (-(self.group2()[3] * other.group0()[3]) + (self.group3()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group3()[0] * other.group1()[3]),
                (self.group3()[1] * other.group1()[3]),
                (self.group3()[2] * other.group1()[3]),
                ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) + (self.group3()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) + (self.group0()[0] * other.group1()[3]) - (self.group2()[0] * other.group0()[3])),
                    (-(self.group2()[3] * other.group0()[1]) + (self.group0()[1] * other.group1()[3]) - (self.group2()[1] * other.group0()[3])),
                    (-(self.group2()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group2()[2] * other.group0()[3])),
                    (-(self.group3()[2] * other.group1()[2]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorEven {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group3(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[3], self.group3()[1], self.group3()[2], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])),
                    (-(self.group2()[0] * other.group1()[3]) - (self.group2()[3] * other.group0()[0])),
                    (-(self.group2()[1] * other.group1()[3]) - (self.group2()[3] * other.group0()[1])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[3] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       26        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       24       33        0
    //  no simd       42       54        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group3()[0] * other.group2()[3]) + (self.group3()[3] * other.group2()[0])),
                (-(self.group3()[1] * other.group2()[3]) + (self.group3()[3] * other.group2()[1])),
                (-(self.group3()[2] * other.group2()[3]) + (self.group3()[3] * other.group2()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))),
            // e15, e25, e35, e1234
            (-(other.group2() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + (self.group3() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]])) - (Simd32x4::from(self.group2()[3]) * other.group0())
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group2()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) - (self.group1()[2] * other.group2()[0]) + (self.group0()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[2] * other.group1()[2]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])
                        + (self.group2()[1] * other.group2()[1])
                        + (self.group2()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       37        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       30       43        0
    //  no simd       45       61        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group0(), 1, 3, 0, 3) * Simd32x4::from([self.group3()[2], self.group0()[1], self.group3()[1], self.group0()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group3()[0] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[3]),
                    ((self.group3()[2] * other.group3()[2])
                        + (self.group3()[1] * other.group3()[1])
                        + (self.group3()[0] * other.group3()[0])
                        + (self.group2()[3] * other.group2()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) + (self.group2()[3] * other.group0()[0])),
                    ((self.group3()[3] * other.group2()[1]) + (self.group2()[3] * other.group0()[1])),
                    ((self.group3()[3] * other.group2()[2]) + (self.group2()[3] * other.group0()[2])),
                    (-(self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group2()[1])
                    + (self.group3()[1] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group3()[2] * other.group2()[0]) - (self.group3()[0] * other.group2()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                (-(self.group3()[1] * other.group2()[0])
                    + (self.group3()[0] * other.group2()[1])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorEven {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       27        0
    //  no simd       26       33        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[2] * other.group2()[2])
                        + (self.group3()[1] * other.group2()[1])
                        + (self.group3()[0] * other.group2()[0])
                        + (self.group2()[3] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group3()[3] * other.group1()[0]) + (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                ((self.group3()[3] * other.group1()[1]) + (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group0()[3])),
                ((self.group3()[3] * other.group1()[2]) + (self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group3()[0] * other.group1()[2]) + (self.group3()[2] * other.group1()[0])),
                ((self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       28        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       23       33        0
    //  no simd       35       48        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[0]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[2] * other.group2()[2]) + (self.group3()[1] * other.group2()[1]) + (self.group3()[0] * other.group2()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[2])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                - (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[0]),
                    (self.group1()[1] * other.group0()[0]),
                    (self.group1()[2] * other.group0()[0]),
                    (-(self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group0()[2])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group3()[2] * other.group0()[1]) - (self.group3()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])),
                (-(self.group3()[1] * other.group0()[1])
                    + (self.group3()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[0]),
            ]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorEven {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group3()[3] * other.group1()[0])),
                ((self.group2()[3] * other.group0()[1]) + (self.group3()[3] * other.group1()[1])),
                ((self.group2()[3] * other.group0()[2]) + (self.group3()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group3()[0] * other.group1()[2]) + (self.group3()[2] * other.group1()[0])),
                ((self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorEven {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[1] * other.group1()[2]) + (self.group3()[0] * other.group1()[1]) + (self.group2()[3] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                ((self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group0()[3])),
                ((self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       34        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       26       39        0
    //  no simd       38       54        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group1())
                + (swizzle!(other.group0(), 1, 3, 0, 3) * Simd32x4::from([self.group3()[2], self.group0()[1], self.group3()[1], self.group0()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group3()[0] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[3]),
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) + (self.group2()[3] * other.group0()[0])),
                    ((self.group3()[3] * other.group2()[1]) + (self.group2()[3] * other.group0()[1])),
                    ((self.group3()[3] * other.group2()[2]) + (self.group2()[3] * other.group0()[2])),
                    (-(self.group3()[2] * other.group1()[2]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group3()[2] * other.group2()[1])
                    + (self.group3()[1] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group3()[2] * other.group2()[0]) - (self.group3()[0] * other.group2()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                (-(self.group3()[1] * other.group2()[0])
                    + (self.group3()[0] * other.group2()[1])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl InfixWedge for VersorEvenAligningOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorEvenAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group2()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            (self.group1()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiDualNum> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       13        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e4
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorEvenAligningOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(other[e321]) * Simd32x2::from([self.group2()[3], self.group1()[3]]) * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlatPoint> for VersorEvenAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group1()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       15       30        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0] * -1.0),
                (self.group2()[3] * other.group1()[1] * -1.0),
                (self.group2()[3] * other.group1()[2] * -1.0),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 2, 3, 0) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) - (self.group1()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1]) - (self.group1()[2] * other.group1()[0])),
                    ((self.group1()[3] * other.group0()[2]) - (self.group1()[0] * other.group1()[1])),
                    (-(self.group2()[3] * other.group0()[3]) + (self.group2()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       12       23        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (self.group1()[3] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (self.group2()[3] * other.group0()[3] * -1.0),
                ((self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]))])),
        );
    }
}
impl Wedge<AntiLine> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotor> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       19       28        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        4       14        0
    //  no simd       10       29        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 3, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[1], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 3, 2, 3, 0) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group0()[2], self.group2()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       21        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        7       20        0
    //  no simd       10       29        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       19       28        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (other.group1() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       15       34        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (swizzle!(other.group1(), 1, 2, 3, 0)
                * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group1()[1] * -1.0),
                (self.group2()[3] * other.group1()[2] * -1.0),
                (self.group2()[3] * other.group1()[3] * -1.0),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                + (swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for VersorEvenAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) - (self.group2()[3] * other.group0()[0])),
                ((self.group1()[3] * other.group2()[1]) - (self.group2()[3] * other.group0()[1])),
                ((self.group1()[3] * other.group2()[2]) - (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group1()[3] * -1.0),
            ]),
            // e1234
            (self.group1()[3] * other.group1()[3]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorEvenAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((Simd32x3::from(self.group1()[3]) * other.group2()) - (Simd32x3::from(self.group2()[3]) * other.group0())),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorEvenAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (self.group2()[3] * other.group0()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group1()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorEvenAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((Simd32x3::from(self.group1()[3]) * other.group1()) - (Simd32x3::from(self.group2()[3]) * other.group0())),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorEvenAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group2()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorEvenAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) - (self.group2()[3] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[1]) - (self.group2()[3] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[2]) - (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e1234
            (self.group1()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<Dipole> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       21        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[3] * other.group2()[1]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group1()[3] * other.group1()[0]) + (self.group2()[3] * other.group0()[0])),
            ((self.group1()[3] * other.group1()[1]) + (self.group2()[3] * other.group0()[1])),
            ((self.group1()[3] * other.group1()[2]) + (self.group2()[3] * other.group0()[2])),
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group1()[3] * other.group1()[0]) + (self.group2()[3] * other.group0()[0])),
            ((self.group1()[3] * other.group1()[1]) + (self.group2()[3] * other.group0()[1])),
            ((self.group1()[3] * other.group1()[2]) + (self.group2()[3] * other.group0()[2])),
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[0]),
            (self.group2()[3] * other.group0()[1]),
            (self.group2()[3] * other.group0()[2]),
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       21        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[3] * other.group2()[1]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DualNum> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Flector) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Horizon> for VersorEvenAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for VersorEvenAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for VersorEvenAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0()));
    }
}
impl Wedge<Motor> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[3]),
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorEvenAligningOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       43        0
    //    simd3        2        6        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       32       52        0
    //  no simd       45       73        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group2()[3] * other.group9()[0]) - (self.group2()[2] * other.group3()[2]) - (self.group2()[1] * other.group3()[1]) - (self.group2()[0] * other.group3()[0])
                    + (self.group1()[3] * other[e45])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[0])]),
            // e5
            (self.group2()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                ((self.group1()[3] * other[e1]) - (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[3] * other.group3()[0]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[3] * other.group4()[0])),
                ((self.group2()[3] * other.group3()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group4()[1])),
                ((self.group2()[3] * other.group3()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group4()[2])),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group1()[3]) * other.group5())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])) + (Simd32x3::from(self.group2()[3]) * other.group5())),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (swizzle!(other.group1(), 2, 3, 3, 3) * Simd32x4::from([self.group0()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(other.group1(), 0, 2, 0, 1) * Simd32x4::from([self.group0()[0], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                    (-(self.group2()[3] * other.group7()[0]) + (self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other[e1])),
                    (-(self.group2()[3] * other.group7()[1]) + (self.group0()[1] * other[e1]) + (self.group1()[0] * other.group1()[2])),
                    (-(self.group2()[3] * other.group7()[2]) + (self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            (-(self.group2()[3] * other.group6()[3]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorEvenAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group2()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[0]),
            (self.group2()[3] * other.group0()[1]),
            (self.group2()[3] * other.group0()[2]),
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for VersorEvenAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group2()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[3] * -1.0),
            (-(self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
            (-(self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
            (-(self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[0]),
            (self.group2()[3] * other.group0()[1]),
            (self.group2()[3] * other.group0()[2]),
            ((self.group2()[3] * other.group0()[3]) - (self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group2(), 3, 0, 1, 2) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for VersorEvenAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       14       29        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                ((self.group1()[3] * other[e2]) - (self.group2()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    (-(self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(self.group2(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]))),
        );
    }
}
impl Wedge<Scalar> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e415, e425, e435, e4
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorEvenAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group1()[3] * other.group0()[3]) + (self.group2()[3] * other[e4315])));
    }
}
impl Wedge<SphereAtOrigin> for VersorEvenAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group1()[3] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])));
    }
}
impl Wedge<SphereOnOrigin> for VersorEvenAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group2()[3] * other.group0()[3]));
    }
}
impl Wedge<VersorEven> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       29        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       22       37        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group3()[0]),
                (self.group1()[3] * other.group3()[1]),
                (self.group1()[3] * other.group3()[2]),
                ((self.group1()[3] * other.group2()[3]) - (self.group2()[3] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group3()[0] * -1.0),
                (self.group2()[3] * other.group3()[1] * -1.0),
                (self.group2()[3] * other.group3()[2] * -1.0),
                ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group3()[3]) + (self.group1()[3] * other.group2()[0]) + (self.group0()[0] * other.group2()[3])
                        - (self.group1()[1] * other.group3()[2])),
                    (-(self.group2()[1] * other.group3()[3]) + (self.group1()[3] * other.group2()[1]) - (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    (-(self.group2()[2] * other.group3()[3]) + (self.group1()[3] * other.group2()[2]) + (self.group0()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group3()[1])),
                    ((self.group2()[0] * other.group3()[0]) + (self.group2()[1] * other.group3()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd       11       14        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    0.0,
                    (-(self.group2()[0] * other.group1()[3]) + (self.group1()[3] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[3]) + (self.group1()[3] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[3]) + (self.group1()[3] * other.group2()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       22        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       12       24        0
    //  no simd       15       30        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group2()[3]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (self.group2()[3] * other.group0()[3] * -1.0),
                ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group2()[0]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[3])),
                    ((self.group1()[3] * other.group2()[1]) - (self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[3] * other.group2()[2]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group2()[3] * other.group1()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd       11       14        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x4::from(self.group2()[3]) * swizzle!(other.group0(), 3, 0, 1, 2))
                + Simd32x4::from([
                    0.0,
                    (-(self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                    (-(self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorEvenAligningOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group2()[3] * other.group1()[3] * -1.0),
            (-(self.group2()[0] * other.group1()[3]) - (self.group2()[3] * other.group0()[0])),
            (-(self.group2()[1] * other.group1()[3]) - (self.group2()[3] * other.group0()[1])),
            (-(self.group2()[2] * other.group1()[3]) - (self.group2()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorEvenAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       29        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       22       37        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group2()[0]),
                (self.group1()[3] * other.group2()[1]),
                (self.group1()[3] * other.group2()[2]),
                ((self.group1()[3] * other.group1()[3]) - (self.group2()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group2()[0] * -1.0),
                (self.group2()[3] * other.group2()[1] * -1.0),
                (self.group2()[3] * other.group2()[2] * -1.0),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group2()[3]) + (self.group1()[3] * other.group1()[0]) + (self.group0()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) + (self.group1()[3] * other.group1()[1]) - (self.group1()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group2()[3]) + (self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3])
                        - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[0] * other.group2()[0]) + (self.group2()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       27        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       29        0
    //  no simd       26       35        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group2()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       11        0
    //  no simd       10       14        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((other.group1() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       19       28        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[0]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[2])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[3])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[0]) + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7        8        0
    //  no simd       13       14        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((other.group1() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]))
                + (other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorEvenAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[0]),
            (self.group2()[3] * other.group0()[1]),
            (self.group2()[3] * other.group0()[2]),
            ((self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorEvenAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       27        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       29        0
    //  no simd       26       35        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * other.group1())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group2()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl InfixWedge for VersorEvenAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorEvenAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group2()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorEvenAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group2()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for VersorEvenAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group2()[3] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for VersorEvenAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       16       29        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                ((self.group0()[1] * other.group1()[3]) - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[3]) - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group1()[3]) - (self.group2()[3] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) * -1.0),
                    ((self.group1()[2] * other.group1()[0]) * -1.0),
                    ((self.group1()[0] * other.group1()[1]) * -1.0),
                    (-(self.group2()[3] * other.group0()[3])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[3] * other.group1()[3])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       22        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]))])),
        );
    }
}
impl Wedge<AntiLine> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                ((self.group2()[3] * other.group0()[1]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group2()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotor> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       27        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                ((self.group2()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group2()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for VersorEvenAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       25        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                ((self.group0()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group0()[0]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) * -1.0),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       21        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       22        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        8       25        0
    //  no simd       11       34        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            (other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       22       34        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       32        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       12       34        0
    //  no simd       18       40        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[0] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (self.group2()[3] * other.group1()[0] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group1()[1] * -1.0),
                (self.group2()[3] * other.group1()[2] * -1.0),
                (self.group2()[3] * other.group1()[3] * -1.0),
                (-(self.group1()[3] * other.group1()[0])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                + (swizzle!(other.group1(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for VersorEvenAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd       11       16        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (-(self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorEvenAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                    (-(self.group2()[3] * other.group0()[1]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorEvenAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        6       10        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorEvenAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorEvenAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorEvenAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0] * -1.0),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (-(self.group2()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[1])),
            ]),
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for VersorEvenAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       17       28        0
    //  no simd       20       31        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 3, 3) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                ((self.group2()[3] * other.group1()[1]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       12       22        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       22        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                ((self.group2()[3] * other.group0()[1]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group2()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorEvenAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       27        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                ((self.group2()[3] * other.group1()[1]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DualNum> for VersorEvenAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group1()[3]])),
        );
    }
}
impl Wedge<FlatOrigin> for VersorEvenAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for VersorEvenAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for VersorEvenAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<Flector> for VersorEvenAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for VersorEvenAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ Simd32x3::from([
            ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
            (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for VersorEvenAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[0] * -1.0),
            (-(self.group1()[3] * other.group0()[0]) + (self.group0()[3] * other.group0()[3]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Infinity> for VersorEvenAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group1()[3]])),
        );
    }
}
impl Wedge<Line> for VersorEvenAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        5        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorEvenAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for VersorEvenAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
        );
    }
}
impl Wedge<Motor> for VersorEvenAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       13        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    ((self.group1()[3] * other.group1()[3]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for VersorEvenAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (self.group0()[3] * other.group0()[3]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for VersorEvenAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
            (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorEvenAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       55        0
    //    simd3        4        6        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       43       67        0
    //  no simd       63       97        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group2()[3] * other.group9()[0])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[3] * other.group3()[3])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    + (self.group0()[3] * other.group9()[3])
                    + (self.group0()[2] * other.group9()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[3] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (self.group2()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 3, 3) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + (self.group1() * Simd32x4::from(other.group0()[0]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group3()[0]),
                    (self.group2()[3] * other.group3()[1]),
                    (self.group2()[3] * other.group3()[2]),
                    (-(self.group0()[1] * other.group5()[0]) - (self.group0()[2] * other.group5()[1])),
                ])),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[0])),
            ]),
            // e235, e315, e125
            ((Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]))),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(self.group0(), 3, 3, 1, 2) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group7()[0]) + (self.group0()[2] * other.group7()[1])),
                    (-(self.group2()[3] * other.group7()[0]) + (self.group1()[2] * other.group1()[1])
                        - (self.group1()[1] * other.group1()[2])
                        - (self.group0()[2] * other.group6()[2])),
                    (-(self.group2()[3] * other.group7()[1]) - (self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group6()[0])),
                    (-(self.group2()[3] * other.group7()[2]) + (self.group1()[1] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group6()[1])),
                ])),
            // e3215
            (-(self.group2()[3] * other.group6()[3])
                + (self.group2()[2] * other.group1()[2])
                + (self.group2()[1] * other.group1()[1])
                + (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group0()[3] * other.group8()[2])
                - (self.group0()[1] * other.group8()[0])
                - (self.group0()[2] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorEvenAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[0] * -1.0),
            (self.group2()[3] * other.group0()[1] * -1.0),
            (self.group2()[3] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for VersorEvenAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group2()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorEvenAtInfinity {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        6       21        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group2()[3] * other.group0()[0]) * -1.0),
                    ((self.group2()[3] * other.group0()[1]) * -1.0),
                    ((self.group2()[3] * other.group0()[2]) * -1.0),
                ])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[3], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<Origin> for VersorEvenAtInfinity {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for VersorEvenAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for VersorEvenAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for VersorEvenAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       31        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       12       32        0
    //  no simd       15       35        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other[e2]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[3] * other[e2]) - (self.group2()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other[e2]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorEvenAtInfinity {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       12        0
    //  no simd        0       24        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            (self.group0() * Simd32x4::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorEvenAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self.group2()[3] * other[e4315]) + (self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for VersorEvenAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group2()[3] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for VersorEvenAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group2()[3] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<VersorEven> for VersorEvenAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       30        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       34       50        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                (self.group0()[3] * other.group3()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[0])),
                (self.group2()[3] * other.group3()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 1, 2, 3, 3) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]))
                - (other.group3() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1]))])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group3()[3]) - (self.group1()[1] * other.group3()[2]) + (self.group0()[3] * other.group1()[1])),
                    (-(self.group2()[1] * other.group3()[3]) - (self.group1()[2] * other.group3()[0]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group3()[3]) - (self.group1()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group3()[1]) + (self.group2()[0] * other.group3()[0]) + (self.group1()[3] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorEvenAtInfinity {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       15       31        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (self.group0()[3] * other.group2()[3]),
                (-(self.group1()[3] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[1] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[2] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[3] * other.group2()[3]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorEvenAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       26        0
    //  no simd       22       32        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                ((self.group0()[1] * other.group2()[3]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[3] * other.group2()[3]) - (self.group2()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                    (-(self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[3] * other.group2()[3])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorEvenAtInfinity {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       19        0
    //  no simd        9       25        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group1()[3]) - (self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[3], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(self.group0(), 3, 3, 1, 2) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorEvenAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       32        0
    //  no simd       28       44        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group2()[3] * -1.0),
                (self.group0()[2] * other.group2()[3] * -1.0),
                (self.group0()[3] * other.group2()[3] * -1.0),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                (self.group2()[3] * other.group2()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 1, 2, 3, 3) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (other.group2() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1]))])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group2()[3]) - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) - (self.group1()[2] * other.group2()[0])),
                    (-(self.group2()[2] * other.group2()[3]) - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group2()[1]) + (self.group2()[0] * other.group2()[0]) + (self.group1()[3] * other.group1()[3])
                        - (self.group0()[3] * other.group1()[2])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for VersorEvenAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       31        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       23       35        0
    //  no simd       35       47        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])),
                ])),
            // e415, e425, e435, e321
            ((other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 3, 3) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                ((self.group2()[3] * other.group1()[1]) + (self.group2()[1] * other.group0()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group0()[3])
                        + (self.group0()[1] * other.group2()[0])
                        + (self.group0()[2] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorEvenAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       26        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       25       34        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group2()[0])),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 3, 3) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (self.group1() * Simd32x4::from(other.group0()[0]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group2()[0] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group2()[3] * other.group1()[1]) + (self.group2()[1] * other.group0()[0]) - (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group2()[3] * other.group1()[2]) + (self.group2()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    ((self.group2()[3] * other.group1()[3]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorEvenAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[2])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorEvenAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       28       40        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[1], self.group2()[2]]))
                + (swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])),
                ((self.group2()[3] * other.group1()[1]) + (self.group2()[1] * other.group0()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl InfixWedge for VersorEvenAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorEvenAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiDualNum> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]])),
            // e415, e425, e435, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1])]),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorEvenAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(other[e321]) * Simd32x2::from([self.group1()[3], self.group0()[3]]) * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlatPoint> for VersorEvenAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       18        0
    //  no simd        9       24        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group1()[3] * other.group0()[3]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorEvenAtOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       17        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorEvenAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotor> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorEvenAtOrigin {
    type Output = VersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       19        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorEvenAtOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        4       26        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        6       22        0
    //  no simd        9       31        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (swizzle!(other.group1(), 1, 2, 3, 0)
                * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                (self.group1()[3] * other.group1()[3] * -1.0),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(self.group1() * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for VersorEvenAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group2()[1]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group2()[2]) - (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group1()[3] * -1.0),
            ]),
            // e1234
            (self.group0()[3] * other.group1()[3]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((Simd32x3::from(self.group0()[3]) * other.group2()) - (Simd32x3::from(self.group1()[3]) * other.group0())),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorEvenAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (self.group1()[3] * other.group0()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((Simd32x3::from(self.group0()[3]) * other.group1()) - (Simd32x3::from(self.group1()[3]) * other.group0())),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorEvenAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) - (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e1234
            (self.group0()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<Dipole> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group0()[3] * other.group1()[0]) + (self.group1()[3] * other.group0()[0])),
            ((self.group0()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1])),
            ((self.group0()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       12        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group0()[3] * other.group1()[0]) + (self.group1()[3] * other.group0()[0])),
            ((self.group0()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1])),
            ((self.group0()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DualNum> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Flector) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Horizon> for VersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for VersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for VersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<Motor> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[3]),
            ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorEvenAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       33        0
    //    simd3        2        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       22       41        0
    //  no simd       32       59        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group9()[0]) - (self.group1()[2] * other.group3()[2]) - (self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0])
                    + (self.group0()[3] * other[e45])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e5
            (self.group1()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other[e1]) - (self.group1()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[3] * other.group4()[0]) + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[3] * other.group4()[1]) + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[3] * other.group4()[2]) + (self.group1()[3] * other.group3()[2])),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(self.group1()[3]) * other.group5())),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from([other.group6()[3], other[e1], other[e1], other[e1]]))
                - (swizzle!(other.group1(), 2, 3, 3, 3) * Simd32x4::from([self.group0()[2], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    (-(self.group1()[3] * other.group7()[0]) + (self.group0()[3] * other.group8()[0])),
                    (-(self.group1()[3] * other.group7()[1]) + (self.group0()[3] * other.group8()[1])),
                    (-(self.group1()[3] * other.group7()[2]) + (self.group0()[3] * other.group8()[2])),
                ])),
            // e3215
            (-(self.group1()[3] * other.group6()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorEvenAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for VersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[3] * -1.0),
            (-(self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
            (-(self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for VersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       23        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other[e2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[1])) - (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]))),
        );
    }
}
impl Wedge<Scalar> for VersorEvenAtOrigin {
    type Output = VersorEvenAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtOrigin::from_groups(
            // e423, e431, e412, e4
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other[e4315])));
    }
}
impl Wedge<SphereAtOrigin> for VersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[3] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])));
    }
}
impl Wedge<SphereOnOrigin> for VersorEvenAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl Wedge<VersorEven> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       16       31        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group3()[0]),
                (self.group0()[3] * other.group3()[1]),
                (self.group0()[3] * other.group3()[2]),
                ((self.group0()[3] * other.group2()[3]) - (self.group1()[3] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group3()[0] * -1.0),
                (self.group1()[3] * other.group3()[1] * -1.0),
                (self.group1()[3] * other.group3()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group3()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                    (-(self.group1()[1] * other.group3()[3]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                    (-(self.group1()[2] * other.group3()[3]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                    ((self.group1()[2] * other.group3()[2]) + (self.group1()[0] * other.group3()[0]) + (self.group1()[1] * other.group3()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd       11       14        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group2()[3]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    0.0,
                    (-(self.group1()[0] * other.group1()[3]) + (self.group0()[3] * other.group2()[0])),
                    (-(self.group1()[1] * other.group1()[3]) + (self.group0()[3] * other.group2()[1])),
                    (-(self.group1()[2] * other.group1()[3]) + (self.group0()[3] * other.group2()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       21        0
    //  no simd        9       24        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group2()[3]])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group1()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd       11       14        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            ((swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group1()[3])) - (Simd32x4::from(self.group1()[3]) * swizzle!(other.group0(), 3, 0, 1, 2))
                + Simd32x4::from([
                    0.0,
                    (-(self.group1()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                    (-(self.group1()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                    (-(self.group1()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorEvenAtOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[3] * -1.0),
            (-(self.group1()[0] * other.group1()[3]) - (self.group1()[3] * other.group0()[0])),
            (-(self.group1()[1] * other.group1()[3]) - (self.group1()[3] * other.group0()[1])),
            (-(self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorEvenAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       16       31        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                ((self.group0()[3] * other.group1()[3]) - (self.group1()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group2()[0] * -1.0),
                (self.group1()[3] * other.group2()[1] * -1.0),
                (self.group1()[3] * other.group2()[2] * -1.0),
                ((self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * other.group0())
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group2()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                    (-(self.group1()[1] * other.group2()[3]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                    (-(self.group1()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                    ((self.group1()[2] * other.group2()[2]) + (self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group3()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    ((self.group1()[3] * other.group2()[3])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       11        0
    //  no simd       10       14        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])
                        + (self.group0()[3] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7        8        0
    //  no simd       13       14        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorEvenAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorEvenAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    ((self.group1()[3] * other.group2()[3])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl InfixWedge for VersorEvenOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorEvenOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl Wedge<AntiDualNum> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e4
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorEvenOnOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group1()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for VersorEvenOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group1()[3]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group1()),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * swizzle!(other.group0(), 3, 0, 1, 2))
                - (swizzle!(other.group1(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (self.group1()[3] * other.group0()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 3, 2, 0, 1) * swizzle!(other.group0(), 0, 2, 3, 1))
                - (swizzle!(other.group0(), 3, 3, 1, 2) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<AntiLine> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiMotor> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                ])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        5       12        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                ])),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group1()[0]),
                    (self.group1()[3] * other.group1()[1]),
                    (self.group1()[3] * other.group1()[2]),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (self.group1()[3] * other.group1()[3]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 3, 2, 0, 1) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[3], other.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 1, 2) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([(-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<Circle> for VersorEvenOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Circle) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorEvenOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group2()));
    }
}
impl Wedge<CircleAtInfinity> for VersorEvenOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorEvenOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group1()));
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorEvenOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<Dipole> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group2()[0]),
                (self.group1()[3] * other.group2()[1]),
                (self.group1()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[0]),
            (self.group1()[3] * other.group1()[1]),
            (self.group1()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[0]),
            (self.group1()[3] * other.group1()[1]),
            (self.group1()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group2()[0]),
                (self.group1()[3] * other.group2()[1]),
                (self.group1()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DualNum> for VersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Flector) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Horizon> for VersorEvenOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for VersorEvenOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for VersorEvenOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0()));
    }
}
impl Wedge<Motor> for VersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[3]),
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for VersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorEvenOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       23        0
    //    simd3        1        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       17       28        0
    //  no simd       25       41        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other[e45]) - (self.group1()[2] * other.group5()[2]) - (self.group1()[1] * other.group5()[1]) - (self.group1()[0] * other.group5()[0])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[0])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[3] * other.group4()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group4()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group4()[2])),
                0.0,
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group1()[3]) * other.group5())),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (swizzle!(other.group1(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other[e1])),
                    ((self.group0()[1] * other[e1]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for VersorEvenOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other[e2])),
                    ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other[e2])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[3], self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e415, e425, e435, e4
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorEvenOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl Wedge<SphereAtOrigin> for VersorEvenOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[0]));
    }
}
impl Wedge<VersorEven> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]])),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                    ((self.group1()[2] * other.group3()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group3()[0]) + (self.group0()[2] * other.group2()[3])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group2()[3]),
            ((self.group0()[0] * other.group2()[3]) + (self.group1()[3] * other.group2()[0])),
            ((self.group0()[1] * other.group2()[3]) + (self.group1()[3] * other.group2()[1])),
            ((self.group0()[2] * other.group2()[3]) + (self.group1()[3] * other.group2()[2])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[3], other.group2()[3]])),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[3], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(other.group0(), 3, 3, 1, 2) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[2]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group2()[3])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorEvenOnOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[3]),
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[3] * other.group1()[0])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorEvenOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group2(), 2, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                    ((self.group1()[2] * other.group2()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group1()[1] * other.group2()[0]) + (self.group0()[2] * other.group1()[3])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group2()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[0]),
            (self.group1()[3] * other.group1()[1]),
            (self.group1()[3] * other.group1()[2]),
            ((self.group1()[3] * other.group2()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[0]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[2])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[3])),
                (self.group1()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorEvenOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group1()[0]),
            (self.group1()[3] * other.group1()[1]),
            (self.group1()[3] * other.group1()[2]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorEvenOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self.group1()[3]) * other.group1())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group2()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl InfixWedge for VersorEvenOrthogonalOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group1()[2]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       12        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1234
            ((self.group2()[3] * other.group0()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       13        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (self.group2()[3] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1])]),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorEvenOrthogonalOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (Simd32x2::from(other[e321]) * Simd32x2::from([self.group1()[3], self.group2()[3]]) * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlatPoint> for VersorEvenOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group2()[0] * other.group0()[0])),
            ]),
            // e1234
            (self.group2()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<AntiFlector> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       22       34        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0])),
                (self.group2()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (self.group2() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       12       23        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (self.group2()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e3215
            ((swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]))])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                ((self.group2()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[1] * other.group1()[2])),
                ((self.group2()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[0] * other.group1()[2])),
                (-(self.group2()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[0] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotor> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       18       34        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group2()[0] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[2] * other.group1()[0]) - (self.group2()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       22        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        8       23        0
    //  no simd       11       26        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[3]),
                    (self.group2()[1] * other.group0()[3]),
                    (self.group2()[2] * other.group0()[3]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       21        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e3215
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       33        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       18       34        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       37        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       16       38        0
    //  no simd       19       41        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group1()[0]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group2()[2] * other.group1()[0]) + (self.group2()[3] * other.group1()[3])),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[1] * other.group1()[3]) - (self.group2()[2] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[3]) + (self.group2()[2] * other.group1()[1])),
                ((self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group1()[1])),
                (self.group1()[3] * other.group1()[0] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                (self.group1()[3] * other.group1()[3] * -1.0),
                ((self.group2()[3] * other.group0()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(self.group1() * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])),
                ])),
        );
    }
}
impl Wedge<Circle> for VersorEvenOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       20        0
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0]) + (self.group2()[2] * other.group1()[1])),
                    ((self.group2()[3] * other.group2()[1]) + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[3] * other.group2()[2]) + (self.group2()[1] * other.group1()[0])),
                    (-(self.group2()[1] * other.group2()[1]) - (self.group2()[0] * other.group2()[0])),
                ])),
            // e1234
            ((self.group2()[3] * other.group1()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorEvenOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0]) + (self.group2()[2] * other.group1()[1]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[3] * other.group2()[1]) - (self.group1()[3] * other.group0()[1]) + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[3] * other.group2()[2]) + (self.group2()[1] * other.group1()[0]) - (self.group1()[3] * other.group0()[2])),
                    (-(self.group2()[0] * other.group2()[0]) - (self.group2()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        9       14        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group2()[2] * other.group0()[1])),
                    ((self.group2()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group2()[1] * other.group0()[0])),
                    (-(self.group2()[1] * other.group1()[1]) - (self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group1()[0])),
                ])),
            // e1234
            (self.group2()[3] * other.group0()[3]),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) + (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group2()[3] * other.group1()[1])),
                (-(self.group1()[3] * other.group0()[2]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
            ]),
            // e1234
            ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            ((swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group2()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group1()[3] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group2()[0] * other.group1()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorEvenOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        9       14        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * other.group0())
                + Simd32x4::from([
                    (self.group2()[3] * other.group1()[0]),
                    (self.group2()[3] * other.group1()[1]),
                    (self.group2()[3] * other.group1()[2]),
                    (-(self.group2()[2] * other.group1()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0])),
                ])),
            // e1234
            ((self.group2()[3] * other.group0()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       33        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       23       34        0
    //  no simd       26       37        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group1()[2]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group2(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[3] * other.group2()[1]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[3] * other.group2()[2]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group2()[1]) + (self.group1()[3] * other.group1()[0]) + (self.group2()[1] * other.group2()[2])),
                ((self.group2()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1]) - (self.group2()[0] * other.group2()[2])),
                (-(self.group2()[1] * other.group2()[0]) + (self.group1()[3] * other.group1()[2]) + (self.group2()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       18       28        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group2()[2] * other.group0()[1]),
                    (self.group2()[0] * other.group0()[2]),
                    (self.group2()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[3] * other.group0()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((self.group2()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((self.group2()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       11       22        0
    //  no simd       14       25        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group2(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group2()[3] * other.group1()[0]),
                    (self.group2()[3] * other.group1()[1]),
                    (self.group2()[3] * other.group1()[2]),
                    (-(self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[1] * other.group1()[2])),
                ((self.group2()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[0] * other.group1()[2])),
                (-(self.group2()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[0] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       24        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[1]) + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[2]) + (self.group2()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group2()[2] * other.group0()[1]),
                    (self.group2()[0] * other.group0()[2]),
                    (self.group2()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       22       33        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group1()[2]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group0()[1]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group0()[2]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group2()[1]) + (self.group1()[3] * other.group1()[0]) + (self.group2()[1] * other.group2()[2])),
                ((self.group2()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1]) - (self.group2()[0] * other.group2()[2])),
                (-(self.group2()[1] * other.group2()[0]) + (self.group1()[3] * other.group1()[2]) + (self.group2()[0] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<DualNum> for VersorEvenOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other.group0()[0])),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for VersorEvenOrthogonalOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for VersorEvenOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        9       16        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Flector> for VersorEvenOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                ((self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group2()[0] * other.group0()[0] * -1.0),
            (self.group2()[1] * other.group0()[0] * -1.0),
            (self.group2()[2] * other.group0()[0] * -1.0),
            ((self.group2()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Horizon> for VersorEvenOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group2()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorEvenOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other[e5])),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[e5])),
        );
    }
}
impl Wedge<Line> for VersorEvenOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group2()[2] * other.group0()[1])),
                    ((self.group2()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group2()[1] * other.group0()[0])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group2()[3] * other.group0()[0]),
            (self.group2()[3] * other.group0()[1]),
            (self.group2()[3] * other.group0()[2]),
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<LineOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]))),
        );
    }
}
impl Wedge<Motor> for VersorEvenOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other.group1()[3])),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3])),
                    (-(self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<MotorAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group0()[0]),
                    (self.group2()[3] * other.group0()[1]),
                    (self.group2()[3] * other.group0()[2]),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<MotorOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
            ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
            (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorEvenOrthogonalOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       56        0
    //    simd3        6        8        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       50       71        0
    //  no simd       77      108        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group2()[3] * other[e45])
                    + (self.group2()[2] * other.group9()[3])
                    + (self.group2()[1] * other.group9()[2])
                    + (self.group2()[0] * other.group9()[1])
                    + (self.group1()[3] * other.group9()[0])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[0])),
            // e5
            (self.group1()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]))),
            // e15, e25, e35
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group4()[0]) + (self.group1()[3] * other.group3()[0])),
                    ((self.group2()[3] * other.group4()[1]) + (self.group1()[3] * other.group3()[1])),
                    ((self.group2()[3] * other.group4()[2]) + (self.group1()[3] * other.group3()[2])),
                    (-(self.group2()[1] * other.group5()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group2()[0] * other.group5()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group3()[1]) - (self.group2()[1] * other.group3()[2])),
                    (-(self.group2()[2] * other.group3()[0]) + (self.group2()[0] * other.group3()[2])),
                    ((self.group2()[1] * other.group3()[0]) - (self.group2()[0] * other.group3()[1])),
                ])),
            // e235, e315, e125
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group5())),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group6()[3], other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(self.group2(), 2, 2, 0, 1) * Simd32x4::from([other.group7()[2], other.group6()[1], other.group6()[2], other.group6()[0]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group7()[1]) + (self.group2()[0] * other.group7()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                    (-(self.group2()[1] * other.group6()[2]) - (self.group1()[3] * other.group7()[0]) + (self.group0()[0] * other[e1])),
                    (-(self.group2()[2] * other.group6()[0]) - (self.group1()[3] * other.group7()[1]) + (self.group0()[1] * other[e1])),
                    (-(self.group2()[0] * other.group6()[1]) - (self.group1()[3] * other.group7()[2]) + (self.group0()[2] * other[e1])),
                ])),
            // e3215
            (-(self.group2()[2] * other.group8()[2]) - (self.group2()[1] * other.group8()[1]) - (self.group2()[0] * other.group8()[0]) - (self.group1()[3] * other.group6()[3])
                + (self.group1()[2] * other.group1()[2])
                + (self.group1()[1] * other.group1()[1])
                + (self.group0()[3] * other[e1])
                + (self.group1()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0] * -1.0),
            (self.group1()[3] * other.group0()[1] * -1.0),
            (self.group1()[3] * other.group0()[2] * -1.0),
            ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        6       21        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                ])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<Origin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for VersorEvenOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group2()[3] * other.group0()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       19       37        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))),
            // e15, e25, e35, e1234
            (-(other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other[e2]),
                    (self.group2()[1] * other[e2]),
                    (self.group2()[2] * other[e2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other[e2]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) * -1.0),
                    ((self.group1()[1] * other.group0()[3]) * -1.0),
                    ((self.group1()[2] * other.group0()[3]) * -1.0),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       19        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        4       23        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group2()[0] * other.group0()[0] * -1.0),
                (self.group2()[1] * other.group0()[0] * -1.0),
                (self.group2()[2] * other.group0()[0] * -1.0),
                (-(self.group1()[3] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[1]),
                (self.group2()[1] * other.group0()[1]),
                (self.group2()[2] * other.group0()[1]),
                (self.group0()[3] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[1]),
            ]),
        );
    }
}
impl Wedge<Scalar> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorEvenOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(
            // e12345
            ((self.group2()[3] * other.group0()[3])
                + (self.group2()[2] * other.group0()[2])
                + (self.group2()[1] * other.group0()[1])
                + (self.group1()[3] * other[e4315])
                + (self.group2()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<SphereAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group1()[3] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])));
    }
}
impl Wedge<SphereOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<VersorEven> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       26        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       24       33        0
    //  no simd       42       54        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group2()[0] * other.group3()[3]) + (self.group2()[3] * other.group3()[0])),
                (-(self.group2()[1] * other.group3()[3]) + (self.group2()[3] * other.group3()[1])),
                (-(self.group2()[2] * other.group3()[3]) + (self.group2()[3] * other.group3()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))),
            // e15, e25, e35, e1234
            (-(other.group3() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + (self.group2() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[2] * other.group3()[3])),
                    (-(self.group2()[1] * other.group2()[1]) - (self.group2()[0] * other.group2()[0])
                        + (self.group1()[2] * other.group3()[2])
                        + (self.group1()[1] * other.group3()[1])
                        + (self.group1()[0] * other.group3()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       29        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       22       37        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group2()[0] * other.group1()[3] * -1.0),
                (self.group2()[1] * other.group1()[3] * -1.0),
                (self.group2()[2] * other.group1()[3] * -1.0),
                (-(self.group1()[3] * other.group1()[3]) + (self.group2()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group2()[3]),
                (self.group2()[1] * other.group2()[3]),
                (self.group2()[2] * other.group2()[3]),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) - (self.group0()[3] * other.group1()[3]) + (self.group2()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) - (self.group1()[3] * other.group0()[0]) + (self.group0()[0] * other.group2()[3])
                        - (self.group1()[0] * other.group1()[3])),
                    ((self.group2()[0] * other.group1()[2]) - (self.group1()[3] * other.group0()[1]) + (self.group0()[1] * other.group2()[3])
                        - (self.group1()[1] * other.group1()[3])),
                    ((self.group2()[1] * other.group1()[0]) - (self.group1()[3] * other.group0()[2]) + (self.group0()[2] * other.group2()[3])
                        - (self.group1()[2] * other.group1()[3])),
                    (-(self.group2()[1] * other.group2()[1]) - (self.group2()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       28       40        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (self.group2()[3] * other.group0()[3]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[2])),
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group0()[1])),
                (self.group2()[3] * other.group2()[3]),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 3, 3) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (self.group2() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2]))])),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[1] * other.group2()[3]) + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])),
                    (-(self.group2()[1] * other.group2()[1]) - (self.group2()[0] * other.group2()[0]) - (self.group1()[3] * other.group1()[3])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       16       31        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3] * -1.0),
                (self.group2()[1] * other.group0()[3] * -1.0),
                (self.group2()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[3]) + (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group1()[3]),
                (self.group2()[1] * other.group1()[3]),
                (self.group2()[2] * other.group1()[3]),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[0] * other.group0()[3])),
                    (-(self.group1()[3] * other.group0()[1]) + (self.group0()[1] * other.group1()[3]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group1()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[2] * other.group0()[3])),
                    (-(self.group2()[2] * other.group1()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group2(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group0()[3], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                    (-(self.group1()[0] * other.group1()[3]) - (self.group1()[3] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[3]) - (self.group1()[3] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       21       30        0
    //  no simd       36       48        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group2()[0] * other.group2()[3]) + (self.group2()[3] * other.group2()[0])),
                (-(self.group2()[1] * other.group2()[3]) + (self.group2()[3] * other.group2()[1])),
                (-(self.group2()[2] * other.group2()[3]) + (self.group2()[3] * other.group2()[2])),
                0.0,
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))),
            // e15, e25, e35, e1234
            (-(other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + (self.group2() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[3]])) - (Simd32x4::from(self.group1()[3]) * other.group0())
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) - (self.group1()[0] * other.group2()[3])),
                    ((self.group0()[1] * other.group1()[3]) - (self.group1()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group1()[3]) - (self.group1()[2] * other.group2()[3])),
                    (-(self.group2()[2] * other.group1()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0])
                        + (self.group1()[2] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOdd> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       23       36        0
    //  no simd       38       54        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    ((self.group2()[1] * other.group3()[1]) + (self.group2()[0] * other.group3()[0]) + (self.group1()[3] * other.group2()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group2(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group2()[3] * other.group2()[0]),
                    (self.group2()[3] * other.group2()[1]),
                    (self.group2()[3] * other.group2()[2]),
                    (-(self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group2()[1])
                    + (self.group2()[1] * other.group2()[2])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group2()[2] * other.group2()[0]) - (self.group2()[0] * other.group2()[2]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group2()[0])
                    + (self.group2()[0] * other.group2()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       27        0
    //  no simd       26       33        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group2()[2])
                        + (self.group2()[1] * other.group2()[1])
                        + (self.group2()[0] * other.group2()[0])
                        + (self.group1()[3] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[3] * other.group0()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((self.group2()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((self.group2()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       19       29        0
    //  no simd       28       41        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[0]),
                    (self.group0()[1] * other.group0()[0]),
                    (self.group0()[2] * other.group0()[0]),
                    ((self.group2()[2] * other.group2()[2]) + (self.group2()[1] * other.group2()[1]) + (self.group2()[0] * other.group2()[0])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[2])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group2(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group0()[1])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[3] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[1]) + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[2]) + (self.group2()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[1] * other.group1()[2]) + (self.group2()[0] * other.group1()[1]) + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group0()[3] * other.group0()[3])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorEvenOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       31        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       31       47        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                    ((self.group1()[3] * other.group2()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[3] * other.group2()[0]),
                    (self.group2()[3] * other.group2()[1]),
                    (self.group2()[3] * other.group2()[2]),
                    (-(self.group2()[2] * other.group1()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[2] * other.group2()[1])
                    + (self.group2()[1] * other.group2()[2])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group2()[2] * other.group2()[0]) - (self.group2()[0] * other.group2()[2]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group2()[0])
                    + (self.group2()[0] * other.group2()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (self.group2() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl InfixWedge for VersorOdd {}
impl Wedge<AntiCircleOnOrigin> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       13       24        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group2()[0] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        8        0
    //  no simd        1       17        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other.group0()[1])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group3()[0] * other.group0()[1]),
                (self.group3()[1] * other.group0()[1]),
                (self.group3()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[0]) + (self.group3()[3] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorOdd {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group1()[3] * other[e321] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e321])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiFlatPoint> for VersorOdd {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       24        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       31       40        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0]) + (self.group2()[3] * other.group1()[3])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) - (self.group2()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group2()[2] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group2()[1] * other.group1()[0]) - (self.group2()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       23        0
    //  no simd       15       29        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                - (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group3()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[1]))])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[2])),
                ((self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       25       41        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group3() * Simd32x4::from(other.group0()[3])) + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       28        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]))
                + Simd32x4::from([
                    (self.group3()[0] * other.group0()[3]),
                    (self.group3()[1] * other.group0()[3]),
                    (self.group3()[2] * other.group0()[3]),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       11       29        0
    //  no simd       17       35        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group3()[1] * other.group0()[1]) + (self.group2()[3] * other.group0()[3]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       27        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiScalar> for VersorOdd {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       23        0
    //  no simd       17       35        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[3]),
                    (self.group2()[1] * other.group0()[3]),
                    (self.group2()[2] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       33        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       25       41        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group3() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       25       40        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group1(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group3()[1] * other.group1()[2]) + (self.group3()[0] * other.group1()[1])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 1, 2, 3, 3))
                + Simd32x4::from([
                    (self.group2()[0] * other.group1()[0]),
                    (self.group2()[1] * other.group1()[0]),
                    (self.group2()[2] * other.group1()[0]),
                    (-(self.group1()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[2])),
                ((self.group2()[0] * other.group1()[3]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group1(), 1, 2, 3, 0)),
        );
    }
}
impl Wedge<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       17        0
    //  no simd        9       20        0
    fn wedge(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorOdd {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorOdd {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       11        0
    //  no simd        6       14        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorOdd {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorOdd {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       32        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       22       34        0
    //  no simd       25       40        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorOdd {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       16       28        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       16       28        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorOdd {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorOdd {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       32        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       22       36        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<DualNum> for VersorOdd {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<FlatOrigin> for VersorOdd {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Flector> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0]))])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for VersorOdd {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
            ((self.group0()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
            ((self.group0()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Horizon> for VersorOdd {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorOdd {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Line> for VersorOdd {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorOdd {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineOnOrigin> for VersorOdd {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for VersorOdd {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for VersorOdd {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for VersorOdd {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       66        0
    //    simd3        6        8        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       57       82        0
    //  no simd       90      122        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[3] * other.group0()[0]),
                ((self.group3()[3] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group2()[3] * other[e1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group1()[3] * other.group6()[3])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[0])
                    + (self.group0()[3] * other.group0()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            ((self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group3()[0]),
                    (self.group0()[3] * other.group3()[1]),
                    (self.group0()[3] * other.group3()[2]),
                    (self.group1()[3] * other.group0()[0]),
                ])),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[3]) * other.group4()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[3]) * other.group5()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (self.group0() * Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group1()[3]) + (self.group0()[3] * other.group6()[0])),
                    ((self.group2()[1] * other.group1()[3]) + (self.group0()[3] * other.group6()[1])),
                    ((self.group2()[2] * other.group1()[3]) + (self.group0()[3] * other.group6()[2])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                + Simd32x3::from([
                    ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group8())
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group1()[1]) - (self.group2()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group1()[0]) - (self.group2()[0] * other.group1()[1])),
                ])),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[3], self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group9())
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group5()[0])
                        - (self.group0()[1] * other.group5()[1])),
                    ((self.group2()[2] * other.group3()[1])
                        + (self.group1()[3] * other.group5()[0])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group4()[2])),
                    ((self.group2()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group5()[1])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group4()[0])),
                    ((self.group2()[1] * other.group3()[0])
                        + (self.group1()[3] * other.group5()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group4()[1])),
                ])),
            // e3215
            ((self.group3()[3] * other.group0()[0])
                - (self.group2()[2] * other.group5()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                + (self.group0()[3] * other[e45])
                - (self.group1()[0] * other.group4()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorOdd {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorOdd {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for VersorOdd {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorOdd {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorOdd {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group2()[2], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([(-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<Origin> for VersorOdd {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]])),
            // e415, e425, e435, e4
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Plane> for VersorOdd {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for VersorOdd {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       31        0
    //  no simd       24       43        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group3()[1] * other.group0()[1]) + (self.group2()[3] * other[e2]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2])),
                    ((self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2])),
                    ((self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2]) - (self.group2()[0] * other.group0()[1])),
                (self.group0()[3] * other[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorOdd {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                ((self.group2()[3] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group3() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorOdd {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234
            (self.group0()[3] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for VersorOdd {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for VersorOdd {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       33        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       30       40        0
    //  no simd       48       61        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[1] * other.group3()[1]) + (self.group3()[0] * other.group3()[0]) + (self.group2()[3] * other.group2()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group3()[3]) + (self.group0()[3] * other.group1()[0])),
                    ((self.group2()[1] * other.group3()[3]) + (self.group0()[3] * other.group1()[1])),
                    ((self.group2()[2] * other.group3()[3]) + (self.group0()[3] * other.group1()[2])),
                    (-(self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group3()[1]) - (self.group2()[1] * other.group3()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                (-(self.group2()[2] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group2()[1] * other.group3()[0]) - (self.group2()[0] * other.group3()[1]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorOdd {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       27        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       29        0
    //  no simd       26       35        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       31        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       23       35        0
    //  no simd       35       47        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group2()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[1]) + (self.group2()[3] * other.group2()[3])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[3] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 1, 2, 3, 3))
                + (self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group1()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[3]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorOdd {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    ((self.group2()[3] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorOdd {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group2()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group2()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       23       36        0
    //  no simd       38       54        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    ((self.group3()[1] * other.group2()[1]) + (self.group3()[0] * other.group2()[0]) + (self.group2()[3] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group2(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group2()[0] * other.group2()[3]),
                    (self.group2()[1] * other.group2()[3]),
                    (self.group2()[2] * other.group2()[3]),
                    (-(self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group2()[1]) - (self.group2()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group2()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group2()[2])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group2()[1] * other.group2()[0]) - (self.group2()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       29        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       27       37        0
    //  no simd       48       61        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * other.group1()) + (self.group1() * Simd32x4::from(other.group0()[3]))),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                + (self.group2() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group3() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorOdd {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       21       33        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       17       27        0
    //  no simd       32       48        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * other.group1()) + (self.group1() * Simd32x4::from(other.group0()[0]))),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[0]),
                    (self.group2()[1] * other.group0()[0]),
                    (self.group2()[2] * other.group0()[0]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group3() * Simd32x4::from(other.group0()[0])) + (Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorOdd {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       15       26        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorOdd {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       30        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       23       36        0
    //  no simd       41       54        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                + (self.group2() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group3() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (other.group1() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl InfixWedge for VersorOddAligningOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorOddAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       12        0
    //  no simd       10       15        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiDualNum> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35, e1234
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e4235, e4315, e4125, e3215
            (self.group2() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[1] * other.group1()[1]) + (self.group2()[0] * other.group1()[0]) + (self.group1()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       22        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 2, 3, 1, 0))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorOddAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorOddAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       15       27        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[3]),
                    (self.group2()[1] * other.group0()[3]),
                    (self.group2()[2] * other.group0()[3]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlane> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       25        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       21        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       12       25        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       15       27        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 3, 1, 2, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group1()[1], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6        7        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group0()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for VersorOddAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       18        0
    //  no simd       16       21        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd        9       12        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + Simd32x3::from([
                    ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorOddAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       15        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorOddAligningOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       18        0
    //  no simd       16       21        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Infinity> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<Line> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorOddAligningOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       51        0
    //    simd3        0        1        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       44       66        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group2()[3] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group1()[3] * other[e1])
                    - (self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[3] * other.group6()[3])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[0] * other[e1]) - (self.group0()[3] * other.group1()[0])),
                ((self.group1()[1] * other.group1()[3]) + (self.group0()[1] * other[e1]) - (self.group0()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group1()[3]) + (self.group0()[2] * other[e1]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                    ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2])
                        + (self.group0()[3] * other.group5()[0])
                        + (self.group0()[1] * other.group4()[2])),
                    (-(self.group1()[2] * other.group3()[0])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[3] * other.group5()[1])
                        + (self.group0()[2] * other.group4()[0])),
                    ((self.group1()[1] * other.group3()[0]) - (self.group1()[0] * other.group3()[1])
                        + (self.group0()[3] * other.group5()[2])
                        + (self.group0()[0] * other.group4()[1])),
                ])),
            // e3215
            ((self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group5()[2]) - (self.group1()[0] * other.group5()[0]) - (self.group1()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorOddAligningOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            ((self.group2()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]])),
        );
    }
}
impl Wedge<RoundPoint> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       16       29        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other[e2]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
        );
    }
}
impl Wedge<Scalar> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group1() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       27        0
    //  no simd       26       33        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group3()[2])
                        + (self.group2()[1] * other.group3()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group1()[3] * other.group2()[3])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group3()[0])),
                ((self.group1()[1] * other.group3()[3]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group3()[1])),
                ((self.group1()[2] * other.group3()[3]) + (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7        8        0
    //  no simd       13       14        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[3] * other.group2()[3])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7        8        0
    //  no simd       13       14        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorOddAligningOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group1()[3]),
            (self.group1()[1] * other.group1()[3]),
            (self.group1()[2] * other.group1()[3]),
            ((self.group2()[3] * other.group1()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorOddAligningOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       27        0
    //  no simd       26       33        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group2()[2])
                        + (self.group2()[1] * other.group2()[1])
                        + (self.group2()[0] * other.group2()[0])
                        + (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group2()[3]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[2] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       21       33        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       12        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       15       27        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                ((self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[0]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddOnOrigin> for VersorOddAligningOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorOddAligningOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       21       33        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl InfixWedge for VersorOddAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for VersorOddAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       10       21        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group0()[0])),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDualNum> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       13        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group2()[0] * other.group0()[1]),
                (self.group2()[1] * other.group0()[1]),
                (self.group2()[2] * other.group0()[1]),
                ((self.group0()[0] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group1()[3] * other[e321] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e321])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiFlatPoint> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([(self.group1()[3] * other.group0()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlector> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       15       30        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) - (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group1()[0])),
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[0]) - (self.group0()[2] * other.group1()[2])),
                ((self.group1()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[0]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[0] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotor> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       28        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[3]),
                    (self.group2()[1] * other.group0()[3]),
                    (self.group2()[2] * other.group0()[3]),
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[3]),
                    (self.group2()[1] * other.group0()[3]),
                    (self.group2()[2] * other.group0()[3]),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiPlane> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       25        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) - (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       21        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiScalar> for VersorOddAtInfinity {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       11       26        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (self.group0()[3] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorOddAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       18       34        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group0()[0])),
                    (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       22       34        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    ((self.group2()[2] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[0] * other.group1()[1])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 1, 2, 3, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[1]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * swizzle!(other.group1(), 1, 2, 3, 0)),
        );
    }
}
impl Wedge<Circle> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       17        0
    fn wedge(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       11        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       11        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Dipole> for VersorOddAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       31        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorOddAtInfinity {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       22        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) - (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorOddAtInfinity {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       18        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorOddAtInfinity {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[2], self.group0()[3], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorOddAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       23        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       24        0
    //  no simd       13       27        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[2] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DualNum> for VersorOddAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[1])]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]])),
        );
    }
}
impl Wedge<FlatOrigin> for VersorOddAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group0()[0], self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorOddAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for VersorOddAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for VersorOddAtInfinity {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[0]) * other.group1())
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for VersorOddAtInfinity {
    type Output = FlectorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for VersorOddAtInfinity {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Horizon> for VersorOddAtInfinity {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorOddAtInfinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]])),
        );
    }
}
impl Wedge<Line> for VersorOddAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        9        0
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorOddAtInfinity {
    type Output = LineAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for VersorOddAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for VersorOddAtInfinity {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[0] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for VersorOddAtInfinity {
    type Output = MotorAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
            (self.group0()[0] * other.group0()[3]),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for VersorOddAtInfinity {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorOddAtInfinity {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       52        0
    //    simd3        5        8        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       42       65        0
    //  no simd       64       96        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[0]),
                ((self.group2()[3] * other.group1()[3]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[0] * other.group1()[0])
                    - (self.group1()[3] * other.group6()[3])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group0()[3] * other.group7()[2])
                    - (self.group0()[2] * other.group7()[1])
                    + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group7()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e5
            (self.group0()[0] * other[e1]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * other.group4()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group5()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (Simd32x4::from(self.group0()[0]) * other.group6())
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[3]),
                    (self.group0()[2] * other.group1()[3]),
                    (self.group0()[3] * other.group1()[3]),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * other.group7()) + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e235, e315, e125
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group8())
                + Simd32x3::from([
                    ((self.group0()[3] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
                    (-(self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[2], self.group0()[3], self.group0()[1]]))
                + (swizzle!(self.group0(), 0, 3, 0, 2) * Simd32x4::from([other.group9()[0], other.group3()[1], other.group9()[2], other.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0])),
                    ((self.group2()[0] * other.group0()[0])
                        + (self.group1()[3] * other.group5()[0])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[0] * other.group9()[1])),
                    ((self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group5()[1])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group1()[3] * other.group5()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group9()[3])),
                ])),
            // e3215
            ((self.group2()[3] * other.group0()[0])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                - (self.group0()[3] * other.group5()[2])
                - (self.group0()[2] * other.group5()[1])
                + (self.group0()[0] * other[e45])
                - (self.group0()[1] * other.group5()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorOddAtInfinity {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for VersorOddAtInfinity {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[0] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorOddAtInfinity {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[2], self.group0()[3], self.group0()[1]]))
                + (swizzle!(self.group0(), 0, 3, 1, 2) * swizzle!(other.group0(), 3, 1, 2, 0))
                + Simd32x4::from([(-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<Origin> for VersorOddAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]])),
            // e415, e425, e435, e4
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e4])),
        );
    }
}
impl Wedge<Plane> for VersorOddAtInfinity {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for VersorOddAtInfinity {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       14       30        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (self.group0()[3] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other[e2]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other[e2]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                ((self.group1()[2] * other[e2]) - (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                (self.group0()[0] * other[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]])),
            // e415, e425, e435, e4
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]])),
        );
    }
}
impl Wedge<Scalar> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            (self.group0() * Simd32x4::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorOddAtInfinity {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e1234
            (self.group0()[0] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for VersorOddAtInfinity {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for VersorOddAtInfinity {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<VersorEven> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       28        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       23       33        0
    //  no simd       35       48        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[2] * other.group3()[2]) + (self.group2()[1] * other.group3()[1]) + (self.group2()[0] * other.group3()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + Simd32x4::from([
                    (self.group0()[1] * other.group3()[3]),
                    (self.group0()[2] * other.group3()[3]),
                    (self.group0()[3] * other.group3()[3]),
                    (-(self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[3] * other.group3()[1]) + (self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group3()[2])),
                ((self.group1()[1] * other.group2()[3]) - (self.group0()[3] * other.group3()[0]) + (self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[2])),
                ((self.group1()[2] * other.group2()[3]) + (self.group0()[2] * other.group3()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[1])),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       19       28        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[0] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorOddAtInfinity {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       26        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       25       34        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[0])),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group1()) - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 1, 2, 3, 3))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group2()[3]) - (self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group0()[3])),
                ((self.group1()[2] * other.group2()[3]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[0] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorOddAtInfinity {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
                (self.group0()[0] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorOddAtInfinity {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       19       29        0
    //  no simd       28       41        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    ((self.group2()[2] * other.group2()[2]) + (self.group2()[1] * other.group2()[1]) + (self.group2()[0] * other.group2()[0])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group2(), 0, 1, 2, 2))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[0]) - (self.group0()[2] * other.group2()[2])),
                ((self.group1()[1] * other.group1()[3]) - (self.group0()[3] * other.group2()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[2])),
                ((self.group1()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[1])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for VersorOddAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       17       27        0
    //  no simd       32       48        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (self.group1() * Simd32x4::from(other.group0()[3]))),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[0]) * other.group2())
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (self.group0()[3] * other.group0()[3]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                + (swizzle!(self.group0(), 3, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group3()[1], other.group0()[0], other.group3()[3]]))
                - (swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[0] * other.group3()[0])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorOddAtInfinity {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       15       27        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 3, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group2()[1], other.group0()[0], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorOddAtInfinity {
    type Output = VersorOddAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       14       23        0
    //  no simd       23       35        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAtInfinity::from_groups(
            // scalar, e15, e25, e35
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (self.group1() * Simd32x4::from(other.group0()[0]))),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[0]))
                + (Simd32x4::from(self.group0()[0]) * other.group2())
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                    (-(self.group1()[2] * other.group0()[3])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[3] * other.group1()[2])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorOddAtInfinity {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       20        0
    //  no simd        9       23        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[2]) * -1.0),
                    ((self.group0()[3] * other.group0()[0]) * -1.0),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorOddAtInfinity {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[2], self.group0()[3], self.group0()[1]]))
                + (swizzle!(self.group0(), 0, 3, 0, 2) * Simd32x4::from([other.group1()[0], other.group0()[1], other.group1()[2], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorOddAtInfinity {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       25       41        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[0]) * other.group2())
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (self.group0()[3] * other.group0()[3]),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group2() * Simd32x4::from(other.group0()[3])) + (other.group1() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]))
                - (swizzle!(self.group0(), 2, 3, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                ])),
        );
    }
}
impl InfixWedge for VersorOddAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorOddAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        7       12        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiDualNum> for VersorOddAtOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35, e1234
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       19        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorOddAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       12        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorOddAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorOddAtOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        2        3        0
    // no simd        4        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e3215, e1234
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group0()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group0()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group0()[1]]))),
        );
    }
}
impl Wedge<AntiMotor> for VersorOddAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       20        0
    //  no simd        9       23        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) * -1.0),
                    ((self.group0()[0] * other.group1()[2]) * -1.0),
                    ((self.group0()[1] * other.group1()[0]) * -1.0),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorOddAtOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorOddAtOrigin {
    type Output = CircleAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        4        0
    // no simd        6       12        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e235, e315, e125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorOddAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0]))])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       18        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        9       22        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 3, 1, 2, 0))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[2]) * -1.0),
                    ((self.group0()[0] * other.group1()[3]) * -1.0),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[1] * other.group1()[0]),
                (self.group1()[2] * other.group1()[0]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        6        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for VersorOddAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        2        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd        9       12        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + Simd32x3::from([
                    ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorOddAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       12        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        3        4        0
    // no simd        9       12        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorOddAtOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       13       18        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Infinity> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<Line> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group1()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorOddAtOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       41        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       25       44        0
    //  no simd       31       52        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other[e1]) - (self.group1()[2] * other.group7()[2]) - (self.group1()[1] * other.group7()[1]) - (self.group1()[0] * other.group7()[0])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[1] * other[e1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[2] * other[e1]) + (self.group1()[2] * other.group1()[3])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
            ]),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group1(), 3, 2, 0, 1) * Simd32x4::from([other.group0()[0], other.group3()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                    (-(self.group1()[1] * other.group3()[2]) + (self.group0()[1] * other.group4()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group0()[2] * other.group4()[0])),
                    (-(self.group1()[0] * other.group3()[1]) + (self.group0()[0] * other.group4()[1])),
                ])),
            // e3215
            (-(self.group1()[2] * other.group5()[2]) - (self.group1()[1] * other.group5()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group5()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorOddAtOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
        );
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Origin> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<RoundPoint> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       10       24        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (self.group1()[3] * other[e2]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        2        0
    // no simd        4        8        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]))
                + (self.group1() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl Wedge<Scalar> for VersorOddAtOrigin {
    type Output = VersorOddAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOddAtOrigin::from_groups(
            // e41, e42, e43, e3215
            (self.group0() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[3] * other.group2()[3])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group1()[0] * other.group3()[3])),
                ((self.group0()[1] * other.group2()[3]) + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group1()[2] * other.group3()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7        8        0
    //  no simd       13       14        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    ((self.group1()[3] * other.group2()[3]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7        8        0
    //  no simd       13       14        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorOddAtOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group1()[3]),
            (self.group1()[1] * other.group1()[3]),
            (self.group1()[2] * other.group1()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorOddAtOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       19       26        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3])),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[2] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for VersorOddAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       15       26        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       12        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for VersorOddAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       20        0
    //  no simd        9       23        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                ((self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 3, 1, 2, 0))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[2]) * -1.0),
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       12        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddOnOrigin> for VersorOddAtOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
            ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
            (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorOddAtOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       15       26        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl InfixWedge for VersorOddOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorOddOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiDualNum> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e1234, e4235, e4315, e4125
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 2, 3, 1, 0))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorOddOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorOddOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            ((swizzle!(other.group0(), 3, 0, 1, 2) * Simd32x4::from([self.group1()[0], self.group0()[3], self.group0()[3], self.group0()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (self.group1()[3] * other.group0()[3]),
                ])),
        );
    }
}
impl Wedge<AntiPlane> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       15        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        2       15        0
    //  no simd        5       18        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                ])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group1()[1], other.group0()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]))])),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        4        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for VersorOddOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorOddOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorOddOnOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DualNum> for VersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        2        0
    // no simd        3        6        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
        );
    }
}
impl Wedge<Flector> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Infinity> for VersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl Wedge<Line> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorOddOnOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        3        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for VersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group1()[0] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for VersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            ((self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorOddOnOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       25       40        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[0] * other[e1])
                    - (self.group0()[3] * other.group6()[3])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other[e1]) - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other[e1]) - (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e1234, e4235, e4315, e4125
            ((self.group1() * Simd32x4::from(other.group0()[0]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                    ((self.group0()[3] * other.group5()[0]) + (self.group0()[1] * other.group4()[2])),
                    ((self.group0()[3] * other.group5()[1]) + (self.group0()[2] * other.group4()[0])),
                    ((self.group0()[3] * other.group5()[2]) + (self.group0()[0] * other.group4()[1])),
                ])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        9       19        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other[e2]) + (self.group1()[1] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl Wedge<Scalar> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e1234, e4235, e4315, e4125
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<VersorEven> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group3()[1]) + (self.group1()[1] * other.group3()[0]) + (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group2()[3]),
            (self.group0()[1] * other.group2()[3]),
            (self.group0()[2] * other.group2()[3]),
            ((self.group1()[0] * other.group2()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        ]));
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 3, 1, 2, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorOddOnOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            ((self.group1()[0] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorOddOnOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       14        0
    //  no simd       16       20        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[2] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorOdd> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddAtInfinity> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e1234, e4235, e4315, e4125
            ((self.group1() * Simd32x4::from(other.group0()[0]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group0()[2], other.group0()[3], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[2])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorOddOnOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        6        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
            (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
            ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
        ]));
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorOddOnOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1234, e4235, e4315, e4125
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group2()[1], other.group2()[2], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                ])),
        );
    }
}
impl InfixWedge for VersorOddOrthogonalOrigin {}
impl Wedge<AntiCircleOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       10       21        0
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group2()[2] * other.group0()[1]),
                    (self.group2()[0] * other.group0()[2]),
                    (self.group2()[1] * other.group0()[0]),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<AntiDualNum> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       13        0
    fn wedge(self, other: AntiDualNum) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for VersorOddOrthogonalOrigin {
    type Output = AntiFlatOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlector> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       25        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       21       33        0
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) - (self.group2()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group2()[2] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group2()[1] * other.group1()[0]) - (self.group2()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       19        0
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 3, 1, 2, 0))
                - (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]))])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[2])),
                ((self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       10       21        0
    fn wedge(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotor> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       22       34        0
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            ((self.group2() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                        + (self.group1()[3] * other.group0()[3])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        9       21        0
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e23, e31, e12, e3215
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       11       26        0
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return VersorEvenOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiScalar> for VersorOddOrthogonalOrigin {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       22        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       11       26        0
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiVersorEvenOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       22       34        0
    fn wedge(self, other: AntiVersorEvenOnOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other.group0()[3]),
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group2()[1] * other.group1()[1]) - (self.group2()[0] * other.group1()[0]))])),
        );
    }
}
impl Wedge<AntiVersorOddOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       18       33        0
    fn wedge(self, other: AntiVersorOddOnOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group1() * Simd32x4::from(other.group1()[0]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group2()[0] * other.group1()[0]),
                (self.group2()[1] * other.group1()[0]),
                (self.group2()[2] * other.group1()[0]),
                (-(self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[2])),
                ((self.group2()[0] * other.group1()[3]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group1(), 1, 2, 3, 0)),
        );
    }
}
impl Wedge<Circle> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn wedge(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<CircleAligningOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenAtInfinity;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       13        0
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return VersorEvenAtInfinity::from_groups(
            // e12345, e1, e2, e3
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       13        0
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<Dipole> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       22       37        0
    fn wedge(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       16       28        0
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       13       22        0
    //  no simd       13       25        0
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       24        0
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                ])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       29        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       16       30        0
    //  no simd       19       33        0
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
    }
}
impl Wedge<DualNum> for VersorOddOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        9        0
    fn wedge(self, other: DualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<FlatOrigin> for VersorOddOrthogonalOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<FlatPoint> for VersorOddOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        8       16        0
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Flector> for VersorOddOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0]))])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = FlectorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
            ((self.group0()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
            ((self.group0()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
        ]));
    }
}
impl Wedge<Horizon> for VersorOddOrthogonalOrigin {
    type Output = Horizon;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for VersorOddOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Line> for VersorOddOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for VersorOddOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       14        0
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = MotorOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<MultiVector> for VersorOddOrthogonalOrigin {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       60        0
    //    simd3        6        8        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       49       74        0
    //  no simd       76      108        0
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[3] * other.group0()[0]),
                ((self.group2()[3] * other[e1]) - (self.group2()[2] * other.group7()[2]) - (self.group2()[1] * other.group7()[1]) - (self.group2()[0] * other.group7()[0])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[0])
                    + (self.group0()[3] * other.group0()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group3()[2])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[3]) * other.group4()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[3]) * other.group5()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group1()[3]) + (self.group0()[3] * other.group6()[0])),
                    ((self.group2()[1] * other.group1()[3]) + (self.group0()[3] * other.group6()[1])),
                    ((self.group2()[2] * other.group1()[3]) + (self.group0()[3] * other.group6()[2])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                + Simd32x3::from([
                    ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group8())
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group1()[1]) - (self.group2()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group1()[0]) - (self.group2()[0] * other.group1()[1])),
                ])),
            // e1234, e4235, e4315, e4125
            ((swizzle!(self.group2(), 3, 2, 0, 1) * Simd32x4::from([other.group0()[0], other.group3()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(other.group3(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group9())
                - (swizzle!(self.group0(), 2, 2, 0, 1) * Simd32x4::from([other.group5()[2], other.group4()[1], other.group4()[2], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group5()[0])
                        - (self.group0()[1] * other.group5()[1])),
                    ((self.group1()[0] * other.group3()[3]) + (self.group0()[1] * other.group4()[2])),
                    ((self.group1()[1] * other.group3()[3]) + (self.group0()[2] * other.group4()[0])),
                    ((self.group1()[2] * other.group3()[3]) + (self.group0()[0] * other.group4()[1])),
                ])),
            // e3215
            (-(self.group2()[2] * other.group5()[2]) - (self.group2()[1] * other.group5()[1]) - (self.group2()[0] * other.group5()[0]) + (self.group1()[3] * other.group0()[0])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                + (self.group0()[3] * other[e45])
                - (self.group1()[0] * other.group4()[0])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from(0.0),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       12        0
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = NullSphereAtOrigin;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<NullVersorEvenAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        6       14        0
    fn wedge(self, other: NullVersorEvenAtOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e4
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<NullVersorOddAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        9       13        0
    fn wedge(self, other: NullVersorOddAtOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group2()[2], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([(-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])), 0.0, 0.0, 0.0])),
        );
    }
}
impl Wedge<Origin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            (self.group1() * Simd32x4::from(other[e4])),
            // e415, e425, e435, e4
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Plane> for VersorOddOrthogonalOrigin {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = PlaneOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       18       34        0
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group1() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                    (self.group2()[3] * other[e2]),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2]) - (self.group2()[0] * other.group0()[1])),
                (self.group0()[3] * other[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                ((self.group1()[3] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
            ]),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Scalar> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOrthogonalOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        3        0
    // no simd        0       12        0
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOddOrthogonalOrigin::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e23, e31, e12, e3215
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for VersorOddOrthogonalOrigin {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234
            (self.group0()[3] * other[e4315]),
        );
    }
}
impl Wedge<SphereAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = SphereAtOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e3215, e1234 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = SphereOnOrigin;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<VersorEven> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       34        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       26       39        0
    //  no simd       38       54        0
    fn wedge(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group1() * Simd32x4::from(other.group3()[3])) + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group3()[2]),
                    (self.group0()[2] * other.group3()[0]),
                    (self.group0()[0] * other.group3()[1]),
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group3()[3]) + (self.group0()[3] * other.group1()[0])),
                    ((self.group2()[1] * other.group3()[3]) + (self.group0()[3] * other.group1()[1])),
                    ((self.group2()[2] * other.group3()[3]) + (self.group0()[3] * other.group1()[2])),
                    (-(self.group1()[2] * other.group3()[2]) - (self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group3()[1]) - (self.group2()[1] * other.group3()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                (-(self.group2()[2] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group2()[1] * other.group3()[0]) - (self.group2()[0] * other.group3()[1]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group3()),
        );
    }
}
impl Wedge<VersorEvenAligningOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       27        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       29        0
    //  no simd       26       35        0
    fn wedge(self, other: VersorEvenAligningOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + (self.group1() * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group2()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       28       40        0
    fn wedge(self, other: VersorEvenAtInfinity) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 3, 1, 2, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group2()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[3] * other.group2()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group1()[0]),
                    (self.group0()[3] * other.group1()[1]),
                    (self.group0()[3] * other.group1()[2]),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[3]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3])),
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group2()[3])),
                (self.group0()[3] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<VersorEvenAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       28        0
    fn wedge(self, other: VersorEvenAtOrigin) -> Self::Output {
        return VersorEvenAligningOrigin::from_groups(
            // e423, e431, e412, e12345
            ((other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[3]),
                    (self.group1()[1] * other.group0()[3]),
                    (self.group1()[2] * other.group0()[3]),
                    ((self.group2()[3] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEvenOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       15        0
    //  no simd       16       21        0
    fn wedge(self, other: VersorEvenOnOrigin) -> Self::Output {
        return VersorEvenOnOrigin::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + (self.group1() * Simd32x4::from(other.group1()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group2()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group2()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<VersorEvenOrthogonalOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       31        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       31       47        0
    fn wedge(self, other: VersorEvenOrthogonalOrigin) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((self.group1() * Simd32x4::from(other.group2()[3]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[3] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group2()[3]),
                    (self.group2()[1] * other.group2()[3]),
                    (self.group2()[2] * other.group2()[3]),
                    (-(self.group1()[2] * other.group2()[2]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[2] * other.group2()[1]) - (self.group2()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group2()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group2()[2])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group2()[1] * other.group2()[0]) - (self.group2()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group2()),
        );
    }
}
impl Wedge<VersorOdd> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       30        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       23       36        0
    //  no simd       41       54        0
    fn wedge(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                + (self.group2() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAligningOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       21        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       21       33        0
    fn wedge(self, other: VersorOddAligningOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtInfinity> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       25       41        0
    fn wedge(self, other: VersorOddAtInfinity) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[0]),
                    (self.group2()[1] * other.group0()[0]),
                    (self.group2()[2] * other.group0()[0]),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((self.group1() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]])) + (Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(other.group0(), 2, 3, 1, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (-(self.group2()[2] * other.group1()[2])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[1])),
                ])),
        );
    }
}
impl Wedge<VersorOddAtOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddAligningOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       15       26        0
    fn wedge(self, other: VersorOddAtOrigin) -> Self::Output {
        return VersorOddAligningOrigin::from_groups(
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<VersorOddOnOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOddOnOrigin;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn wedge(self, other: VersorOddOnOrigin) -> Self::Output {
        return VersorOddOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1234, e4235, e4315, e4125
            (-(swizzle!(other.group0(), 2, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group2()[1], self.group2()[2], self.group2()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                ])),
        );
    }
}
impl Wedge<VersorOddOrthogonalOrigin> for VersorOddOrthogonalOrigin {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       23        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       20       29        0
    //  no simd       38       47        0
    fn wedge(self, other: VersorOddOrthogonalOrigin) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                + (self.group2() * Simd32x4::from(other.group0()[3]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
    }
}
